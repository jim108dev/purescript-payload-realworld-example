// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_DateTime_Instant = require("../Data.DateTime.Instant/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect_Unsafe = require("../Effect.Unsafe/index.js");
var Node_Buffer = require("../Node.Buffer/index.js");
var Node_Buffer_Class = require("../Node.Buffer.Class/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var Node_FS = require("../Node.FS/index.js");
var Node_FS_Internal = require("../Node.FS.Internal/index.js");
var Node_FS_Perms = require("../Node.FS.Perms/index.js");
var Node_FS_Stats = require("../Node.FS.Stats/index.js");
var handleCallback = function (cb) {
    return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
};
var fs = Node_FS_Internal.unsafeRequireFS;
var link = function (src) {
    return function (dst) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.link(src, dst, handleCallback(cb));
            });
        };
    };
};
var mkdir$prime = function (file) {
    return function (perms) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.mkdir(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
            });
        };
    };
};
var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));
var readFile = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.readFile(file, {}, handleCallback(cb));
        });
    };
};
var readTextFile = function (encoding) {
    return function (file) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.readFile(file, {
                    encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                }, handleCallback(cb));
            });
        };
    };
};
var readdir = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.readdir(file, handleCallback(cb));
        });
    };
};
var readlink = function (path) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.readlink(path, handleCallback(cb));
        });
    };
};
var realpath = function (path) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.realpath(path, {}, handleCallback(cb));
        });
    };
};
var realpath$prime = function (path) {
    return function (cache) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.realpath(path, cache, handleCallback(cb));
            });
        };
    };
};
var rename = function (oldFile) {
    return function (newFile) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.rename(oldFile, newFile, handleCallback(cb));
            });
        };
    };
};
var rmdir = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.rmdir(file, handleCallback(cb));
        });
    };
};
var stat = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.stat(file, handleCallback((function () {
                var $28 = Data_Functor.map(Data_Either.functorEither)(Node_FS_Stats.Stats.create);
                return function ($29) {
                    return cb($28($29));
                };
            })()));
        });
    };
};
var symlink = function (src) {
    return function (dest) {
        return function (ty) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.symlink(src, dest, Node_FS.symlinkTypeToNode(ty), handleCallback(cb));
                });
            };
        };
    };
};
var truncate = function (file) {
    return function (len) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.truncate(file, len, handleCallback(cb));
            });
        };
    };
};
var unlink = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.unlink(file, handleCallback(cb));
        });
    };
};
var utimes = function (file) {
    return function (atime) {
        return function (mtime) {
            return function (cb) {
                var toEpochMilliseconds = function ($30) {
                    return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($30));
                };
                var ms = function (v) {
                    return Data_Int.round(v);
                };
                var fromDate = function (date) {
                    return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(ms(toEpochMilliseconds(date)))(1000);
                };
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.utimes(file, fromDate(atime), fromDate(mtime), handleCallback(cb));
                });
            };
        };
    };
};
var writeFile = function (file) {
    return function (buff) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.writeFile(file, buff, {}, handleCallback(cb));
            });
        };
    };
};
var writeTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.writeFile(file, buff, {
                        encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                    }, handleCallback(cb));
                });
            };
        };
    };
};
var fdWrite = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function (cb) {
                        return Node_FS_Internal.mkEffect(function (v) {
                            return fs.write(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                        });
                    };
                };
            };
        };
    };
};
var fdRead = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function (cb) {
                        return Node_FS_Internal.mkEffect(function (v) {
                            return fs.read(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                        });
                    };
                };
            };
        };
    };
};
var fdOpen = function (file) {
    return function (flags) {
        return function (mode) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.open(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode), handleCallback(cb));
                });
            };
        };
    };
};
var fdNext = function (fd) {
    return function (buff) {
        return function (cb) {
            return function __do() {
                var sz = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
                return fdRead(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)(cb)();
            };
        };
    };
};
var fdClose = function (fd) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.close(fd, handleCallback(cb));
        });
    };
};
var fdAppend = function (fd) {
    return function (buff) {
        return function (cb) {
            return function __do() {
                var sz = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
                return fdWrite(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)(cb)();
            };
        };
    };
};
var exists = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return fs.exists(file, function (b) {
                return Effect_Unsafe.unsafePerformEffect(cb(b));
            });
        });
    };
};
var chown = function (file) {
    return function (uid) {
        return function (gid) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.chown(file, uid, gid, handleCallback(cb));
                });
            };
        };
    };
};
var chmod = function (file) {
    return function (perms) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.chmod(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
            });
        };
    };
};
var appendTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return fs.appendFile(file, buff, {
                        encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                    }, handleCallback(cb));
                });
            };
        };
    };
};
var appendFile = function (file) {
    return function (buff) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return fs.appendFile(file, buff, {}, handleCallback(cb));
            });
        };
    };
};
module.exports = {
    rename: rename,
    truncate: truncate,
    chown: chown,
    chmod: chmod,
    stat: stat,
    link: link,
    symlink: symlink,
    readlink: readlink,
    realpath: realpath,
    "realpath'": realpath$prime,
    unlink: unlink,
    rmdir: rmdir,
    mkdir: mkdir,
    "mkdir'": mkdir$prime,
    readdir: readdir,
    utimes: utimes,
    readFile: readFile,
    readTextFile: readTextFile,
    writeFile: writeFile,
    writeTextFile: writeTextFile,
    appendFile: appendFile,
    appendTextFile: appendTextFile,
    exists: exists,
    fdOpen: fdOpen,
    fdRead: fdRead,
    fdNext: fdNext,
    fdWrite: fdWrite,
    fdAppend: fdAppend,
    fdClose: fdClose
};
