// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad = require("../Control.Monad/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Pipes = require("../Pipes/index.js");
var Pipes_Internal = require("../Pipes.Internal/index.js");
var toList = function (prod0) {
    var go = function (prod) {
        return function (cons) {
            return function (nil) {
                if (prod instanceof Pipes_Internal.Request) {
                    return Pipes_Internal.closed(prod.value0);
                };
                if (prod instanceof Pipes_Internal.Respond) {
                    return new Data_List_Types.Cons(prod.value0, go(prod.value1(Data_Unit.unit))(Data_List_Types.Cons.create)(nil));
                };
                if (prod instanceof Pipes_Internal.M) {
                    return go(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(prod.value0))(Data_List_Types.Cons.create)(nil);
                };
                if (prod instanceof Pipes_Internal.Pure) {
                    return nil;
                };
                throw new Error("Failed pattern match at Pipes.Prelude (line 354, column 7 - line 358, column 28): " + [ prod.constructor.name ]);
            };
        };
    };
    return go(prod0)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};
var takeWhile$prime = function (dictMonad) {
    return function (predicate) {
        var go = Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Pipes["await"](dictMonad))(function (a) {
            var $62 = predicate(a);
            if ($62) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Pipes_Internal.bindProxy(dictMonad))(Pipes["yield"](dictMonad)(a))(function () {
                    return go;
                });
            };
            return Control_Applicative.pure(Pipes_Internal.applicativeProxy(dictMonad))(a);
        });
        return go;
    };
};
var takeWhile = function (dictMonad) {
    return function (predicate) {
        var go = Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Pipes["await"](dictMonad))(function (a) {
            var $63 = predicate(a);
            if ($63) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Pipes_Internal.bindProxy(dictMonad))(Pipes["yield"](dictMonad)(a))(function () {
                    return go;
                });
            };
            return Control_Applicative.pure(Pipes_Internal.applicativeProxy(dictMonad))(Data_Unit.unit);
        });
        return go;
    };
};
var take = function (dictMonad) {
    var loop = function (v) {
        if (v === 0) {
            return Control_Applicative.pure(Pipes_Internal.applicativeProxy(dictMonad))(Data_Unit.unit);
        };
        return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Pipes["await"](dictMonad))(function (a) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Pipes_Internal.bindProxy(dictMonad))(Pipes["yield"](dictMonad)(a))(function () {
                return loop(v - 1 | 0);
            });
        });
    };
    return loop;
};
var seq = function (dictMonad) {
    return Pipes["for"](dictMonad)(Pipes.cat(dictMonad))(function (a) {
        return Pipes["yield"](dictMonad)(a);
    });
};
var scanM = function (dictMonad) {
    return function (step) {
        return function (begin) {
            return function (done) {
                var go = function (x) {
                    return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(done(x)))(function (b) {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Pipes_Internal.bindProxy(dictMonad))(Pipes["yield"](dictMonad)(b))(function () {
                            return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Pipes["await"](dictMonad))(function (a) {
                                return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(step(x)(a)))(function (x$prime) {
                                    return go(x$prime);
                                });
                            });
                        });
                    });
                };
                return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(begin))(function (x) {
                    return go(x);
                });
            };
        };
    };
};
var scan = function (dictMonad) {
    return function (step) {
        return function (begin) {
            return function (done) {
                var go = function (x) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Pipes_Internal.bindProxy(dictMonad))(Pipes["yield"](dictMonad)(done(x)))(function () {
                        return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Pipes["await"](dictMonad))(function (a) {
                            var x$prime = step(x)(a);
                            return go(x$prime);
                        });
                    });
                };
                return go(begin);
            };
        };
    };
};
var replicateM = function (dictMonad) {
    return function (n) {
        return function (m) {
            return Pipes.replaceAwait(dictMonad)(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(m))(take(dictMonad)(n));
        };
    };
};
var repeatM = function (dictMonad) {
    return function (m) {
        return Pipes.replaceAwait(dictMonad)(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(m))(Pipes.cat(dictMonad));
    };
};
var $$null = function (dictMonad) {
    return function (p) {
        return Control_Bind.bind(dictMonad.Bind1())(Pipes.next(dictMonad)(p))(function (x) {
            return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                if (x instanceof Data_Either.Left) {
                    return true;
                };
                if (x instanceof Data_Either.Right) {
                    return false;
                };
                throw new Error("Failed pattern match at Pipes.Prelude (line 345, column 12 - line 347, column 25): " + [ x.constructor.name ]);
            })());
        });
    };
};
var mapM_ = function (dictMonad) {
    return function (f) {
        return Pipes["for"](dictMonad)(Pipes.cat(dictMonad))(function (a) {
            return Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(f(a));
        });
    };
};
var mapM = function (dictMonad) {
    return function (f) {
        return Pipes["for"](dictMonad)(Pipes.cat(dictMonad))(function (a) {
            return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(f(a)))(function (b) {
                return Pipes["yield"](dictMonad)(b);
            });
        });
    };
};
var sequence = function (dictMonad) {
    return mapM(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};
var mapFoldable = function (dictMonad) {
    return function (dictFoldable) {
        return function (f) {
            return Pipes["for"](dictMonad)(Pipes.cat(dictMonad))(function (a) {
                return Pipes.each(dictMonad)(dictFoldable)(f(a));
            });
        };
    };
};
var map = function (dictMonad) {
    return function (f) {
        return Pipes["for"](dictMonad)(Pipes.cat(dictMonad))(function (a) {
            return Pipes["yield"](dictMonad)(f(a));
        });
    };
};
var show = function (dictMonad) {
    return function (dictShow) {
        return map(dictMonad)(Data_Show.show(dictShow));
    };
};
var last = function (dictMonad) {
    return function (p0) {
        var go = function (a) {
            return function (p) {
                return Control_Bind.bind(dictMonad.Bind1())(Pipes.next(dictMonad)(p))(function (x) {
                    if (x instanceof Data_Either.Left) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Maybe.Just(a));
                    };
                    if (x instanceof Data_Either.Right) {
                        return go(x.value0.value0)(x.value0.value1);
                    };
                    throw new Error("Failed pattern match at Pipes.Prelude (line 313, column 9 - line 315, column 44): " + [ x.constructor.name ]);
                });
            };
        };
        return Control_Bind.bind(dictMonad.Bind1())(Pipes.next(dictMonad)(p0))(function (x) {
            if (x instanceof Data_Either.Left) {
                return Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value);
            };
            if (x instanceof Data_Either.Right) {
                return go(x.value0.value0)(x.value0.value1);
            };
            throw new Error("Failed pattern match at Pipes.Prelude (line 307, column 5 - line 309, column 38): " + [ x.constructor.name ]);
        });
    };
};
var head = function (dictMonad) {
    return function (p) {
        return Control_Bind.bind(dictMonad.Bind1())(Pipes.next(dictMonad)(p))(function (x) {
            return Control_Applicative.pure(dictMonad.Applicative0())((function () {
                if (x instanceof Data_Either.Left) {
                    return Data_Maybe.Nothing.value;
                };
                if (x instanceof Data_Either.Right) {
                    return new Data_Maybe.Just(x.value0.value0);
                };
                throw new Error("Failed pattern match at Pipes.Prelude (line 295, column 12 - line 297, column 36): " + [ x.constructor.name ]);
            })());
        });
    };
};
var foldM$prime = function (dictMonad) {
    return function (step) {
        return function (begin) {
            return function (done) {
                return function (p0) {
                    var go = function (p) {
                        return function (x) {
                            if (p instanceof Pipes_Internal.Request) {
                                return Pipes_Internal.closed(p.value0);
                            };
                            if (p instanceof Pipes_Internal.Respond) {
                                return Control_Bind.bind(dictMonad.Bind1())(step(x)(p.value0))(function (x$prime) {
                                    return go(p.value1(Data_Unit.unit))(x$prime);
                                });
                            };
                            if (p instanceof Pipes_Internal.M) {
                                return Control_Bind.bind(dictMonad.Bind1())(p.value0)(function (p$prime) {
                                    return go(p$prime)(x);
                                });
                            };
                            if (p instanceof Pipes_Internal.Pure) {
                                return Control_Bind.bind(dictMonad.Bind1())(done(x))(function (b) {
                                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(b, p.value0));
                                });
                            };
                            throw new Error("Failed pattern match at Pipes.Prelude (line 247, column 14 - line 255, column 29): " + [ p.constructor.name ]);
                        };
                    };
                    return Control_Bind.bind(dictMonad.Bind1())(begin)(function (x0) {
                        return go(p0)(x0);
                    });
                };
            };
        };
    };
};
var foldM = function (dictMonad) {
    return function (step) {
        return function (begin) {
            return function (done) {
                return function (p0) {
                    var go = function (p) {
                        return function (x) {
                            if (p instanceof Pipes_Internal.Request) {
                                return Pipes_Internal.closed(p.value0);
                            };
                            if (p instanceof Pipes_Internal.Respond) {
                                return Control_Bind.bind(dictMonad.Bind1())(step(x)(p.value0))(function (x$prime) {
                                    return go(p.value1(Data_Unit.unit))(x$prime);
                                });
                            };
                            if (p instanceof Pipes_Internal.M) {
                                return Control_Bind.bind(dictMonad.Bind1())(p.value0)(function (p$prime) {
                                    return go(p$prime)(x);
                                });
                            };
                            if (p instanceof Pipes_Internal.Pure) {
                                return done(x);
                            };
                            throw new Error("Failed pattern match at Pipes.Prelude (line 230, column 14 - line 236, column 32): " + [ p.constructor.name ]);
                        };
                    };
                    return Control_Bind.bind(dictMonad.Bind1())(begin)(function (x0) {
                        return go(p0)(x0);
                    });
                };
            };
        };
    };
};
var fold$prime = function (dictMonad) {
    return function (step) {
        return function (begin) {
            return function (done) {
                return function (p0) {
                    var go = function (p) {
                        return function (x) {
                            if (p instanceof Pipes_Internal.Request) {
                                return Pipes_Internal.closed(p.value0);
                            };
                            if (p instanceof Pipes_Internal.Respond) {
                                return go(p.value1(Data_Unit.unit))(step(x)(p.value0));
                            };
                            if (p instanceof Pipes_Internal.M) {
                                return Control_Bind.bind(dictMonad.Bind1())(p.value0)(function (p$prime) {
                                    return go(p$prime)(x);
                                });
                            };
                            if (p instanceof Pipes_Internal.Pure) {
                                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(done(x), p.value0));
                            };
                            throw new Error("Failed pattern match at Pipes.Prelude (line 215, column 14 - line 219, column 49): " + [ p.constructor.name ]);
                        };
                    };
                    return go(p0)(begin);
                };
            };
        };
    };
};
var fold = function (dictMonad) {
    return function (step) {
        return function (begin) {
            return function (done) {
                return function (p0) {
                    var go = function (p) {
                        return function (x) {
                            if (p instanceof Pipes_Internal.Request) {
                                return Pipes_Internal.closed(p.value0);
                            };
                            if (p instanceof Pipes_Internal.Respond) {
                                return go(p.value1(Data_Unit.unit))(step(x)(p.value0));
                            };
                            if (p instanceof Pipes_Internal.M) {
                                return Control_Bind.bind(dictMonad.Bind1())(p.value0)(function (p$prime) {
                                    return go(p$prime)(x);
                                });
                            };
                            if (p instanceof Pipes_Internal.Pure) {
                                return Control_Applicative.pure(dictMonad.Applicative0())(done(x));
                            };
                            throw new Error("Failed pattern match at Pipes.Prelude (line 202, column 14 - line 206, column 39): " + [ p.constructor.name ]);
                        };
                    };
                    return go(p0)(begin);
                };
            };
        };
    };
};
var length = function (dictMonad) {
    return fold(dictMonad)(function (n) {
        return function (v) {
            return n + 1 | 0;
        };
    })(0)(Control_Category.identity(Control_Category.categoryFn));
};
var maximum = function (dictMonad) {
    return function (dictOrd) {
        var max = function (x) {
            return function (y) {
                if (Data_Ord.greaterThanOrEq(dictOrd)(x)(y)) {
                    return x;
                };
                if (Data_Boolean.otherwise) {
                    return y;
                };
                throw new Error("Failed pattern match at Pipes.Prelude (line 328, column 5 - line 329, column 28): " + [ x.constructor.name, y.constructor.name ]);
            };
        };
        var step = function (x) {
            return function (a) {
                return Data_Maybe.Just.create((function () {
                    if (x instanceof Data_Maybe.Nothing) {
                        return a;
                    };
                    if (x instanceof Data_Maybe.Just) {
                        return max(a)(x.value0);
                    };
                    throw new Error("Failed pattern match at Pipes.Prelude (line 325, column 23 - line 327, column 28): " + [ x.constructor.name ]);
                })());
            };
        };
        return fold(dictMonad)(step)(Data_Maybe.Nothing.value)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var minimum = function (dictMonad) {
    return function (dictOrd) {
        var min = function (x) {
            return function (y) {
                if (Data_Ord.lessThan(dictOrd)(x)(y)) {
                    return x;
                };
                if (Data_Boolean.otherwise) {
                    return y;
                };
                throw new Error("Failed pattern match at Pipes.Prelude (line 338, column 5 - line 339, column 28): " + [ x.constructor.name, y.constructor.name ]);
            };
        };
        var step = function (x) {
            return function (a) {
                return Data_Maybe.Just.create((function () {
                    if (x instanceof Data_Maybe.Nothing) {
                        return a;
                    };
                    if (x instanceof Data_Maybe.Just) {
                        return min(a)(x.value0);
                    };
                    throw new Error("Failed pattern match at Pipes.Prelude (line 335, column 23 - line 337, column 28): " + [ x.constructor.name ]);
                })());
            };
        };
        return fold(dictMonad)(step)(Data_Maybe.Nothing.value)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var toListM = function (dictMonad) {
    var step = function (x) {
        return function (a) {
            return function ($121) {
                return x((function (v) {
                    return new Data_List_Types.Cons(a, v);
                })($121));
            };
        };
    };
    var done = function (x) {
        return x(Data_List_Types.Nil.value);
    };
    return fold(dictMonad)(step)(Control_Category.identity(Control_Category.categoryFn))(done);
};
var findIndices = function (dictMonad) {
    return function (predicate) {
        var go = function (n) {
            return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Pipes["await"](dictMonad))(function (a) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Pipes_Internal.bindProxy(dictMonad))(Control_Applicative.when(Pipes_Internal.applicativeProxy(dictMonad))(predicate(a))(Pipes["yield"](dictMonad)(n)))(function () {
                    return go(n + 1 | 0);
                });
            });
        };
        return go(0);
    };
};
var findIndex = function (dictMonad) {
    return function (predicate) {
        return function (p) {
            return head(dictMonad)(Pipes.composePipes(dictMonad)(p)(findIndices(dictMonad)(predicate)));
        };
    };
};
var filterM = function (dictMonad) {
    return function (predicate) {
        return Pipes["for"](dictMonad)(Pipes.cat(dictMonad))(function (a) {
            return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(predicate(a)))(function (b) {
                return Control_Applicative.when(Pipes_Internal.applicativeProxy(dictMonad))(b)(Pipes["yield"](dictMonad)(a));
            });
        });
    };
};
var filter = function (dictMonad) {
    return function (predicate) {
        return Pipes["for"](dictMonad)(Pipes.cat(dictMonad))(function (a) {
            return Control_Applicative.when(Pipes_Internal.applicativeProxy(dictMonad))(predicate(a))(Pipes["yield"](dictMonad)(a));
        });
    };
};
var find = function (dictMonad) {
    return function (predicate) {
        return function (p) {
            return head(dictMonad)(Pipes.composePipes(dictMonad)(p)(filter(dictMonad)(predicate)));
        };
    };
};
var dropWhile = function (dictMonad) {
    return function (predicate) {
        var go = Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Pipes["await"](dictMonad))(function (a) {
            var $119 = predicate(a);
            if ($119) {
                return go;
            };
            return Control_Bind.discard(Control_Bind.discardUnit)(Pipes_Internal.bindProxy(dictMonad))(Pipes["yield"](dictMonad)(a))(function () {
                return Pipes.cat(dictMonad);
            });
        });
        return go;
    };
};
var drop = function (dictMonad) {
    var loop = function (v) {
        if (v === 0) {
            return Pipes.cat(dictMonad);
        };
        return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Pipes["await"](dictMonad))(function () {
            return loop(v - 1 | 0);
        });
    };
    return loop;
};
var index = function (dictMonad) {
    return function (n) {
        return function (p) {
            return head(dictMonad)(Pipes.composePipes(dictMonad)(p)(drop(dictMonad)(n)));
        };
    };
};
var drain = function (dictMonad) {
    return Pipes["for"](dictMonad)(Pipes.cat(dictMonad))(Pipes.discard(Pipes_Internal.monadProxy(dictMonad)));
};
var concat = function (dictMonad) {
    return function (dictFoldable) {
        return Pipes["for"](dictMonad)(Pipes.cat(dictMonad))(Pipes.each(dictMonad)(dictFoldable));
    };
};
var chain = function (dictMonad) {
    return function (f) {
        return Pipes["for"](dictMonad)(Pipes.cat(dictMonad))(function (a) {
            return Control_Bind.discard(Control_Bind.discardUnit)(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(f(a)))(function () {
                return Pipes["yield"](dictMonad)(a);
            });
        });
    };
};
var any = function (dictMonad) {
    return function (predicate) {
        return function (p) {
            return Control_Monad.liftM1(dictMonad)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))($$null(dictMonad)(Pipes.composePipes(dictMonad)(p)(filter(dictMonad)(predicate))));
        };
    };
};
var elem = function (dictMonad) {
    return function (dictEq) {
        return function (a) {
            return any(dictMonad)(function (v) {
                return Data_Eq.eq(dictEq)(a)(v);
            });
        };
    };
};
var or = function (dictMonad) {
    return any(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};
var all = function (dictMonad) {
    return function (predicate) {
        return function (p) {
            return $$null(dictMonad)(Pipes.composePipes(dictMonad)(p)(filter(dictMonad)(function (a) {
                return !predicate(a);
            })));
        };
    };
};
var and = function (dictMonad) {
    return all(dictMonad)(Control_Category.identity(Control_Category.categoryFn));
};
var notElem = function (dictMonad) {
    return function (dictEq) {
        return function (a) {
            return all(dictMonad)(function (v) {
                return Data_Eq.notEq(dictEq)(a)(v);
            });
        };
    };
};
module.exports = {
    repeatM: repeatM,
    replicateM: replicateM,
    mapM_: mapM_,
    drain: drain,
    map: map,
    mapM: mapM,
    sequence: sequence,
    mapFoldable: mapFoldable,
    filter: filter,
    filterM: filterM,
    take: take,
    takeWhile: takeWhile,
    "takeWhile'": takeWhile$prime,
    drop: drop,
    dropWhile: dropWhile,
    concat: concat,
    findIndices: findIndices,
    scan: scan,
    scanM: scanM,
    chain: chain,
    show: show,
    seq: seq,
    fold: fold,
    "fold'": fold$prime,
    foldM: foldM,
    "foldM'": foldM$prime,
    all: all,
    any: any,
    and: and,
    or: or,
    elem: elem,
    notElem: notElem,
    find: find,
    findIndex: findIndex,
    head: head,
    index: index,
    last: last,
    length: length,
    maximum: maximum,
    minimum: minimum,
    "null": $$null,
    toList: toList,
    toListM: toListM
};
