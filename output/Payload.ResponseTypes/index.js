// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Payload_Headers = require("../Payload.Headers/index.js");
var StringBody = (function () {
    function StringBody(value0) {
        this.value0 = value0;
    };
    StringBody.create = function (value0) {
        return new StringBody(value0);
    };
    return StringBody;
})();
var StreamBody = (function () {
    function StreamBody(value0) {
        this.value0 = value0;
    };
    StreamBody.create = function (value0) {
        return new StreamBody(value0);
    };
    return StreamBody;
})();
var EmptyBody = (function () {
    function EmptyBody() {

    };
    EmptyBody.value = new EmptyBody();
    return EmptyBody;
})();
var Json = function (x) {
    return x;
};
var Response = function (x) {
    return x;
};
var Forward = (function () {
    function Forward(value0) {
        this.value0 = value0;
    };
    Forward.create = function (value0) {
        return new Forward(value0);
    };
    return Forward;
})();
var $$Error = (function () {
    function $$Error(value0) {
        this.value0 = value0;
    };
    $$Error.create = function (value0) {
        return new $$Error(value0);
    };
    return $$Error;
})();
var Empty = (function () {
    function Empty() {

    };
    Empty.value = new Empty();
    return Empty;
})();
var showResponseBody = new Data_Show.Show(function (v) {
    if (v instanceof StringBody) {
        return v.value0;
    };
    if (v instanceof EmptyBody) {
        return "EmptyBody";
    };
    if (v instanceof StreamBody) {
        return "StreamBody";
    };
    throw new Error("Failed pattern match at Payload.ResponseTypes (line 55, column 1 - line 58, column 37): " + [ v.constructor.name ]);
});
var showResponse = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "body";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "headers";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "status";
        }))(Data_Show.showRecordFieldsNil)(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "code";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "reason";
        }))(Data_Show.showRecordFieldsNil)(Data_Show.showString))(Data_Show.showInt))))(Payload_Headers.showHeaders))(dictShow)))(v);
    });
};
var showFailure = new Data_Show.Show(function (v) {
    if (v instanceof Forward) {
        return "Forward '" + (v.value0 + "'");
    };
    if (v instanceof $$Error) {
        return "Error " + Data_Show.show(showResponse(showResponseBody))(v.value0);
    };
    throw new Error("Failed pattern match at Payload.ResponseTypes (line 39, column 1 - line 41, column 38): " + [ v.constructor.name ]);
});
var newtypeResponse = new Data_Newtype.Newtype(function (n) {
    return n;
}, Response);
var eqResponseBody = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof StringBody && v1 instanceof StringBody) {
            return v.value0 === v1.value0;
        };
        if (v instanceof EmptyBody && v1 instanceof EmptyBody) {
            return true;
        };
        if (v instanceof StreamBody && v1 instanceof StreamBody) {
            return false;
        };
        return false;
    };
});
var eqResponse = function (dictEq) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            return Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                return "status";
            }))(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                return "reason";
            }))(Data_Eq.eqString))()(new Data_Symbol.IsSymbol(function () {
                return "code";
            }))(Data_Eq.eqInt))))()(new Data_Symbol.IsSymbol(function () {
                return "headers";
            }))(Payload_Headers.eqHeaders))()(new Data_Symbol.IsSymbol(function () {
                return "body";
            }))(dictEq)))(v)(v1);
        };
    });
};
module.exports = {
    Response: Response,
    Empty: Empty,
    Json: Json,
    Forward: Forward,
    "Error": $$Error,
    StringBody: StringBody,
    StreamBody: StreamBody,
    EmptyBody: EmptyBody,
    newtypeResponse: newtypeResponse,
    eqResponse: eqResponse,
    showResponse: showResponse,
    showFailure: showFailure,
    eqResponseBody: eqResponseBody,
    showResponseBody: showResponseBody
};
