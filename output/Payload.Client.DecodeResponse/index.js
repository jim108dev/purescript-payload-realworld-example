// Generated by purs version 0.13.8
"use strict";
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Foreign = require("../Foreign/index.js");
var Payload_ResponseTypes = require("../Payload.ResponseTypes/index.js");
var Simple_JSON = require("../Simple.JSON/index.js");
var InternalDecodeError = (function () {
    function InternalDecodeError(value0) {
        this.value0 = value0;
    };
    InternalDecodeError.create = function (value0) {
        return new InternalDecodeError(value0);
    };
    return InternalDecodeError;
})();
var UnhandledResponseError = (function () {
    function UnhandledResponseError(value0) {
        this.value0 = value0;
    };
    UnhandledResponseError.create = function (value0) {
        return new UnhandledResponseError(value0);
    };
    return UnhandledResponseError;
})();
var JsonDecodeError = (function () {
    function JsonDecodeError(value0) {
        this.value0 = value0;
    };
    JsonDecodeError.create = function (value0) {
        return new JsonDecodeError(value0);
    };
    return JsonDecodeError;
})();
var DecodeResponse = function (decodeResponse) {
    this.decodeResponse = decodeResponse;
};
var unhandled = function (message) {
    return new UnhandledResponseError({
        message: message
    });
};
var unexpectedError = function (expected) {
    return function (body) {
        var received = (function () {
            if (body instanceof Payload_ResponseTypes.StringBody) {
                return "(StringBody '" + (body.value0 + "')");
            };
            if (body instanceof Payload_ResponseTypes.StreamBody) {
                return "StreamBody";
            };
            if (body instanceof Payload_ResponseTypes.EmptyBody) {
                return "EmptyBody";
            };
            throw new Error("Failed pattern match at Payload.Client.DecodeResponse (line 34, column 16 - line 37, column 31): " + [ body.constructor.name ]);
        })();
        var message = "Invalid response type, expected '" + (expected + ("' but received '" + (received + ("'." + "This is probably a bug in the library."))));
        return new Data_Either.Left(new InternalDecodeError({
            message: message
        }));
    };
};
var showDecodeResponseError = new Data_Show.Show(function (v) {
    if (v instanceof InternalDecodeError) {
        return "InternalDecodeError '" + (v.value0.message + "'");
    };
    if (v instanceof UnhandledResponseError) {
        return "UnhandledResponseError '" + (v.value0.message + "'");
    };
    if (v instanceof JsonDecodeError) {
        return "JsonDecodeError: " + (Data_Show.show(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(v.value0.errors) + "'");
    };
    throw new Error("Failed pattern match at Payload.Client.DecodeResponse (line 21, column 1 - line 24, column 80): " + [ v.constructor.name ]);
});
var jsonDecodeError = function (errors) {
    return new JsonDecodeError({
        errors: errors
    });
};
var eqDecodeResponseError = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof InternalDecodeError && v1 instanceof InternalDecodeError) {
            return Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                return "message";
            }))(Data_Eq.eqString)))(v.value0)(v1.value0);
        };
        if (v instanceof UnhandledResponseError && v1 instanceof UnhandledResponseError) {
            return Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                return "message";
            }))(Data_Eq.eqString)))(v.value0)(v1.value0);
        };
        if (v instanceof JsonDecodeError && v1 instanceof JsonDecodeError) {
            return Data_Eq.eq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                return "errors";
            }))(Data_List_Types.eqNonEmptyList(Foreign.eqForeignError))))(v.value0)(v1.value0);
        };
        return false;
    };
});
var decodeResponseString = new DecodeResponse(function (v) {
    if (v instanceof Payload_ResponseTypes.StringBody) {
        return new Data_Either.Right(v.value0);
    };
    return unexpectedError("StringBody")(v);
});
var decodeResponseStream = function (dictTypeEquals) {
    return new DecodeResponse(function (v) {
        if (v instanceof Payload_ResponseTypes.StreamBody) {
            return new Data_Either.Right(v.value0);
        };
        return unexpectedError("StreamBody")(v);
    });
};
var decodeResponseRecord = function (dictReadForeign) {
    return new DecodeResponse(function (v) {
        if (v instanceof Payload_ResponseTypes.StringBody) {
            return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(jsonDecodeError)(Simple_JSON.readJSON(dictReadForeign)(v.value0));
        };
        return unexpectedError("StringBody")(v);
    });
};
var decodeResponseDefault = function (dictWarn) {
    return new DecodeResponse(function (v) {
        return new Data_Either.Left(unhandled("Could not decode response - no DecodeResponse instance"));
    });
};
var decodeResponseArray = function (dictReadForeign) {
    return new DecodeResponse(function (v) {
        if (v instanceof Payload_ResponseTypes.StringBody) {
            return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(jsonDecodeError)(Simple_JSON.readJSON(dictReadForeign)(v.value0));
        };
        return unexpectedError("StringBody")(v);
    });
};
var decodeResponse = function (dict) {
    return dict.decodeResponse;
};
module.exports = {
    decodeResponse: decodeResponse,
    InternalDecodeError: InternalDecodeError,
    UnhandledResponseError: UnhandledResponseError,
    JsonDecodeError: JsonDecodeError,
    unexpectedError: unexpectedError,
    unhandled: unhandled,
    jsonDecodeError: jsonDecodeError,
    DecodeResponse: DecodeResponse,
    showDecodeResponseError: showDecodeResponseError,
    eqDecodeResponseError: eqDecodeResponseError,
    decodeResponseString: decodeResponseString,
    decodeResponseStream: decodeResponseStream,
    decodeResponseRecord: decodeResponseRecord,
    decodeResponseArray: decodeResponseArray,
    decodeResponseDefault: decodeResponseDefault
};
