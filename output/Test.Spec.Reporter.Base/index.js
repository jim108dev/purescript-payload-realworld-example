// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Monad_State_Class = require("../Control.Monad.State.Class/index.js");
var Control_Monad_State_Trans = require("../Control.Monad.State.Trans/index.js");
var Control_Monad_Trans_Class = require("../Control.Monad.Trans.Class/index.js");
var Control_Monad_Writer = require("../Control.Monad.Writer/index.js");
var Control_Monad_Writer_Trans = require("../Control.Monad.Writer.Trans/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Generic_Rep = require("../Data.Generic.Rep/index.js");
var Data_Generic_Rep_Show = require("../Data.Generic.Rep.Show/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Data_Void = require("../Data.Void/index.js");
var Effect = require("../Effect/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Pipes = require("../Pipes/index.js");
var Pipes_Internal = require("../Pipes.Internal/index.js");
var Test_Spec_Console = require("../Test.Spec.Console/index.js");
var Test_Spec_Result = require("../Test.Spec.Result/index.js");
var Test_Spec_Runner_Event = require("../Test.Spec.Runner.Event/index.js");
var Test_Spec_Style = require("../Test.Spec.Style/index.js");
var Test_Spec_Summary = require("../Test.Spec.Summary/index.js");
var Test_Spec_Tree = require("../Test.Spec.Tree/index.js");
var RunningTest = (function () {
    function RunningTest(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RunningTest.create = function (value0) {
        return function (value1) {
            return new RunningTest(value0, value1);
        };
    };
    return RunningTest;
})();
var RunningPending = (function () {
    function RunningPending(value0) {
        this.value0 = value0;
    };
    RunningPending.create = function (value0) {
        return new RunningPending(value0);
    };
    return RunningPending;
})();
var RunningSuite = (function () {
    function RunningSuite(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RunningSuite.create = function (value0) {
        return function (value1) {
            return new RunningSuite(value0, value1);
        };
    };
    return RunningSuite;
})();
var scanWithStateM = function (dictMonad) {
    return function (step) {
        return function (begin) {
            var go = function (x) {
                return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Pipes["await"](dictMonad))(function (a) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Pipes_Internal.bindProxy(dictMonad))(Pipes["yield"](dictMonad)(a))(function () {
                        return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(step(x)(a)))(function (x$prime) {
                            return go(x$prime);
                        });
                    });
                });
            };
            return Control_Bind.bind(Pipes_Internal.bindProxy(dictMonad))(Control_Monad_Trans_Class.lift(Pipes_Internal.monadTransProxy)(dictMonad)(begin))(function (x) {
                return go(x);
            });
        };
    };
};
var runningItemGeneric = new Data_Generic_Rep.Generic(function (x) {
    if (x instanceof RunningTest) {
        return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
    };
    if (x instanceof RunningPending) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
    };
    if (x instanceof RunningSuite) {
        return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1)));
    };
    throw new Error("Failed pattern match at Test.Spec.Reporter.Base (line 110, column 1 - line 110, column 60): " + [ x.constructor.name ]);
}, function (x) {
    if (x instanceof Data_Generic_Rep.Inl) {
        return new RunningTest(x.value0.value0, x.value0.value1);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
        return new RunningPending(x.value0.value0);
    };
    if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
        return new RunningSuite(x.value0.value0.value0, x.value0.value0.value1);
    };
    throw new Error("Failed pattern match at Test.Spec.Reporter.Base (line 110, column 1 - line 110, column 60): " + [ x.constructor.name ]);
});
var runningItemShow = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(runningItemGeneric)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Maybe.showMaybe(Test_Spec_Result.showResult))))(new Data_Symbol.IsSymbol(function () {
    return "RunningTest";
})))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(new Data_Symbol.IsSymbol(function () {
    return "RunningPending";
})))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsProduct(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showString))(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showBoolean)))(new Data_Symbol.IsSymbol(function () {
    return "RunningSuite";
}))))));
var printFailures = function (dictMonadWriter) {
    return function (xs$prime) {
        var go = Data_Foldable.traverse_(Control_Monad_State_Trans.applicativeStateT((dictMonadWriter.MonadTell0()).Monad0()))(Data_Foldable.foldableArray)(function (v) {
            if (v instanceof Test_Spec_Tree.Node && v.value0 instanceof Data_Either.Left) {
                return Control_Bind.bind(Control_Monad_State_Trans.bindStateT((dictMonadWriter.MonadTell0()).Monad0()))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT((dictMonadWriter.MonadTell0()).Monad0())))(function (v1) {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT((dictMonadWriter.MonadTell0()).Monad0()))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT((dictMonadWriter.MonadTell0()).Monad0()))(function (v2) {
                        var $39 = {};
                        for (var $40 in v2) {
                            if ({}.hasOwnProperty.call(v2, $40)) {
                                $39[$40] = v2[$40];
                            };
                        };
                        $39.crumbs = new Data_List_Types.Cons(v.value0.value0, v1.crumbs);
                        return $39;
                    }))(function () {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT((dictMonadWriter.MonadTell0()).Monad0()))(go(v.value1))(function () {
                            return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT((dictMonadWriter.MonadTell0()).Monad0()))(function (v2) {
                                var $42 = {};
                                for (var $43 in v2) {
                                    if ({}.hasOwnProperty.call(v2, $43)) {
                                        $42[$43] = v2[$43];
                                    };
                                };
                                $42.crumbs = v1.crumbs;
                                return $42;
                            });
                        });
                    });
                });
            };
            if (v instanceof Test_Spec_Tree.Node && v.value0 instanceof Data_Either.Right) {
                return Data_Void.absurd(v.value0.value0);
            };
            if (v instanceof Test_Spec_Tree.Leaf && (v.value1 instanceof Data_Maybe.Just && v.value1.value0 instanceof Test_Spec_Result.Failure)) {
                return Control_Bind.bind(Control_Monad_State_Trans.bindStateT((dictMonadWriter.MonadTell0()).Monad0()))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT((dictMonadWriter.MonadTell0()).Monad0()))(function (s) {
                    var $52 = {};
                    for (var $53 in s) {
                        if ({}.hasOwnProperty.call(s, $53)) {
                            $52[$53] = s[$53];
                        };
                    };
                    $52.i = s.i + 1 | 0;
                    return $52;
                }))(function (v1) {
                    var label = Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(" ")(Data_List.reverse(new Data_List_Types.Cons(v.value0, v1.crumbs)));
                    return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT((dictMonadWriter.MonadTell0()).Monad0()))(Test_Spec_Console.tellLn(Control_Monad_State_Trans.monadWriterStateT(dictMonadWriter))(Data_Show.show(Data_Show.showInt)(v1.i) + (") " + label)))(function () {
                        return Test_Spec_Console.tellLn(Control_Monad_State_Trans.monadWriterStateT(dictMonadWriter))(Test_Spec_Style.styled(Test_Spec_Style.red)(Test_Spec_Style.indent(2) + Effect_Exception.message(v.value1.value0.value0)));
                    });
                });
            };
            if (v instanceof Test_Spec_Tree.Leaf) {
                return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT((dictMonadWriter.MonadTell0()).Monad0()))(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Test.Spec.Reporter.Base (line 63, column 20 - line 75, column 30): " + [ v.constructor.name ]);
        });
        return Control_Monad_State_Trans.evalStateT(((((dictMonadWriter.MonadTell0()).Monad0()).Bind1()).Apply0()).Functor0())(go(xs$prime))({
            i: 0,
            crumbs: Data_List_Types.Nil.value
        });
    };
};
var defaultUpdate = function (opts) {
    return function (e) {
        var modifyRunningItems = function (f) {
            var runningItemIsFinished = function (v) {
                if (v instanceof RunningPending) {
                    return true;
                };
                if (v instanceof RunningTest) {
                    return Data_Maybe.isJust(v.value1);
                };
                if (v instanceof RunningSuite) {
                    return v.value1;
                };
                throw new Error("Failed pattern match at Test.Spec.Reporter.Base (line 162, column 33 - line 165, column 46): " + [ v.constructor.name ]);
            };
            var asArray = Control_Category.identity(Control_Category.categoryFn);
            return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity))))(function (s) {
                var nextRunningItems = f(opts.getRunningItems(s));
                var allFinished = Data_Foldable.all(Data_Map_Internal.foldableMap)(Data_HeytingAlgebra.heytingAlgebraBoolean)(runningItemIsFinished)(nextRunningItems);
                return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(opts.putRunningItems((function () {
                    if (allFinished) {
                        return Data_Map_Internal.empty;
                    };
                    return nextRunningItems;
                })())(s)))(function () {
                    return Control_Applicative.when(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(allFinished)(Data_Foldable.for_(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Data_Foldable.foldableArray)(asArray(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(nextRunningItems)))(Data_Tuple.uncurry(opts.printFinishedItem)));
                });
            });
        };
        var baseUpdate = function (v) {
            if (v instanceof Test_Spec_Runner_Event.Suite && v.value0 instanceof Test_Spec_Runner_Event.Sequential) {
                return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Data_Unit.unit);
            };
            if (v instanceof Test_Spec_Runner_Event.Suite && v.value0 instanceof Test_Spec_Runner_Event.Parallel) {
                return modifyRunningItems(Data_Map_Internal.insert(Data_Ord.ordArray(Test_Spec_Tree.pathItemOrd))(v.value1)(new RunningSuite(v.value2, false)));
            };
            if (v instanceof Test_Spec_Runner_Event.SuiteEnd) {
                return modifyRunningItems(Data_Function.flip(Data_Map_Internal.update(Data_Ord.ordArray(Test_Spec_Tree.pathItemOrd)))(v.value0)(function (v1) {
                    if (v1 instanceof RunningSuite) {
                        return Data_Maybe.Just.create(new RunningSuite(v1.value0, true));
                    };
                    return Data_Maybe.Nothing.value;
                }));
            };
            if (v instanceof Test_Spec_Runner_Event.Test && v.value0 instanceof Test_Spec_Runner_Event.Sequential) {
                return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Data_Unit.unit);
            };
            if (v instanceof Test_Spec_Runner_Event.Test && v.value0 instanceof Test_Spec_Runner_Event.Parallel) {
                return modifyRunningItems(Data_Map_Internal.insert(Data_Ord.ordArray(Test_Spec_Tree.pathItemOrd))(v.value1)(new RunningTest(v.value2, Data_Maybe.Nothing.value)));
            };
            if (v instanceof Test_Spec_Runner_Event.TestEnd) {
                return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Control_Monad_State_Class.gets(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(opts.getRunningItems))(function (runningItem) {
                    var v1 = Data_Map_Internal.lookup(Data_Ord.ordArray(Test_Spec_Tree.pathItemOrd))(v.value0)(runningItem);
                    if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof RunningTest) {
                        return modifyRunningItems(Data_Map_Internal.insert(Data_Ord.ordArray(Test_Spec_Tree.pathItemOrd))(v.value0)(RunningTest.create(v1.value0.value0)(new Data_Maybe.Just(v.value2))));
                    };
                    return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Data_Unit.unit);
                });
            };
            if (v instanceof Test_Spec_Runner_Event.Pending) {
                return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Control_Monad_State_Class.gets(Control_Monad_State_Trans.monadStateStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(opts.getRunningItems))(function (runningItem) {
                    return Control_Applicative.unless(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Data_Map_Internal.isEmpty(runningItem))(modifyRunningItems(Data_Map_Internal.insert(Data_Ord.ordArray(Test_Spec_Tree.pathItemOrd))(v.value0)(new RunningPending(v.value1))));
                });
            };
            if (v instanceof Test_Spec_Runner_Event.End) {
                return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Data_Unit.unit);
            };
            if (v instanceof Test_Spec_Runner_Event.Start) {
                return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(Data_Unit.unit);
            };
            throw new Error("Failed pattern match at Test.Spec.Reporter.Base (line 125, column 18 - line 150, column 33): " + [ v.constructor.name ]);
        };
        return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Control_Monad_Writer_Trans.monadWriterT(Data_Monoid.monoidString)(Data_Identity.monadIdentity)))(baseUpdate(e))(function () {
            return opts.update(e);
        });
    };
};
var defaultSummary = function (dictMonadWriter) {
    return function (xs) {
        return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())((function () {
            var v = Test_Spec_Summary.summarize(xs);
            return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Applicative.when(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(v.passed > 0)(Test_Spec_Console.tellLn(dictMonadWriter)(Test_Spec_Style.styled(Test_Spec_Style.green)(Data_Show.show(Data_Show.showInt)(v.passed) + " passing"))))(function () {
                return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Control_Applicative.when(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(v.pending > 0)(Test_Spec_Console.tellLn(dictMonadWriter)(Test_Spec_Style.styled(Test_Spec_Style.cyan)(Data_Show.show(Data_Show.showInt)(v.pending) + " pending"))))(function () {
                    return Control_Applicative.when(((dictMonadWriter.MonadTell0()).Monad0()).Applicative0())(v.failed > 0)(Test_Spec_Console.tellLn(dictMonadWriter)(Test_Spec_Style.styled(Test_Spec_Style.red)(Data_Show.show(Data_Show.showInt)(v.failed) + " failed")));
                });
            });
        })())(function () {
            return Control_Bind.discard(Control_Bind.discardUnit)(((dictMonadWriter.MonadTell0()).Monad0()).Bind1())(Test_Spec_Console.tellLn(dictMonadWriter)(""))(function () {
                return printFailures(dictMonadWriter)(xs);
            });
        });
    };
};
var defaultReporter = function (initialState) {
    return function (onEvent) {
        return scanWithStateM(Effect_Aff.monadAff)(function (s) {
            return function (e) {
                var v = Control_Monad_Writer.runWriter(Control_Monad_State_Trans.execStateT(Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity))(onEvent(e))(s));
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.voidLeft(Effect.functorEffect)(Test_Spec_Console.write(v.value1))(v.value0));
            };
        })(Control_Applicative.pure(Effect_Aff.applicativeAff)(initialState));
    };
};
module.exports = {
    defaultSummary: defaultSummary,
    defaultReporter: defaultReporter,
    defaultUpdate: defaultUpdate,
    RunningTest: RunningTest,
    RunningPending: RunningPending,
    RunningSuite: RunningSuite,
    runningItemGeneric: runningItemGeneric,
    runningItemShow: runningItemShow
};
