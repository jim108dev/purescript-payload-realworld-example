// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Payload_Internal_UrlParsing = require("../Payload.Internal.UrlParsing/index.js");
var Payload_ResponseTypes = require("../Payload.ResponseTypes/index.js");
var Payload_Server_Handleable = require("../Payload.Server.Handleable/index.js");
var Payload_Server_Internal_GuardParsing = require("../Payload.Server.Internal.GuardParsing/index.js");
var Payload_Server_Internal_ServerResponse = require("../Payload.Server.Internal.ServerResponse/index.js");
var Payload_Server_Internal_Trie = require("../Payload.Server.Internal.Trie/index.js");
var Payload_Server_Response = require("../Payload.Server.Response/index.js");
var Payload_Spec = require("../Payload.Spec/index.js");
var Record = require("../Record/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var Success = (function () {
    function Success() {

    };
    Success.value = new Success();
    return Success;
})();
var Failure = (function () {
    function Failure() {

    };
    Failure.value = new Failure();
    return Failure;
})();
var Forward = (function () {
    function Forward(value0) {
        this.value0 = value0;
    };
    Forward.create = function (value0) {
        return new Forward(value0);
    };
    return Forward;
})();
var RoutableList = function (mkRouterList) {
    this.mkRouterList = mkRouterList;
};
var Routable = function (mkRouter) {
    this.mkRouter = mkRouter;
};
var routableListNil = new RoutableList(function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                return function (v4) {
                    return function (v5) {
                        return function (v6) {
                            return function (trie) {
                                return new Data_Either.Right(trie);
                            };
                        };
                    };
                };
            };
        };
    };
});
var orElse = function (v) {
    return function (v1) {
        if (v1 instanceof Data_Either.Right) {
            return new Data_Either.Right(v1.value0);
        };
        if (v1 instanceof Data_Either.Left) {
            return new Data_Either.Right(v(v1.value0));
        };
        throw new Error("Failed pattern match at Payload.Server.Routable (line 277, column 1 - line 277, column 61): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var mkRouterList = function (dict) {
    return dict.mkRouterList;
};
var routableListConsRoutes = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictIsSymbol2) {
            return function (dictDecodeUrl) {
                return function (dictUnion) {
                    return function (dictNub) {
                        return function (dictTypeEquals) {
                            return function (dictUnion1) {
                                return function (dictAppend) {
                                    return function (dictCons) {
                                        return function (dictRowToList) {
                                            return function (dictAppend1) {
                                                return function (dictRoutableList) {
                                                    return function (dictRoutableList1) {
                                                        return new RoutableList(function (v) {
                                                            return function (basePath) {
                                                                return function (baseParams) {
                                                                    return function (baseGuards) {
                                                                        return function (guardsSpec) {
                                                                            return function (handlers) {
                                                                                return function (guards) {
                                                                                    return function (trie) {
                                                                                        var childHandlers = Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(handlers);
                                                                                        var trieWithChildRoutes = mkRouterList(dictRoutableList)(Type_Data_RowList.RLProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(Payload_Spec.Guards.value)(guardsSpec)(childHandlers)(guards)(trie);
                                                                                        if (trieWithChildRoutes instanceof Data_Either.Right) {
                                                                                            return mkRouterList(dictRoutableList1)(Type_Data_RowList.RLProxy.value)(basePath)(baseParams)(baseGuards)(guardsSpec)(handlers)(guards)(trieWithChildRoutes.value0);
                                                                                        };
                                                                                        if (trieWithChildRoutes instanceof Data_Either.Left) {
                                                                                            return Data_Either.Left.create("Could not insert child routes for path '" + (Data_Symbol.reflectSymbol(dictIsSymbol2)(Data_Symbol.SProxy.value) + ("': " + trieWithChildRoutes.value0)));
                                                                                        };
                                                                                        throw new Error("Failed pattern match at Payload.Server.Routable (line 243, column 5 - line 254, column 31): " + [ trieWithChildRoutes.constructor.name ]);
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        });
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var routableRootRecord = function (dictUnion) {
    return function (dictNub) {
        return function (dictTypeEquals) {
            return function (dictRowToList) {
                return function (dictRoutableList) {
                    return new Routable(function (v) {
                        return function (v1) {
                            return mkRouterList(dictRoutableList)(Type_Data_RowList.RLProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(Payload_Spec.Guards.value)(Type_Proxy["Proxy"].value)(v1.handlers)(v1.guards)(Payload_Server_Internal_Trie.empty);
                        };
                    });
                };
            };
        };
    };
};
var mkRouter = function (dict) {
    return dict.mkRouter;
};
var insertRoute = function (route) {
    return function (handler) {
        return function (trie) {
            var wrapError = function (e) {
                return "Could not insert route for path '" + (Data_Show.show(Data_List_Types.showList(Payload_Internal_UrlParsing.showSegment))(route) + "' into routing trie");
            };
            var handlerEntry = {
                route: route,
                handler: handler
            };
            return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(wrapError)(Payload_Server_Internal_Trie.insert({
                route: route,
                handler: handler
            })(route)(trie));
        };
    };
};
var routableListCons = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictIsSymbol2) {
            return function (dictUnion) {
                return function (dictNub) {
                    return function (dictHandleable) {
                        return function (dictRoutableList) {
                            return function (dictCons) {
                                return function (dictAppend) {
                                    return function (dictParseUrl) {
                                        return function (dictToSegments) {
                                            return new RoutableList(function (v) {
                                                return function (basePath) {
                                                    return function (baseParams) {
                                                        return function (baseGuards) {
                                                            return function (guardsSpec) {
                                                                return function (handlers) {
                                                                    return function (guards) {
                                                                        return function (trie) {
                                                                            var routePath = Payload_Internal_UrlParsing.asSegments()(dictToSegments)(Data_Symbol.SProxy.value);
                                                                            var payloadHandler = Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(handlers);
                                                                            var methodHandler = Payload_Server_Handleable.handle(dictHandleable)(Data_Symbol.SProxy.value)(baseParams)(baseGuards)(Payload_Server_Internal_GuardParsing.GuardTypes.value)(Payload_Spec.Route.value)(payloadHandler)(guards);
                                                                            var method = Data_Symbol.reflectSymbol(dictIsSymbol2)(Data_Symbol.SProxy.value);
                                                                            var executeHandler = function (res) {
                                                                                return function (mHandler) {
                                                                                    return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Control_Monad_Except_Trans.runExceptT(mHandler)))(function (result) {
                                                                                        if (result instanceof Data_Either.Right && result.value0 instanceof Data_Either.Right) {
                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Payload_Server_Internal_ServerResponse.sendResponse(res)(new Data_Either.Right(result.value0.value0))))(function () {
                                                                                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Success.value);
                                                                                            });
                                                                                        };
                                                                                        if (result instanceof Data_Either.Right && (result.value0 instanceof Data_Either.Left && result.value0.value0 instanceof Payload_ResponseTypes["Error"])) {
                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Payload_Server_Internal_ServerResponse.sendResponse(res)(new Data_Either.Left(result.value0.value0.value0))))(function () {
                                                                                                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Failure.value);
                                                                                            });
                                                                                        };
                                                                                        if (result instanceof Data_Either.Right && (result.value0 instanceof Data_Either.Left && result.value0.value0 instanceof Payload_ResponseTypes.Forward)) {
                                                                                            return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Forward(result.value0.value0.value0));
                                                                                        };
                                                                                        if (result instanceof Data_Either.Left) {
                                                                                            return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.errorShow(Effect_Exception.showError)(result.value0)))(function () {
                                                                                                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Payload_Server_Internal_ServerResponse.sendResponse(res)(new Data_Either.Left(Payload_Server_Response.internalError(new Payload_ResponseTypes.StringBody("Internal error"))))))(function () {
                                                                                                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Failure.value);
                                                                                                });
                                                                                            });
                                                                                        };
                                                                                        throw new Error("Failed pattern match at Payload.Server.Routable (line 180, column 9 - line 191, column 25): " + [ result.constructor.name ]);
                                                                                    });
                                                                                };
                                                                            };
                                                                            var handler = function (url) {
                                                                                return function (req) {
                                                                                    return function (res) {
                                                                                        return executeHandler(res)(methodHandler(url)(req)(res));
                                                                                    };
                                                                                };
                                                                            };
                                                                            var headHandler = function (url) {
                                                                                return function (req) {
                                                                                    return function (res) {
                                                                                        return executeHandler(res)(Data_Functor.mapFlipped(Control_Monad_Except_Trans.functorExceptT(Effect_Aff.functorAff))(methodHandler(url)(req)(res))(Payload_Server_Response.setBody(Payload_ResponseTypes.EmptyBody.value)));
                                                                                    };
                                                                                };
                                                                            };
                                                                            return Control_Bind.bind(Data_Either.bindEither)(insertRoute(new Data_List_Types.Cons(new Payload_Internal_UrlParsing.Lit(method), routePath))(handler)(trie))(function (newTrie) {
                                                                                return Control_Bind.bind(Data_Either.bindEither)(mkRouterList(dictRoutableList)(Type_Data_RowList.RLProxy.value)(basePath)(baseParams)(baseGuards)(guardsSpec)(handlers)(guards)(newTrie))(function (trieWithRest) {
                                                                                    if (method === "GET") {
                                                                                        return orElse(Data_Function["const"](trieWithRest))(insertRoute(new Data_List_Types.Cons(new Payload_Internal_UrlParsing.Lit("HEAD"), routePath))(headHandler)(trieWithRest));
                                                                                    };
                                                                                    return Control_Applicative.pure(Data_Either.applicativeEither)(trieWithRest);
                                                                                });
                                                                            });
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            });
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    Routable: Routable,
    mkRouter: mkRouter,
    RoutableList: RoutableList,
    mkRouterList: mkRouterList,
    Success: Success,
    Failure: Failure,
    Forward: Forward,
    routableRootRecord: routableRootRecord,
    routableListNil: routableListNil,
    routableListCons: routableListCons,
    routableListConsRoutes: routableListConsRoutes
};
