// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Show = require("../Data.Show/index.js");
var Node_Buffer_Immutable = require("../Node.Buffer.Immutable/index.js");
var Node_Buffer_Types = require("../Node.Buffer.Types/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var writeString = function (dictMonad) {
    return function ($20) {
        return $foreign.writeStringInternal(Node_Encoding.encodingToNode($20));
    };
};
var write = function (dictMonad) {
    var $21 = Data_Show.show(Node_Buffer_Types.showBufferValueType);
    return function ($22) {
        return $foreign.writeInternal($21($22));
    };
};
var unsafeThaw = function (dictMonad) {
    var $23 = Control_Applicative.pure(dictMonad.Applicative0());
    return function ($24) {
        return $23($24);
    };
};
var usingToImmutable = function (dictMonad) {
    return function (f) {
        return function (x) {
            return unsafeThaw(dictMonad)(f(x));
        };
    };
};
var unsafeFreeze = function (dictMonad) {
    var $25 = Control_Applicative.pure(dictMonad.Applicative0());
    return function ($26) {
        return $25($26);
    };
};
var usingFromImmutable = function (dictMonad) {
    return function (f) {
        return function (buf) {
            return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(f)(unsafeFreeze(dictMonad)(buf));
        };
    };
};
var toString = function (dictMonad) {
    return function (m) {
        return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toString(m));
    };
};
var toArrayBuffer = function (dictMonad) {
    return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArrayBuffer);
};
var toArray = function (dictMonad) {
    return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArray);
};
var slice = Node_Buffer_Immutable.slice;
var size = function (dictMonad) {
    return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.size);
};
var readString = function (dictMonad) {
    return function (m) {
        return function (o) {
            return function (o$prime) {
                return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.readString(m)(o)(o$prime));
            };
        };
    };
};
var read = function (dictMonad) {
    return function (t) {
        return function (o) {
            return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.read(t)(o));
        };
    };
};
var getAtOffset = function (dictMonad) {
    return function (o) {
        return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.getAtOffset(o));
    };
};
var fromString = function (dictMonad) {
    return function (s) {
        return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromString(s));
    };
};
var fromArrayBuffer = function (dictMonad) {
    return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArrayBuffer);
};
var fromArray = function (dictMonad) {
    return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArray);
};
var create = function (dictMonad) {
    return usingToImmutable(dictMonad)(Node_Buffer_Immutable.create);
};
var concat$prime = function (dictMonad) {
    return function (arrs) {
        return function (n) {
            return function (v) {
                return Node_Buffer_Immutable["concat'"](arrs)(n);
            };
        };
    };
};
var concat = function (arrs) {
    return function (v) {
        return Node_Buffer_Immutable.concat(arrs);
    };
};
module.exports = {
    unsafeFreeze: unsafeFreeze,
    unsafeThaw: unsafeThaw,
    usingFromImmutable: usingFromImmutable,
    usingToImmutable: usingToImmutable,
    create: create,
    fromArray: fromArray,
    fromString: fromString,
    fromArrayBuffer: fromArrayBuffer,
    toArrayBuffer: toArrayBuffer,
    read: read,
    readString: readString,
    toString: toString,
    write: write,
    writeString: writeString,
    toArray: toArray,
    getAtOffset: getAtOffset,
    slice: slice,
    size: size,
    concat: concat,
    "concat'": concat$prime,
    copyAll: $foreign.copyAll,
    setAtOffset: $foreign.setAtOffset,
    copy: $foreign.copy,
    fill: $foreign.fill
};
