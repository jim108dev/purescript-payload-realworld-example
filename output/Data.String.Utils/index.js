// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Regex = require("../Data.String.Regex/index.js");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var NFC = (function () {
    function NFC() {

    };
    NFC.value = new NFC();
    return NFC;
})();
var NFD = (function () {
    function NFD() {

    };
    NFD.value = new NFD();
    return NFD;
})();
var NFKC = (function () {
    function NFKC() {

    };
    NFKC.value = new NFKC();
    return NFKC;
})();
var NFKD = (function () {
    function NFKD() {

    };
    NFKD.value = new NFKD();
    return NFKD;
})();
var words = function (s) {
    return $foreign.wordsImpl(s);
};
var unsafeRepeat = function (n) {
    return function (s) {
        return $foreign.unsafeRepeatImpl(n, s);
    };
};
var unsafeCodePointAt$prime = function (n) {
    return function (s) {
        return $foreign.unsafeCodePointAtPrimeImpl(n, s);
    };
};
var unsafeCodePointAt = function (n) {
    return function (s) {
        return $foreign.unsafeCodePointAtImpl(n, s);
    };
};
var trimStart = function (s) {
    return s.trimStart(Data_Unit.unit);
};
var trimEnd = function (s) {
    return s.trimEnd(Data_Unit.unit);
};
var toCharArray = function (s) {
    return $foreign.toCharArrayImpl(s);
};
var stripDiacritics = function (s) {
    return $foreign.stripDiacriticsImpl(s);
};
var stripChars = function (chars) {
    return function (s) {
        return $foreign.stripCharsImpl(chars, s);
    };
};
var startsWith$prime = function (searchString) {
    return function (position) {
        return function (s) {
            return $foreign.startsWithPrimeImpl(searchString, position, s);
        };
    };
};
var startsWith = function (searchString) {
    return function (s) {
        return $foreign.startsWithImpl(searchString, s);
    };
};
var showNormalizationForm = new Data_Show.Show(function (v) {
    if (v instanceof NFC) {
        return "NFC";
    };
    if (v instanceof NFD) {
        return "NFD";
    };
    if (v instanceof NFKC) {
        return "NFKC";
    };
    if (v instanceof NFKD) {
        return "NFKD";
    };
    throw new Error("Failed pattern match at Data.String.Utils (line 265, column 1 - line 269, column 21): " + [ v.constructor.name ]);
});
var repeat = function (n) {
    return function (s) {
        return $foreign.repeatImpl(Data_Maybe.Just.create, Data_Maybe.Nothing.value, n, s);
    };
};
var padStart$prime = function (n) {
    return function (s) {
        return $foreign.padStartPrimeImpl(n, s);
    };
};
var padStart = function (n) {
    return function (s) {
        var numberOfCodeUnits = Data_String_CodeUnits.length(s);
        var numberOfCodePoints = Data_String_CodePoints.length(s);
        return padStart$prime((n + numberOfCodeUnits | 0) - numberOfCodePoints | 0)(s);
    };
};
var padEnd$prime = function (n) {
    return function (s) {
        return $foreign.padEndPrimeImpl(n, s);
    };
};
var padEnd = function (n) {
    return function (s) {
        var numberOfCodeUnits = Data_String_CodeUnits.length(s);
        var numberOfCodePoints = Data_String_CodePoints.length(s);
        return padEnd$prime((n + numberOfCodeUnits | 0) - numberOfCodePoints | 0)(s);
    };
};
var normalize$prime = function (nf) {
    return function (s) {
        return $foreign.normalizePrimeImpl(Data_Show.show(showNormalizationForm)(nf), s);
    };
};
var normalize = function (s) {
    return $foreign.normalizeImpl(s);
};
var lines = function (s) {
    return $foreign.linesImpl(s);
};
var stripMarginWith = function (delimiter) {
    var go = function (line) {
        var trimmed = trimStart(line);
        var $6 = startsWith(delimiter)(trimmed);
        if ($6) {
            return Data_String_CodePoints.drop(Data_String_CodePoints.length(delimiter))(trimmed);
        };
        return line;
    };
    var $7 = Data_String_Common.joinWith("\x0a");
    var $8 = Data_Functor.map(Data_Functor.functorArray)(go);
    return function ($9) {
        return $7($8(lines(Data_String_Common.trim($9))));
    };
};
var stripMargin = stripMarginWith("|");
var length = function (dictWarn) {
    return function (s) {
        return $foreign.lengthImpl(s);
    };
};
var includes$prime = function (needle) {
    return function (position) {
        return function (haystack) {
            return $foreign.includesPrimeImpl(needle, position, haystack);
        };
    };
};
var includes = function (searchString) {
    return function (s) {
        return $foreign.includesImpl(searchString, s);
    };
};
var fromCharArray = function (arr) {
    return $foreign.fromCharArrayImpl(arr);
};
var mapChars = function (f) {
    var $10 = Data_Functor.map(Data_Functor.functorArray)(f);
    return function ($11) {
        return fromCharArray($10(toCharArray($11)));
    };
};
var filter = function (p) {
    var $12 = Data_Array.filter(p);
    return function ($13) {
        return fromCharArray($12(toCharArray($13)));
    };
};
var escapeRegex = function (s) {
    return $foreign.escapeRegexImpl(s);
};
var replaceAll = function (dictWarn) {
    var mkRegex = function (str) {
        return Data_Either.fromRight()(Data_String_Regex.regex(escapeRegex(str))(Data_String_Regex_Flags.global));
    };
    return function ($14) {
        return Data_String_Regex.replace(mkRegex($14));
    };
};
var endsWith$prime = function (searchString) {
    return function (position) {
        return function (s) {
            return $foreign.endsWithPrimeImpl(searchString, position, s);
        };
    };
};
var endsWith = function (searchString) {
    return function (s) {
        return $foreign.endsWithImpl(searchString, s);
    };
};
var codePointAt$prime = function (n) {
    return function (s) {
        return $foreign.codePointAtPrimeImpl(Data_Maybe.Just.create, Data_Maybe.Nothing.value, n, s);
    };
};
var codePointAt = function (dictWarn) {
    return function (n) {
        return function (s) {
            return $foreign.codePointAtImpl(Data_Maybe.Just.create, Data_Maybe.Nothing.value, n, s);
        };
    };
};
var charAt = function (n) {
    return function (str) {
        return Data_Array.index(toCharArray(str))(n);
    };
};
module.exports = {
    NFC: NFC,
    NFD: NFD,
    NFKC: NFKC,
    NFKD: NFKD,
    charAt: charAt,
    codePointAt: codePointAt,
    "codePointAt'": codePointAt$prime,
    endsWith: endsWith,
    "endsWith'": endsWith$prime,
    escapeRegex: escapeRegex,
    filter: filter,
    fromCharArray: fromCharArray,
    includes: includes,
    "includes'": includes$prime,
    length: length,
    lines: lines,
    mapChars: mapChars,
    normalize: normalize,
    "normalize'": normalize$prime,
    padEnd: padEnd,
    "padEnd'": padEnd$prime,
    padStart: padStart,
    "padStart'": padStart$prime,
    repeat: repeat,
    replaceAll: replaceAll,
    startsWith: startsWith,
    "startsWith'": startsWith$prime,
    stripChars: stripChars,
    stripDiacritics: stripDiacritics,
    stripMargin: stripMargin,
    stripMarginWith: stripMarginWith,
    toCharArray: toCharArray,
    trimEnd: trimEnd,
    trimStart: trimStart,
    unsafeCodePointAt: unsafeCodePointAt,
    "unsafeCodePointAt'": unsafeCodePointAt$prime,
    unsafeRepeat: unsafeRepeat,
    words: words,
    showNormalizationForm: showNormalizationForm
};
