// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Error = require("../Data.Argonaut.Decode.Error/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Array_NonEmpty_Internal = require("../Data.Array.NonEmpty.Internal/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_TraversableWithIndex = require("../Data.TraversableWithIndex/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var getFieldOptional$prime = function (decoder) {
    return function (obj) {
        return function (str) {
            var decode = function (json) {
                var $5 = Data_Argonaut_Core.isNull(json);
                if ($5) {
                    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
                };
                return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str))(decoder(json)));
            };
            return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(str)(obj));
        };
    };
};
var getFieldOptional = function (decoder) {
    return function (obj) {
        return function (str) {
            var decode = (function () {
                var $14 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                return function ($15) {
                    return $14(decoder($15));
                };
            })();
            return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))((function () {
                var $16 = Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create);
                return function ($17) {
                    return $16(decode($17));
                };
            })())(Foreign_Object.lookup(str)(obj));
        };
    };
};
var getField = function (decoder) {
    return function (obj) {
        return function (str) {
            return Data_Maybe.maybe(Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey(str, Data_Argonaut_Decode_Error.MissingValue.value)))((function () {
                var $18 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtKey.create(str));
                return function ($19) {
                    return $18(decoder($19));
                };
            })())(Foreign_Object.lookup(str)(obj));
        };
    };
};
var decodeVoid = function (v) {
    return Data_Either.Left.create(Data_Argonaut_Decode_Error.UnexpectedValue.create(Data_Argonaut_Core.fromString("Value cannot be Void")));
};
var decodeString = Data_Argonaut_Core.caseJsonString(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("String")))(Data_Either.Right.create);
var decodeNumber = Data_Argonaut_Core.caseJsonNumber(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Number")))(Data_Either.Right.create);
var decodeNull = Data_Argonaut_Core.caseJsonNull(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("null")))(Data_Function["const"](new Data_Either.Right(Data_Unit.unit)));
var decodeMaybe = function (decoder) {
    return function (json) {
        if (Data_Argonaut_Core.isNull(json)) {
            return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
        };
        if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decoder(json));
        };
        throw new Error("Failed pattern match at Data.Argonaut.Decode.Decoders (line 35, column 1 - line 39, column 38): " + [ decoder.constructor.name, json.constructor.name ]);
    };
};
var decodeJObject = (function () {
    var $20 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Object"));
    return function ($21) {
        return $20(Data_Argonaut_Core.toObject($21));
    };
})();
var decodeJArray = (function () {
    var $22 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Array"));
    return function ($23) {
        return $22(Data_Argonaut_Core.toArray($23));
    };
})();
var decodeList = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $24 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("List"));
        var $25 = Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Either.applicativeEither)(decoder);
        return function ($26) {
            return $24($25($26));
        };
    })())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray));
};
var decodeSet = function (dictOrd) {
    return function (decoder) {
        var $27 = Data_Functor.map(Data_Either.functorEither)(Data_Set.fromFoldable(Data_List_Types.foldableList)(dictOrd));
        var $28 = decodeList(decoder);
        return function ($29) {
            return $27($28($29));
        };
    };
};
var decodeNonEmptyArray = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $30 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmptyArray"));
        var $31 = Data_Traversable.traverse(Data_Array_NonEmpty_Internal.traversableNonEmptyArray)(Data_Either.applicativeEither)(decoder);
        return function ($32) {
            return $30($31($32));
        };
    })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $33 = Data_Functor.map(Data_Either.functorEither)(function (x) {
            return Data_Array_NonEmpty["cons'"](x.head)(x.tail);
        });
        var $34 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmptyArray"));
        return function ($35) {
            return $33($34(Data_Array.uncons($35)));
        };
    })())(decodeJArray));
};
var decodeNonEmptyList = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $36 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmptyList"));
        var $37 = Data_Traversable.traverse(Data_List_Types.traversableNonEmptyList)(Data_Either.applicativeEither)(decoder);
        return function ($38) {
            return $36($37($38));
        };
    })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $39 = Data_Functor.map(Data_Either.functorEither)(function (x) {
            return Data_List_NonEmpty["cons'"](x.head)(x.tail);
        });
        var $40 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmptyList"));
        return function ($41) {
            return $39($40(Data_List.uncons($41)));
        };
    })())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray)));
};
var decodeNonEmpty_Array = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $42 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmpty Array"));
        var $43 = Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(Data_Traversable.traversableArray))(Data_Either.applicativeEither)(decoder);
        return function ($44) {
            return $42($43($44));
        };
    })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $45 = Data_Functor.map(Data_Either.functorEither)(function (x) {
            return new Data_NonEmpty.NonEmpty(x.head, x.tail);
        });
        var $46 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmpty Array"));
        return function ($47) {
            return $45($46(Data_Array.uncons($47)));
        };
    })())(decodeJArray));
};
var decodeNonEmpty_List = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $48 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("NonEmpty List"));
        var $49 = Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(Data_List_Types.traversableList))(Data_Either.applicativeEither)(decoder);
        return function ($50) {
            return $48($49($50));
        };
    })())(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $51 = Data_Functor.map(Data_Either.functorEither)(function (x) {
            return new Data_NonEmpty.NonEmpty(x.head, x.tail);
        });
        var $52 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("NonEmpty List"));
        return function ($53) {
            return $51($52(Data_List.uncons($53)));
        };
    })())(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray)));
};
var decodeInt = Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
    var $54 = Data_Either.note(new Data_Argonaut_Decode_Error.TypeMismatch("Integer"));
    return function ($55) {
        return $54(Data_Int.fromNumber($55));
    };
})())(decodeNumber);
var decodeIdentity = function (decoder) {
    return function (json) {
        return Data_Functor.map(Data_Either.functorEither)(Data_Identity.Identity)(decoder(json));
    };
};
var decodeForeignObject = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $56 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("ForeignObject"));
        var $57 = Data_Traversable.traverse(Foreign_Object.traversableObject)(Data_Either.applicativeEither)(decoder);
        return function ($58) {
            return $56($57($58));
        };
    })())(decodeJObject);
};
var decodeEither = function (decoderA) {
    return function (decoderB) {
        return function (json) {
            return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Either"))(Control_Bind.bind(Data_Either.bindEither)(decodeJObject(json))(function (obj) {
                return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.AtKey("tag", Data_Argonaut_Decode_Error.MissingValue.value))(Foreign_Object.lookup("tag")(obj)))(function (tag) {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note(new Data_Argonaut_Decode_Error.AtKey("value", Data_Argonaut_Decode_Error.MissingValue.value))(Foreign_Object.lookup("value")(obj)))(function (val) {
                        var v = Data_Argonaut_Core.toString(tag);
                        if (v instanceof Data_Maybe.Just && v.value0 === "Right") {
                            return Data_Functor.map(Data_Either.functorEither)(Data_Either.Right.create)(decoderB(val));
                        };
                        if (v instanceof Data_Maybe.Just && v.value0 === "Left") {
                            return Data_Functor.map(Data_Either.functorEither)(Data_Either.Left.create)(decoderA(val));
                        };
                        return Data_Either.Left.create(new Data_Argonaut_Decode_Error.AtKey("tag", new Data_Argonaut_Decode_Error.UnexpectedValue(tag)));
                    });
                });
            }));
        };
    };
};
var decodeCodePoint = function (json) {
    return Control_Bind.bindFlipped(Data_Either.bindEither)(Data_Either.note(Data_Argonaut_Decode_Error.Named.create("CodePoint")(new Data_Argonaut_Decode_Error.UnexpectedValue(json))))(Data_Functor.map(Data_Either.functorEither)(Data_String_CodePoints.codePointAt(0))(decodeString(json)));
};
var decodeBoolean = Data_Argonaut_Core.caseJsonBoolean(Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Boolean")))(Data_Either.Right.create);
var decodeArray = function (decoder) {
    return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)((function () {
        var $59 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.Named.create("Array"));
        var $60 = Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(function (i) {
            var $62 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Argonaut_Decode_Error.AtIndex.create(i));
            return function ($63) {
                return $62(decoder($63));
            };
        });
        return function ($61) {
            return $59($60($61));
        };
    })())(decodeJArray);
};
var decodeTuple = function (decoderA) {
    return function (decoderB) {
        return function (json) {
            var f = function (v) {
                if (v.length === 2) {
                    return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(decoderA(v[0])))(decoderB(v[1]));
                };
                return Data_Either.Left.create(new Data_Argonaut_Decode_Error.TypeMismatch("Tuple"));
            };
            return Control_Bind.bind(Data_Either.bindEither)(decodeArray(Data_Either.Right.create)(json))(f);
        };
    };
};
var decodeMap = function (dictOrd) {
    return function (decoderA) {
        return function (decoderB) {
            var $64 = Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.fromFoldable(dictOrd)(Data_List_Types.foldableList));
            var $65 = decodeList(decodeTuple(decoderA)(decoderB));
            return function ($66) {
                return $64($65($66));
            };
        };
    };
};
module.exports = {
    decodeIdentity: decodeIdentity,
    decodeMaybe: decodeMaybe,
    decodeTuple: decodeTuple,
    decodeEither: decodeEither,
    decodeNull: decodeNull,
    decodeBoolean: decodeBoolean,
    decodeNumber: decodeNumber,
    decodeInt: decodeInt,
    decodeString: decodeString,
    decodeNonEmpty_Array: decodeNonEmpty_Array,
    decodeNonEmptyArray: decodeNonEmptyArray,
    decodeNonEmpty_List: decodeNonEmpty_List,
    decodeNonEmptyList: decodeNonEmptyList,
    decodeCodePoint: decodeCodePoint,
    decodeForeignObject: decodeForeignObject,
    decodeArray: decodeArray,
    decodeList: decodeList,
    decodeSet: decodeSet,
    decodeMap: decodeMap,
    decodeVoid: decodeVoid,
    decodeJArray: decodeJArray,
    decodeJObject: decodeJObject,
    getField: getField,
    getFieldOptional: getFieldOptional,
    "getFieldOptional'": getFieldOptional$prime
};
