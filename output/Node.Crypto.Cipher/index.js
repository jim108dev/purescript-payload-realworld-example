// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Show = require("../Data.Show/index.js");
var Node_Buffer = require("../Node.Buffer/index.js");
var Node_Buffer_Class = require("../Node.Buffer.Class/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var AES128 = (function () {
    function AES128() {

    };
    AES128.value = new AES128();
    return AES128;
})();
var AES192 = (function () {
    function AES192() {

    };
    AES192.value = new AES192();
    return AES192;
})();
var AES256 = (function () {
    function AES256() {

    };
    AES256.value = new AES256();
    return AES256;
})();
var showAlgorithm = new Data_Show.Show(function (v) {
    if (v instanceof AES128) {
        return "aes128";
    };
    if (v instanceof AES192) {
        return "aes192";
    };
    if (v instanceof AES256) {
        return "aes256";
    };
    throw new Error("Failed pattern match at Node.Crypto.Cipher (line 26, column 1 - line 29, column 25): " + [ v.constructor.name ]);
});
var createCipher = function (alg) {
    return function (password) {
        return $foreign["_createCipher"](Data_Show.show(showAlgorithm)(alg))(password);
    };
};
var cipher = function (alg) {
    return function (password) {
        return function (str) {
            return function (enc) {
                return function __do() {
                    var buf = Node_Buffer_Class.fromString(Node_Buffer.mutableBufferEffect)(str)(Node_Encoding.UTF8.value)();
                    var cip = createCipher(alg)(password)();
                    var rbuf1 = $foreign.update(cip)(buf)();
                    var rbuf2 = $foreign["final"](cip)();
                    var rbuf = Node_Buffer_Class.concat(Node_Buffer.mutableBufferEffect)([ rbuf1, rbuf2 ])();
                    return Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(enc)(rbuf)();
                };
            };
        };
    };
};
var hex = function (alg) {
    return function (password) {
        return function (str) {
            return cipher(alg)(password)(str)(Node_Encoding.Hex.value);
        };
    };
};
var base64 = function (alg) {
    return function (password) {
        return function (str) {
            return cipher(alg)(password)(str)(Node_Encoding.Base64.value);
        };
    };
};
module.exports = {
    AES128: AES128,
    AES192: AES192,
    AES256: AES256,
    hex: hex,
    base64: base64,
    createCipher: createCipher,
    showAlgorithm: showAlgorithm,
    update: $foreign.update,
    "final": $foreign["final"]
};
