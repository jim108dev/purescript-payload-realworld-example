// Generated by purs version 0.13.8
"use strict";
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Payload_Spec = require("../Payload.Spec/index.js");
var GuardTypes = (function () {
    function GuardTypes() {

    };
    GuardTypes.value = new GuardTypes();
    return GuardTypes;
})();
var ToGuardList = function (toGuardList) {
    this.toGuardList = toGuardList;
};
var ParseGuardList = {};
var ParseError = {};
var Match = {};
var Append = {};
var toGuardListNil = new ToGuardList(function (v) {
    return function (acc) {
        return acc;
    };
});
var toGuardList = function (dict) {
    return dict.toGuardList;
};
var toGuardListCons = function (dictIsSymbol) {
    return function (dictToGuardList) {
        return new ToGuardList(function (v) {
            return function (names) {
                var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                return toGuardList(dictToGuardList)(Payload_Spec.Guards.value)(new Data_List_Types.Cons(name, names));
            };
        });
    };
};
var toList = function (dictParseGuardList) {
    return function (dictToGuardList) {
        return function (v) {
            return Data_List.reverse(toGuardList(dictToGuardList)(Payload_Spec.Guards.value)(Data_List_Types.Nil.value));
        };
    };
};
var startBracket = function (dictCons) {
    return function (dictMatch) {
        return Match;
    };
};
var skipSpace = function (dictCons) {
    return function (dictMatch) {
        return Match;
    };
};
var parseError = function (dictFail) {
    return function (dictAppend) {
        return function (dictPrintArrow) {
            return ParseError;
        };
    };
};
var failSpaceWithoutComma = function (dictParseError) {
    return Match;
};
var failOpenBracketInGuardName = function (dictParseError) {
    return Match;
};
var failNoSpace = function (dictParseError) {
    return Match;
};
var failNoBracketAtStart = function (dictParseError) {
    return Match;
};
var failMatch = function (dictParseError) {
    return Match;
};
var failEndWithoutBracket = function (dictParseError) {
    return Match;
};
var failEndEmptyGuardAtComma = function (dictParseError) {
    return Match;
};
var failAnythingAfterBracket = function (dictParseError) {
    return Match;
};
var endGuardsAtBracket = Match;
var endGuardAtComma = function (dictCons) {
    return function (dictMatch) {
        return Match;
    };
};
var endEmptyGuardsAtBracket = Match;
var contGuard = function (dictCons) {
    return function (dictAppend) {
        return function (dictMatch) {
            return Match;
        };
    };
};
var bConsParse = function (dictCons) {
    return function (dictMatch) {
        return ParseGuardList;
    };
};
var appendGuards = function (dictAppend) {
    return Append;
};
var appendGuardLeftNil = Append;
var aNilParse = ParseGuardList;
module.exports = {
    toGuardList: toGuardList,
    GuardTypes: GuardTypes,
    Append: Append,
    ParseGuardList: ParseGuardList,
    Match: Match,
    ParseError: ParseError,
    toList: toList,
    ToGuardList: ToGuardList,
    appendGuardLeftNil: appendGuardLeftNil,
    appendGuards: appendGuards,
    aNilParse: aNilParse,
    bConsParse: bConsParse,
    startBracket: startBracket,
    failNoBracketAtStart: failNoBracketAtStart,
    endEmptyGuardsAtBracket: endEmptyGuardsAtBracket,
    endGuardsAtBracket: endGuardsAtBracket,
    failEndWithoutBracket: failEndWithoutBracket,
    failAnythingAfterBracket: failAnythingAfterBracket,
    failEndEmptyGuardAtComma: failEndEmptyGuardAtComma,
    endGuardAtComma: endGuardAtComma,
    skipSpace: skipSpace,
    failNoSpace: failNoSpace,
    failSpaceWithoutComma: failSpaceWithoutComma,
    failOpenBracketInGuardName: failOpenBracketInGuardName,
    contGuard: contGuard,
    failMatch: failMatch,
    parseError: parseError,
    toGuardListNil: toGuardListNil,
    toGuardListCons: toGuardListCons
};
