// Generated by purs version 0.13.8
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Payload_Client_QueryParams = require("../Payload.Client.QueryParams/index.js");
var Payload_Internal_QueryParsing = require("../Payload.Internal.QueryParsing/index.js");
var Record = require("../Record/index.js");
var EncodeQueryList = function (encodeQueryList) {
    this.encodeQueryList = encodeQueryList;
};
var EncodeQuery = function (encodeQuery) {
    this.encodeQuery = encodeQuery;
};
var encodeQueryListNil = new EncodeQueryList(function (v) {
    return function (v1) {
        return Data_List_Types.Nil.value;
    };
});
var encodeQueryListConsMulti = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictEncodeQueryParamMulti) {
            return new EncodeQueryList(function (v) {
                return function (query) {
                    var queryObj = Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(query);
                    var v1 = Payload_Client_QueryParams.encodeQueryParamMulti(dictEncodeQueryParamMulti)(queryObj);
                    if (v1 instanceof Data_Maybe.Just) {
                        return new Data_List_Types.Cons(v1.value0, Data_List_Types.Nil.value);
                    };
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return Data_List_Types.Nil.value;
                    };
                    throw new Error("Failed pattern match at Payload.Client.Internal.Query (line 65, column 29 - line 67, column 19): " + [ v1.constructor.name ]);
                };
            });
        };
    };
};
var encodeQueryList = function (dict) {
    return dict.encodeQueryList;
};
var encodeQueryListConsKey = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictCons) {
            return function (dictLacks) {
                return function (dictEncodeQueryParam) {
                    return function (dictEncodeQueryList) {
                        return new EncodeQueryList(function (v) {
                            return function (query) {
                                var val = Record.get(dictIsSymbol1)()(Data_Symbol.SProxy.value)(query);
                                var queryRest = Record["delete"](dictIsSymbol1)()()(Data_Symbol.SProxy.value)(query);
                                var rest = encodeQueryList(dictEncodeQueryList)(Payload_Internal_QueryParsing.QueryListProxy.value)(queryRest);
                                var label = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                                var v1 = Payload_Client_QueryParams.encodeQueryParam(dictEncodeQueryParam)(val);
                                if (v1 instanceof Data_Maybe.Just) {
                                    return new Data_List_Types.Cons(label + ("=" + v1.value0), rest);
                                };
                                if (v1 instanceof Data_Maybe.Nothing) {
                                    return rest;
                                };
                                throw new Error("Failed pattern match at Payload.Client.Internal.Query (line 51, column 5 - line 53, column 22): " + [ v1.constructor.name ]);
                            };
                        });
                    };
                };
            };
        };
    };
};
var encodeQuerySymbol = function (dictParseQuery) {
    return function (dictEncodeQueryList) {
        return new EncodeQuery(function (v) {
            return function (query) {
                var encoded = encodeQueryList(dictEncodeQueryList)(Payload_Internal_QueryParsing.QueryListProxy.value)(query);
                if (encoded instanceof Data_List_Types.Nil) {
                    return "";
                };
                return "?" + Data_String_Common.joinWith("&")(Data_Array.fromFoldable(Data_List_Types.foldableList)(encoded));
            };
        });
    };
};
var encodeQuery = function (dict) {
    return dict.encodeQuery;
};
module.exports = {
    encodeQuery: encodeQuery,
    encodeQueryList: encodeQueryList,
    EncodeQuery: EncodeQuery,
    EncodeQueryList: EncodeQueryList,
    encodeQuerySymbol: encodeQuerySymbol,
    encodeQueryListNil: encodeQueryListNil,
    encodeQueryListConsKey: encodeQueryListConsKey,
    encodeQueryListConsMulti: encodeQueryListConsMulti
};
