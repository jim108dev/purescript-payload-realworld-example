// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_List = require("../Data.List/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Payload_Internal_UrlParsing = require("../Payload.Internal.UrlParsing/index.js");
var Trie = (function () {
    function Trie(value0) {
        this.value0 = value0;
    };
    Trie.create = function (value0) {
        return new Trie(value0);
    };
    return Trie;
})();
var toList = function (v) {
    return Data_Semigroup.append(Data_List_Types.semigroupList)(Data_Maybe.maybe(Data_List_Types.Nil.value)(Control_Applicative.pure(Data_List_Types.applicativeList))(v.value0.value))(Data_List.concatMap(toList)(Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.snd)(v.value0.children)));
};
var showTrie = function (dictShow) {
    return new Data_Show.Show(function (v) {
        return Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "children";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "value";
        }))(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(dictShow)))(Data_List_Types.showList(Data_Tuple.showTuple(Payload_Internal_UrlParsing.showSegment)(showTrie(dictShow))))))(v.value0);
    });
};
var segmentMatches = function (s1) {
    return function (v) {
        return Data_Eq.eq(Payload_Internal_UrlParsing.eqSegment)(s1)(v.value0);
    };
};
var segmentCollides = function (v) {
    return function (v1) {
        if (v instanceof Payload_Internal_UrlParsing.Lit && v1 instanceof Payload_Internal_UrlParsing.Lit) {
            return v.value0 === v1.value0;
        };
        if (v instanceof Payload_Internal_UrlParsing.Key && v1 instanceof Payload_Internal_UrlParsing.Key) {
            return true;
        };
        if (v instanceof Payload_Internal_UrlParsing.Multi && v1 instanceof Payload_Internal_UrlParsing.Multi) {
            return true;
        };
        return false;
    };
};
var newLeaf = function (value) {
    return new Trie({
        value: new Data_Maybe.Just(value),
        children: Data_List_Types.Nil.value
    });
};
var lookup = function (v) {
    return function (v1) {
        if (v instanceof Data_List_Types.Nil && v1.value0.value instanceof Data_Maybe.Nothing) {
            return Data_List_Types.Nil.value;
        };
        if (v instanceof Data_List_Types.Nil && v1.value0.value instanceof Data_Maybe.Just) {
            return new Data_List_Types.Cons(v1.value0.value.value0, Data_List_Types.Nil.value);
        };
        if (v instanceof Data_List_Types.Cons) {
            var matchingChildren = function (match) {
                return function (v2) {
                    if (v2.value0 instanceof Payload_Internal_UrlParsing.Lit) {
                        var $55 = match === v2.value0.value0;
                        if ($55) {
                            return Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.Tuple.create(v2.value0))(lookup(v.value1)(v2.value1));
                        };
                        return Data_List_Types.Nil.value;
                    };
                    if (v2.value0 instanceof Payload_Internal_UrlParsing.Key) {
                        return Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.Tuple.create(v2.value0))(lookup(v.value1)(v2.value1));
                    };
                    if (v2.value0 instanceof Payload_Internal_UrlParsing.Multi && v2.value1.value0.value instanceof Data_Maybe.Just) {
                        return new Data_List_Types.Cons(new Data_Tuple.Tuple(v2.value0, v2.value1.value0.value.value0), Data_List_Types.Nil.value);
                    };
                    if (v2.value0 instanceof Payload_Internal_UrlParsing.Multi && v2.value1.value0.value instanceof Data_Maybe.Nothing) {
                        return Data_List_Types.Nil.value;
                    };
                    throw new Error("Failed pattern match at Payload.Server.Internal.Trie (line 77, column 5 - line 77, column 83): " + [ match.constructor.name, v2.constructor.name ]);
                };
            };
            return Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.snd)(Data_List.sortBy(function (v2) {
                return function (v3) {
                    return Data_Ord.compare(Payload_Internal_UrlParsing.ordSegment)(v2.value0)(v3.value0);
                };
            })(Data_List.concatMap(matchingChildren(v.value0))(v1.value0.children)));
        };
        throw new Error("Failed pattern match at Payload.Server.Internal.Trie (line 69, column 1 - line 69, column 52): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var lookup_ = function (dictFoldable) {
    return function (f) {
        return function (trie) {
            return lookup(Data_List.fromFoldable(dictFoldable)(f))(trie);
        };
    };
};
var functorTrie = new Data_Functor.Functor(function (f) {
    return function (v) {
        var mapChild = function (v1) {
            return new Data_Tuple.Tuple(v1.value0, Data_Functor.map(functorTrie)(f)(v1.value1));
        };
        return new Trie({
            value: Data_Functor.map(Data_Maybe.functorMaybe)(f)(v.value0.value),
            children: Data_Functor.map(Data_List_Types.functorList)(mapChild)(v.value0.children)
        });
    };
});
var eqTrie = function (dictEq) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(v.value0.value)(v1.value0.value) && Data_Eq.eq(Data_List_Types.eqList(Data_Tuple.eqTuple(Payload_Internal_UrlParsing.eqSegment)(eqTrie(dictEq))))(v.value0.children)(v1.value0.children);
        };
    });
};
var empty = new Trie({
    value: Data_Maybe.Nothing.value,
    children: Data_List_Types.Nil.value
});
var insert = function (newVal) {
    return function (v) {
        return function (v1) {
            if (v instanceof Data_List_Types.Nil && v1.value0.value instanceof Data_Maybe.Nothing) {
                return new Data_Either.Right(new Trie({
                    value: new Data_Maybe.Just(newVal),
                    children: v1.value0.children
                }));
            };
            if (v instanceof Data_List_Types.Nil && v1.value0.value instanceof Data_Maybe.Just) {
                return Data_Either.Left.create("Failed to insert: duplicate key");
            };
            if (v instanceof Data_List_Types.Cons) {
                var updateChild = function (v2) {
                    return Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create(v2.value0))(insert(newVal)(v.value1)(v2.value1));
                };
                var existsSegmentCollision = function (s1) {
                    return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v2) {
                        return segmentCollides(s1)(v2.value0);
                    });
                };
                var v2 = Data_List.findIndex(segmentMatches(v.value0))(v1.value0.children);
                if (v2 instanceof Data_Maybe.Just) {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note("No index of match index??")(Data_List.index(v1.value0.children)(v2.value0)))(function (matchingChild) {
                        return Control_Bind.bind(Data_Either.bindEither)(updateChild(matchingChild))(function (updatedChild) {
                            return Control_Bind.bind(Data_Either.bindEither)(Data_Either.note("Could not update child??")(Data_List.updateAt(v2.value0)(updatedChild)(v1.value0.children)))(function (updatedChildren) {
                                return new Data_Either.Right(new Trie({
                                    value: v1.value0.value,
                                    children: updatedChildren
                                }));
                            });
                        });
                    });
                };
                if (v2 instanceof Data_Maybe.Nothing) {
                    var $117 = existsSegmentCollision(v.value0)(v1.value0.children);
                    if ($117) {
                        return new Data_Either.Left("Collision while recursing down trie");
                    };
                    return Data_Functor.map(Data_Either.functorEither)(function (newChild) {
                        return new Trie({
                            value: v1.value0.value,
                            children: new Data_List_Types.Cons(new Data_Tuple.Tuple(v.value0, newChild), v1.value0.children)
                        });
                    })(insert(newVal)(v.value1)(empty));
                };
                throw new Error("Failed pattern match at Payload.Server.Internal.Trie (line 37, column 3 - line 46, column 125): " + [ v2.constructor.name ]);
            };
            throw new Error("Failed pattern match at Payload.Server.Internal.Trie (line 33, column 1 - line 33, column 74): " + [ newVal.constructor.name, v.constructor.name, v1.constructor.name ]);
        };
    };
};
var fromFoldable = function (dictFoldable) {
    return function (dictFoldable1) {
        return function (f) {
            return Data_Foldable.foldM(dictFoldable)(Data_Either.monadEither)(function (trie) {
                return function (v) {
                    return insert(v.value1)(Data_List.fromFoldable(dictFoldable1)(v.value0))(trie);
                };
            })(empty)(f);
        };
    };
};
var fromFoldable_ = function (dictFoldable) {
    return function (dictFoldable1) {
        var $126 = Data_Either.either(Data_Function["const"](empty))(Control_Category.identity(Control_Category.categoryFn));
        var $127 = fromFoldable(dictFoldable)(dictFoldable1);
        return function ($128) {
            return $126($127($128));
        };
    };
};
var dumpEntries = function (dictShow) {
    var $129 = Data_String_Common.joinWith("\x0a");
    var $130 = Data_Array.fromFoldable(Data_List_Types.foldableList);
    var $131 = Data_Functor.map(Data_List_Types.functorList)(Data_Show.show(dictShow));
    return function ($132) {
        return $129($130($131(toList($132))));
    };
};
module.exports = {
    Trie: Trie,
    insert: insert,
    segmentCollides: segmentCollides,
    segmentMatches: segmentMatches,
    empty: empty,
    newLeaf: newLeaf,
    lookup: lookup,
    lookup_: lookup_,
    fromFoldable: fromFoldable,
    fromFoldable_: fromFoldable_,
    toList: toList,
    dumpEntries: dumpEntries,
    showTrie: showTrie,
    eqTrie: eqTrie,
    functorTrie: functorTrie
};
