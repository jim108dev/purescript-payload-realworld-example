// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_EuclideanRing = require("../Data.EuclideanRing/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Regex = require("../Data.String.Regex/index.js");
var Data_String_Regex_Flags = require("../Data.String.Regex.Flags/index.js");
var Data_String_Regex_Unsafe = require("../Data.String.Regex.Unsafe/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Effect = require("../Effect/index.js");
var Node_Buffer = require("../Node.Buffer/index.js");
var Node_Buffer_Class = require("../Node.Buffer.Class/index.js");
var Node_Crypto_Hash = require("../Node.Crypto.Hash/index.js");
var Node_Crypto_Hmac = require("../Node.Crypto.Hmac/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var Simple_JSON = require("../Simple.JSON/index.js");
var InvalidTokenError = (function () {
    function InvalidTokenError() {

    };
    InvalidTokenError.value = new InvalidTokenError();
    return InvalidTokenError;
})();
var NotSupportedAlgorithmError = (function () {
    function NotSupportedAlgorithmError() {

    };
    NotSupportedAlgorithmError.value = new NotSupportedAlgorithmError();
    return NotSupportedAlgorithmError;
})();
var DecodeError = (function () {
    function DecodeError() {

    };
    DecodeError.value = new DecodeError();
    return DecodeError;
})();
var VerifyError = (function () {
    function VerifyError() {

    };
    VerifyError.value = new VerifyError();
    return VerifyError;
})();
var Jwt = function (x) {
    return x;
};
var HS256 = (function () {
    function HS256() {

    };
    HS256.value = new HS256();
    return HS256;
})();
var HS512 = (function () {
    function HS512() {

    };
    HS512.value = new HS512();
    return HS512;
})();
var writeForeignJwt = Simple_JSON.writeForeignString;
var $$unescape = function (x) {
    var rep = (function () {
        var $42 = Data_String_Regex.replace(Data_String_Regex_Unsafe.unsafeRegex("_")(Data_String_Regex_Flags.global))("/");
        var $43 = Data_String_Regex.replace(Data_String_Regex_Unsafe.unsafeRegex("\\-")(Data_String_Regex_Flags.global))("+");
        return function ($44) {
            return $42($43($44));
        };
    })();
    var n = 5 - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_String_CodePoints.length(x))(4) | 0;
    return rep(x + Data_String_Common.joinWith("=")(Data_Array.replicate(n)("")));
};
var toString = function (v) {
    return v;
};
var showJwtError = new Data_Show.Show(function (v) {
    if (v instanceof InvalidTokenError) {
        return "InvalidTokenError";
    };
    if (v instanceof NotSupportedAlgorithmError) {
        return "NotSupportedAlgorithmError";
    };
    if (v instanceof DecodeError) {
        return "DecodeError";
    };
    if (v instanceof VerifyError) {
        return "VerifyError";
    };
    throw new Error("Failed pattern match at Node.Simple.Jwt (line 57, column 1 - line 61, column 35): " + [ v.constructor.name ]);
});
var showJwt = Data_Show.showString;
var showAlgorithm = new Data_Show.Show(function (v) {
    if (v instanceof HS256) {
        return "HS256";
    };
    if (v instanceof HS512) {
        return "HS512";
    };
    throw new Error("Failed pattern match at Node.Simple.Jwt (line 44, column 1 - line 46, column 23): " + [ v.constructor.name ]);
});
var readForeignJwt = Simple_JSON.readString;
var fromString = Jwt;
var $$escape = (function () {
    var $45 = Data_String_Regex.replace(Data_String_Regex_Unsafe.unsafeRegex("=")(Data_String_Regex_Flags.global))("");
    var $46 = Data_String_Regex.replace(Data_String_Regex_Unsafe.unsafeRegex("\\/")(Data_String_Regex_Flags.global))("_");
    var $47 = Data_String_Regex.replace(Data_String_Regex_Unsafe.unsafeRegex("\\+")(Data_String_Regex_Flags.global))("-");
    return function ($48) {
        return $45($46($47($48)));
    };
})();
var eqJwtError = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof InvalidTokenError && y instanceof InvalidTokenError) {
            return true;
        };
        if (x instanceof NotSupportedAlgorithmError && y instanceof NotSupportedAlgorithmError) {
            return true;
        };
        if (x instanceof DecodeError && y instanceof DecodeError) {
            return true;
        };
        if (x instanceof VerifyError && y instanceof VerifyError) {
            return true;
        };
        return false;
    };
});
var eqJwt = Data_Eq.eqString;
var eqAlgorithm = new Data_Eq.Eq(function (x) {
    return function (y) {
        if (x instanceof HS256 && y instanceof HS256) {
            return true;
        };
        if (x instanceof HS512 && y instanceof HS512) {
            return true;
        };
        return false;
    };
});
var convertAlgorithm = function (v) {
    if (v instanceof HS256) {
        return Node_Crypto_Hash.SHA256.value;
    };
    if (v instanceof HS512) {
        return Node_Crypto_Hash.SHA512.value;
    };
    throw new Error("Failed pattern match at Node.Simple.Jwt (line 151, column 1 - line 151, column 48): " + [ v.constructor.name ]);
};
var sign = function (secret) {
    return function (alg) {
        return function (input) {
            return Data_Functor.map(Effect.functorEffect)($$escape)(Node_Crypto_Hmac.base64(convertAlgorithm(alg))(secret)(input));
        };
    };
};
var verify = function (secret) {
    return function (alg) {
        return function (input) {
            return function (signatureSegment) {
                return function __do() {
                    var signatureSegment$prime = sign(secret)(alg)(input)();
                    return signatureSegment === signatureSegment$prime;
                };
            };
        };
    };
};
var base64URLEncode = function (x) {
    return Data_Functor.map(Effect.functorEffect)($$escape)(Control_Bind.bind(Effect.bindEffect)(Node_Buffer_Class.fromString(Node_Buffer.mutableBufferEffect)(x)(Node_Encoding.UTF8.value))(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.Base64.value)));
};
var encode = function (dictWriteForeign) {
    return function (secret) {
        return function (alg) {
            return function (payload) {
                return function __do() {
                    var headerSegment = base64URLEncode(Simple_JSON.writeJSON(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
                        return "alg";
                    }))(Simple_JSON.writeForeignString)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
                        return "typ";
                    }))(Simple_JSON.writeForeignString)(Simple_JSON.nilWriteForeignFields)()()())()()()))({
                        typ: "JWT",
                        alg: Data_Show.show(showAlgorithm)(alg)
                    }))();
                    var payloadSegment = base64URLEncode(Simple_JSON.writeJSON(dictWriteForeign)(payload))();
                    var signatureSegment = sign(secret)(alg)(headerSegment + ("." + payloadSegment))();
                    return Jwt(headerSegment + ("." + (payloadSegment + ("." + signatureSegment))));
                };
            };
        };
    };
};
var base64URLDecode = function (x) {
    return Control_Bind.bind(Effect.bindEffect)(Node_Buffer_Class.fromString(Node_Buffer.mutableBufferEffect)($$unescape(x))(Node_Encoding.Base64.value))(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.UTF8.value));
};
var readPayload = function (dictReadForeign) {
    return function (payloadSegment) {
        return function __do() {
            var payload = Data_Functor.map(Effect.functorEffect)(Simple_JSON.readJSON(dictReadForeign))(base64URLDecode(payloadSegment))();
            if (payload instanceof Data_Either.Left) {
                return new Data_Either.Left(DecodeError.value);
            };
            if (payload instanceof Data_Either.Right) {
                return new Data_Either.Right(payload.value0);
            };
            throw new Error("Failed pattern match at Node.Simple.Jwt (line 96, column 3 - line 98, column 44): " + [ payload.constructor.name ]);
        };
    };
};
var algorithmFromString = function (alg) {
    if (alg === Data_Show.show(showAlgorithm)(HS256.value)) {
        return new Data_Maybe.Just(HS256.value);
    };
    if (alg === Data_Show.show(showAlgorithm)(HS512.value)) {
        return new Data_Maybe.Just(HS512.value);
    };
    if (Data_Boolean.otherwise) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Node.Simple.Jwt (line 110, column 1 - line 110, column 49): " + [ alg.constructor.name ]);
};
var readAlgorithm = function (headerSegment) {
    return function __do() {
        var header = Data_Functor.map(Effect.functorEffect)(Simple_JSON.readJSON(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "alg";
        }))(Simple_JSON.readString)(Simple_JSON.readFieldsNil)()())))(base64URLDecode(headerSegment))();
        if (header instanceof Data_Either.Left) {
            return new Data_Either.Left(DecodeError.value);
        };
        if (header instanceof Data_Either.Right) {
            var v = algorithmFromString(header.value0.alg);
            if (v instanceof Data_Maybe.Nothing) {
                return new Data_Either.Left(NotSupportedAlgorithmError.value);
            };
            if (v instanceof Data_Maybe.Just) {
                return new Data_Either.Right(v.value0);
            };
            throw new Error("Failed pattern match at Node.Simple.Jwt (line 106, column 7 - line 108, column 39): " + [ v.constructor.name ]);
        };
        throw new Error("Failed pattern match at Node.Simple.Jwt (line 103, column 3 - line 108, column 39): " + [ header.constructor.name ]);
    };
};
var decode = function (dictReadForeign) {
    return function (secret) {
        return function (v) {
            var v1 = Data_String_Common.split(".")(v);
            if (v1.length === 3) {
                return function __do() {
                    var algOrErr = readAlgorithm(v1[0])();
                    if (algOrErr instanceof Data_Either.Left) {
                        return new Data_Either.Left(algOrErr.value0);
                    };
                    if (algOrErr instanceof Data_Either.Right) {
                        var isValid = verify(secret)(algOrErr.value0)(v1[0] + ("." + v1[1]))(v1[2])();
                        if (isValid) {
                            return readPayload(dictReadForeign)(v1[1])();
                        };
                        return new Data_Either.Left(VerifyError.value);
                    };
                    throw new Error("Failed pattern match at Node.Simple.Jwt (line 79, column 8 - line 85, column 42): " + [ algOrErr.constructor.name ]);
                };
            };
            return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Either.Left(InvalidTokenError.value));
        };
    };
};
module.exports = {
    HS256: HS256,
    HS512: HS512,
    InvalidTokenError: InvalidTokenError,
    NotSupportedAlgorithmError: NotSupportedAlgorithmError,
    DecodeError: DecodeError,
    VerifyError: VerifyError,
    fromString: fromString,
    toString: toString,
    decode: decode,
    encode: encode,
    showJwt: showJwt,
    eqJwt: eqJwt,
    readForeignJwt: readForeignJwt,
    writeForeignJwt: writeForeignJwt,
    showAlgorithm: showAlgorithm,
    eqAlgorithm: eqAlgorithm,
    showJwtError: showJwtError,
    eqJwtError: eqJwtError
};
