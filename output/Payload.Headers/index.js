// Generated by purs version 0.13.8
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Payload_Internal_Utils = require("../Payload.Internal.Utils/index.js");
var Headers = function (x) {
    return x;
};
var toUnfoldable = function (dictUnfoldable) {
    return function (v) {
        return Data_Map_Internal.toUnfoldable(dictUnfoldable)(v);
    };
};
var showHeaders = new Data_Show.Show(function (v) {
    return Data_Show.show(Data_Map_Internal.showMap(Data_Show.showString)(Data_Show.showString))(v);
});
var set = function (name) {
    return function (value) {
        return function (v) {
            return Data_Map_Internal.insert(Data_Ord.ordString)(Payload_Internal_Utils.toLowerCase(name))(value)(v);
        };
    };
};
var semigroupHeaders = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        return Data_Semigroup.append(Data_Map_Internal.semigroupMap(Data_Ord.ordString))(v1)(v);
    };
});
var member = function (key) {
    return function (v) {
        return Data_Map_Internal.member(Data_Ord.ordString)(Payload_Internal_Utils.toLowerCase(key))(v);
    };
};
var setIfNotDefined = function (name) {
    return function (value) {
        return function (headers) {
            if (member(name)(headers)) {
                return headers;
            };
            return set(name)(value)(headers);
        };
    };
};
var lookup = function (key) {
    return function (v) {
        return Data_Map_Internal.lookup(Data_Ord.ordString)(Payload_Internal_Utils.toLowerCase(key))(v);
    };
};
var eqHeaders = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return Data_Eq.eq(Data_Map_Internal.eqMap(Data_Eq.eqString)(Data_Eq.eqString))(v)(v1);
    };
});
var empty = Data_Map_Internal.empty;
var fromFoldable = function (dictFoldable) {
    return function (f) {
        return Data_Foldable.foldl(dictFoldable)(function (m) {
            return function (v) {
                return set(v.value0)(v.value1)(m);
            };
        })(empty)(f);
    };
};
module.exports = {
    empty: empty,
    fromFoldable: fromFoldable,
    lookup: lookup,
    set: set,
    setIfNotDefined: setIfNotDefined,
    toUnfoldable: toUnfoldable,
    showHeaders: showHeaders,
    eqHeaders: eqHeaders,
    semigroupHeaders: semigroupHeaders
};
