// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Lens_Indexed = require("../Data.Lens.Indexed/index.js");
var Data_Lens_Internal_Bazaar = require("../Data.Lens.Internal.Bazaar/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Profunctor_Star = require("../Data.Profunctor.Star/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var traversed = function (dictTraversable) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return Data_Traversable.traverse(dictTraversable)(dictApplicative);
        });
    };
};
var traverseOf = Data_Newtype.under(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.Star);
var sequenceOf = function (t) {
    return traverseOf(t)(Control_Category.identity(Control_Category.categoryFn));
};
var itraverseOf = function (t) {
    var $24 = Data_Newtype.under(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.newtypeStar)(Data_Profunctor_Star.Star)(function ($26) {
        return t(Data_Lens_Internal_Indexed.Indexed($26));
    });
    return function ($25) {
        return $24(Data_Tuple.uncurry($25));
    };
};
var iforOf = function ($27) {
    return Data_Function.flip(itraverseOf($27));
};
var failover = function (dictAlternative) {
    return function (t) {
        return function (f) {
            return function (s) {
                var v = Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(t(Data_Profunctor_Star.Star((function () {
                    var $28 = Data_Tuple.Tuple.create(true);
                    return function ($29) {
                        return $28(f($29));
                    };
                })())))(s);
                if (v.value0) {
                    return Control_Applicative.pure(dictAlternative.Applicative0())(v.value1);
                };
                if (!v.value0) {
                    return Control_Plus.empty(dictAlternative.Plus1());
                };
                throw new Error("Failed pattern match at Data.Lens.Traversal (line 97, column 18 - line 99, column 32): " + [ v.constructor.name ]);
            };
        };
    };
};
var elementsOf = function (dictWander) {
    return function (tr) {
        return function (pr) {
            return Data_Lens_Indexed.iwander(function (dictApplicative) {
                return function (f) {
                    return Data_Newtype.unwrap(Data_Profunctor_Star.newtypeStar)(tr(Data_Lens_Internal_Wander.wanderStar(dictApplicative))(Data_Lens_Internal_Indexed.Indexed(Data_Profunctor_Star.Star(function (v) {
                        var $21 = pr(v.value0);
                        if ($21) {
                            return f(v.value0)(v.value1);
                        };
                        return Control_Applicative.pure(dictApplicative)(v.value1);
                    }))));
                };
            })(dictWander);
        };
    };
};
var element = function (dictWander) {
    return function (n) {
        return function (tr) {
            return Data_Lens_Indexed.unIndex((dictWander.Choice1()).Profunctor0())(elementsOf(dictWander)(function (dictWander1) {
                return Data_Lens_Indexed.positions(function (dictWander2) {
                    return tr(dictWander2);
                })(dictWander1);
            })(function (v) {
                return v === n;
            }));
        };
    };
};
var cloneTraversal = function (l) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return Data_Lens_Internal_Bazaar.runBazaar(l(function (dictApplicative1) {
                return Control_Category.identity(Control_Category.categoryFn);
            }))(dictApplicative);
        });
    };
};
module.exports = {
    traversed: traversed,
    element: element,
    traverseOf: traverseOf,
    sequenceOf: sequenceOf,
    failover: failover,
    elementsOf: elementsOf,
    itraverseOf: itraverseOf,
    cloneTraversal: cloneTraversal
};
