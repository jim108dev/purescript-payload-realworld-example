// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Array_NonEmpty = require("../Data.Array.NonEmpty/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Lens_Internal_Wander = require("../Data.Lens.Internal.Wander/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Index = function (ix) {
    this.ix = ix;
};
var ix = function (dict) {
    return dict.ix;
};
var indexSet = function (dictOrd) {
    return new Index(function (x) {
        return function (dictWander) {
            return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                return function (coalg) {
                    var $40 = Control_Applicative.pure(dictApplicative);
                    var $41 = Data_Set.insert(dictOrd)(x);
                    return function ($42) {
                        return $40($41($42));
                    };
                };
            });
        };
    });
};
var indexNonEmptyArray = new Index(function (n) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return function (coalg) {
                return function (xs) {
                    return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(xs))((function () {
                        var $43 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (x) {
                            return Data_Maybe.fromMaybe(xs)(Data_Array_NonEmpty.updateAt(n)(x)(xs));
                        });
                        return function ($44) {
                            return $43(coalg($44));
                        };
                    })())(Data_Array_NonEmpty.index(xs)(n));
                };
            };
        });
    };
});
var indexMaybe = new Index(function (v) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative);
        });
    };
});
var indexMap = function (dictOrd) {
    return new Index(function (k) {
        return function (dictWander) {
            return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                return function (coalg) {
                    return function (m) {
                        return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(m))((function () {
                            var $45 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                                return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                            });
                            return function ($46) {
                                return $45(coalg($46));
                            };
                        })())(Data_Map_Internal.lookup(dictOrd)(k)(m));
                    };
                };
            });
        };
    });
};
var indexList = new Index(function (n) {
    return function (dictWander) {
        if (n < 0) {
            return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                return function (v) {
                    return function (xs) {
                        return Control_Applicative.pure(dictApplicative)(xs);
                    };
                };
            });
        };
        if (Data_Boolean.otherwise) {
            var go = function (dictApplicative) {
                return function (v) {
                    return function (v1) {
                        return function (v2) {
                            if (v instanceof Data_List_Types.Nil) {
                                return Control_Applicative.pure(dictApplicative)(Data_List_Types.Nil.value);
                            };
                            if (v instanceof Data_List_Types.Cons && v1 === 0) {
                                return Data_Functor.mapFlipped((dictApplicative.Apply0()).Functor0())(v2(v.value0))(function (v3) {
                                    return new Data_List_Types.Cons(v3, v.value1);
                                });
                            };
                            if (v instanceof Data_List_Types.Cons) {
                                return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v3) {
                                    return new Data_List_Types.Cons(v.value0, v3);
                                })(go(dictApplicative)(v.value1)(v1 - 1 | 0)(v2));
                            };
                            throw new Error("Failed pattern match at Data.Lens.Index (line 83, column 5 - line 83, column 79): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
                        };
                    };
                };
            };
            return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                return function (coalg) {
                    return function (xs) {
                        return go(dictApplicative)(xs)(n)(coalg);
                    };
                };
            });
        };
        throw new Error("Failed pattern match at Data.Lens.Index (line 80, column 1 - line 86, column 56): " + [ n.constructor.name ]);
    };
});
var indexIdentity = new Index(function (v) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return Data_Traversable.traverse(Data_Identity.traversableIdentity)(dictApplicative);
        });
    };
});
var indexForeignObject = new Index(function (k) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return function (coalg) {
                return function (m) {
                    return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(m))((function () {
                        var $47 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                            return Foreign_Object.insert(k)(v)(m);
                        });
                        return function ($48) {
                            return $47(coalg($48));
                        };
                    })())(Foreign_Object.lookup(k)(m));
                };
            };
        });
    };
});
var indexArray = new Index(function (n) {
    return function (dictWander) {
        return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
            return function (coalg) {
                return function (xs) {
                    return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(xs))((function () {
                        var $49 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (x) {
                            return Data_Maybe.fromMaybe(xs)(Data_Array.updateAt(n)(x)(xs));
                        });
                        return function ($50) {
                            return $49(coalg($50));
                        };
                    })())(Data_Array.index(xs)(n));
                };
            };
        });
    };
});
var indexArr = function (dictEq) {
    return new Index(function (i) {
        return function (dictWander) {
            return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                return function (coalg) {
                    return function (f) {
                        return Data_Functor.mapFlipped((dictApplicative.Apply0()).Functor0())(coalg(f(i)))(function (a) {
                            return function (j) {
                                var $39 = Data_Eq.eq(dictEq)(i)(j);
                                if ($39) {
                                    return a;
                                };
                                return f(j);
                            };
                        });
                    };
                };
            });
        };
    });
};
module.exports = {
    Index: Index,
    ix: ix,
    indexArr: indexArr,
    indexMaybe: indexMaybe,
    indexIdentity: indexIdentity,
    indexArray: indexArray,
    indexNonEmptyArray: indexNonEmptyArray,
    indexList: indexList,
    indexSet: indexSet,
    indexMap: indexMap,
    indexForeignObject: indexForeignObject
};
