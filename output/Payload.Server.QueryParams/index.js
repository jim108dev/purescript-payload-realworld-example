// Generated by purs version 0.13.8
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var QueryDecodeError = (function () {
    function QueryDecodeError(value0) {
        this.value0 = value0;
    };
    QueryDecodeError.create = function (value0) {
        return new QueryDecodeError(value0);
    };
    return QueryDecodeError;
})();
var QueryParamNotFound = (function () {
    function QueryParamNotFound(value0) {
        this.value0 = value0;
    };
    QueryParamNotFound.create = function (value0) {
        return new QueryParamNotFound(value0);
    };
    return QueryParamNotFound;
})();
var DecodeQueryParamMulti = function (decodeQueryParamMulti) {
    this.decodeQueryParamMulti = decodeQueryParamMulti;
};
var DecodeQueryParam = function (decodeQueryParam) {
    this.decodeQueryParam = decodeQueryParam;
};
var showDecodeError = new Data_Show.Show(function (v) {
    if (v instanceof QueryDecodeError) {
        return "(QueryDecodeError " + (Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "key";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "message";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "queryObj";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "values";
        }))(Data_Show.showRecordFieldsNil)(Data_Show.showArray(Data_Show.showString)))(Foreign_Object.showObject(Data_Show.showArray(Data_Show.showString))))(Data_Show.showString))(Data_Show.showString)))(v.value0) + ")");
    };
    if (v instanceof QueryParamNotFound) {
        return "(QueryParamNotFound " + (Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "key";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "queryObj";
        }))(Data_Show.showRecordFieldsNil)(Foreign_Object.showObject(Data_Show.showArray(Data_Show.showString))))(Data_Show.showString)))(v.value0) + ")");
    };
    throw new Error("Failed pattern match at Payload.Server.QueryParams (line 22, column 1 - line 24, column 72): " + [ v.constructor.name ]);
});
var decodeQueryParamString = new DecodeQueryParam(function (queryObj) {
    return function (queryKey) {
        var decodeErr = function (values) {
            return function (msg) {
                return new Data_Either.Left(new QueryDecodeError({
                    key: queryKey,
                    values: values,
                    message: msg,
                    queryObj: queryObj
                }));
            };
        };
        var v = Foreign_Object.lookup(queryKey)(queryObj);
        if (v instanceof Data_Maybe.Nothing) {
            return new Data_Either.Left(new QueryParamNotFound({
                key: queryKey,
                queryObj: queryObj
            }));
        };
        if (v instanceof Data_Maybe.Just && v.value0.length === 0) {
            return decodeErr([  ])("Expected single value but received empty Array");
        };
        if (v instanceof Data_Maybe.Just && v.value0.length === 1) {
            return new Data_Either.Right(v["value0"][0]);
        };
        if (v instanceof Data_Maybe.Just) {
            return decodeErr(v.value0)("Expected single value but received multiple: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(v.value0));
        };
        throw new Error("Failed pattern match at Payload.Server.QueryParams (line 41, column 5 - line 45, column 94): " + [ v.constructor.name ]);
    };
});
var decodeQueryParamMultiObjectString = new DecodeQueryParamMulti(function (o) {
    return new Data_Either.Right(o);
});
var decodeQueryParamMulti = function (dict) {
    return dict.decodeQueryParamMulti;
};
var decodeQueryParamInt = new DecodeQueryParam(function (queryObj) {
    return function (queryKey) {
        var decodeErr = function (values) {
            return function (msg) {
                return new Data_Either.Left(new QueryDecodeError({
                    key: queryKey,
                    values: values,
                    message: msg,
                    queryObj: queryObj
                }));
            };
        };
        var v = Foreign_Object.lookup(queryKey)(queryObj);
        if (v instanceof Data_Maybe.Nothing) {
            return new Data_Either.Left(new QueryParamNotFound({
                key: queryKey,
                queryObj: queryObj
            }));
        };
        if (v instanceof Data_Maybe.Just && v.value0.length === 0) {
            return decodeErr([  ])("Expected single value but received empty array.");
        };
        if (v instanceof Data_Maybe.Just && v.value0.length === 1) {
            return Data_Maybe.maybe(decodeErr([ v["value0"][0] ])("Could not decode into an Int"))(Data_Either.Right.create)(Data_Int.fromString(v["value0"][0]));
        };
        if (v instanceof Data_Maybe.Just) {
            return decodeErr(v.value0)("Expected single value but received multiple: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(v.value0));
        };
        throw new Error("Failed pattern match at Payload.Server.QueryParams (line 31, column 5 - line 35, column 94): " + [ v.constructor.name ]);
    };
});
var decodeQueryParamBoolean = new DecodeQueryParam(function (queryObj) {
    return function (queryKey) {
        var decodeErr = function (values) {
            return function (msg) {
                return new Data_Either.Left(new QueryDecodeError({
                    key: queryKey,
                    values: values,
                    message: msg,
                    queryObj: queryObj
                }));
            };
        };
        var v = Foreign_Object.lookup(queryKey)(queryObj);
        if (v instanceof Data_Maybe.Nothing) {
            return new Data_Either.Left(new QueryParamNotFound({
                key: queryKey,
                queryObj: queryObj
            }));
        };
        if (v instanceof Data_Maybe.Just && v.value0.length === 0) {
            return decodeErr([  ])("Expected single value but received empty Array");
        };
        if (v instanceof Data_Maybe.Just && (v.value0.length === 1 && v["value0"][0] === "false")) {
            return new Data_Either.Right(false);
        };
        if (v instanceof Data_Maybe.Just && (v.value0.length === 1 && v["value0"][0] === "true")) {
            return new Data_Either.Right(true);
        };
        if (v instanceof Data_Maybe.Just) {
            return decodeErr(v.value0)("Expected single value but received multiple: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(v.value0));
        };
        throw new Error("Failed pattern match at Payload.Server.QueryParams (line 51, column 5 - line 56, column 94): " + [ v.constructor.name ]);
    };
});
var decodeQueryParam = function (dict) {
    return dict.decodeQueryParam;
};
var decodeQueryParamMaybe = function (dictDecodeQueryParam) {
    return new DecodeQueryParam(function (queryObj) {
        return function (queryKey) {
            var v = Foreign_Object.lookup(queryKey)(queryObj);
            if (v instanceof Data_Maybe.Nothing) {
                return new Data_Either.Right(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Maybe.Just && v.value0.length === 0) {
                return new Data_Either.Right(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Maybe.Just && (v.value0.length === 1 && v["value0"][0] === "")) {
                return new Data_Either.Right(Data_Maybe.Nothing.value);
            };
            if (v instanceof Data_Maybe.Just) {
                return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeQueryParam(dictDecodeQueryParam)(queryObj)(queryKey));
            };
            throw new Error("Failed pattern match at Payload.Server.QueryParams (line 62, column 5 - line 66, column 60): " + [ v.constructor.name ]);
        };
    });
};
module.exports = {
    DecodeQueryParam: DecodeQueryParam,
    decodeQueryParam: decodeQueryParam,
    DecodeQueryParamMulti: DecodeQueryParamMulti,
    decodeQueryParamMulti: decodeQueryParamMulti,
    QueryDecodeError: QueryDecodeError,
    QueryParamNotFound: QueryParamNotFound,
    showDecodeError: showDecodeError,
    decodeQueryParamInt: decodeQueryParamInt,
    decodeQueryParamString: decodeQueryParamString,
    decodeQueryParamBoolean: decodeQueryParamBoolean,
    decodeQueryParamMaybe: decodeQueryParamMaybe,
    decodeQueryParamMultiObjectString: decodeQueryParamMultiObjectString
};
