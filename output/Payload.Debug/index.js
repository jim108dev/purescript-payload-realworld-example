// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Payload_Headers = require("../Payload.Headers/index.js");
var ShowDebug = function (showDebug) {
    this.showDebug = showDebug;
};
var showDebugRecord = new ShowDebug(function (r) {
    return $foreign.jsonStringify(r);
});
var showDebugDefault = function (dictShow) {
    return new ShowDebug(Data_Show.show(dictShow));
};
var showDebugArray = new ShowDebug(function (r) {
    return $foreign.jsonStringify(r);
});
var showDebug = function (dict) {
    return dict.showDebug;
};
var showDebugEither = function (dictShowDebug) {
    return function (dictShowDebug1) {
        return new ShowDebug(function (v) {
            if (v instanceof Data_Either.Right) {
                return "(Right " + (showDebug(dictShowDebug1)(v.value0) + ")");
            };
            if (v instanceof Data_Either.Left) {
                return "(Left " + (showDebug(dictShowDebug)(v.value0) + ")");
            };
            throw new Error("Failed pattern match at Payload.Debug (line 27, column 6 - line 29, column 54): " + [ v.constructor.name ]);
        });
    };
};
var showDebugResponse = function (dictShowDebug) {
    return new ShowDebug(function (v) {
        var showHeader = function (v1) {
            return Data_Show.show(Data_Show.showString)(v1.value0) + (" " + Data_Show.show(Data_Show.showString)(v1.value1));
        };
        var showHeaders = function (headers) {
            return "  " + Data_String_Common.joinWith("\x0a  ")(Data_Functor.map(Data_Functor.functorArray)(showHeader)(Payload_Headers.toUnfoldable(Data_Unfoldable.unfoldableArray)(headers)));
        };
        return "Status: " + (Data_Show.show(Data_Show.showInt)(v.status.code) + (" " + (v.status.reason + ("\x0a" + ("Headers:\x0a" + (showHeaders(v.headers) + ("\x0a" + ("Body:\x0a" + showDebug(dictShowDebug)(v.body)))))))));
    });
};
module.exports = {
    showDebug: showDebug,
    ShowDebug: ShowDebug,
    showDebugResponse: showDebugResponse,
    showDebugEither: showDebugEither,
    showDebugArray: showDebugArray,
    showDebugRecord: showDebugRecord,
    showDebugDefault: showDebugDefault,
    jsonStringify: $foreign.jsonStringify,
    formatJsonString: $foreign.formatJsonString
};
