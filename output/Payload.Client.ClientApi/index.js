// Generated by purs version 0.13.8
"use strict";
var Data_Symbol = require("../Data.Symbol/index.js");
var Payload_Client_Queryable = require("../Payload.Client.Queryable/index.js");
var Payload_Headers = require("../Payload.Headers/index.js");
var Payload_Spec = require("../Payload.Spec/index.js");
var Record = require("../Record/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var ClientApiList = function (mkClientApiList) {
    this.mkClientApiList = mkClientApiList;
};
var ClientApi = function (mkClientApi) {
    this.mkClientApi = mkClientApi;
};
var mkClientApiList = function (dict) {
    return dict.mkClientApiList;
};
var mkClientApi = function (dict) {
    return dict.mkClientApi;
};
var clientApiRecord = function (dictUnion) {
    return function (dictNub) {
        return function (dictTypeEquals) {
            return function (dictRowToList) {
                return function (dictClientApiList) {
                    return new ClientApi(function (opts) {
                        return function (routesSpec) {
                            return mkClientApiList(dictClientApiList)(opts)(Type_Data_RowList.RLProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value);
                        };
                    });
                };
            };
        };
    };
};
var clientApiListNil = new ClientApiList(function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                return {};
            };
        };
    };
});
var clientApiListConsRoutes = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictIsSymbol2) {
            return function (dictEncodeUrl) {
                return function (dictUnion) {
                    return function (dictNub) {
                        return function (dictTypeEquals) {
                            return function (dictUnion1) {
                                return function (dictCons) {
                                    return function (dictRowToList) {
                                        return function (dictAppend) {
                                            return function (dictClientApiList) {
                                                return function (dictLacks) {
                                                    return function (dictClientApiList1) {
                                                        return new ClientApiList(function (opts) {
                                                            return function (v) {
                                                                return function (basePath) {
                                                                    return function (baseParams) {
                                                                        var childRoutes = mkClientApiList(dictClientApiList)(opts)(Type_Data_RowList.RLProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value);
                                                                        return Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(childRoutes)(mkClientApiList(dictClientApiList1)(opts)(Type_Data_RowList.RLProxy.value)(basePath)(baseParams));
                                                                    };
                                                                };
                                                            };
                                                        });
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var clientApiListCons = function (dictIsSymbol) {
    return function (dictIsSymbol1) {
        return function (dictIsSymbol2) {
            return function (dictIsSymbol3) {
                return function (dictCons) {
                    return function (dictCons1) {
                        return function (dictAppend) {
                            return function (dictLacks) {
                                return function (dictLacks1) {
                                    return function (dictQueryable) {
                                        return function (dictClientApiList) {
                                            return new ClientApiList(function (opts) {
                                                return function (v) {
                                                    return function (v1) {
                                                        return function (v2) {
                                                            var rest = mkClientApiList(dictClientApiList)(opts)(Type_Data_RowList.RLProxy.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value);
                                                            var doRequestWithOptions = function (reqOpts) {
                                                                return function (payload) {
                                                                    return Payload_Client_Queryable.request(dictQueryable)(Payload_Spec.Route.value)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(opts)(reqOpts)(payload);
                                                                };
                                                            };
                                                            var doRequest = doRequestWithOptions({
                                                                extraHeaders: Payload_Headers.empty
                                                            });
                                                            return Record.insert(dictIsSymbol1)()()(Data_Symbol.SProxy.value)(doRequestWithOptions)(Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(doRequest)(rest));
                                                        };
                                                    };
                                                };
                                            });
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    ClientApi: ClientApi,
    mkClientApi: mkClientApi,
    ClientApiList: ClientApiList,
    mkClientApiList: mkClientApiList,
    clientApiRecord: clientApiRecord,
    clientApiListNil: clientApiListNil,
    clientApiListCons: clientApiListCons,
    clientApiListConsRoutes: clientApiListConsRoutes
};
