// Generated by purs version 0.13.8
"use strict";
var Affjax = require("../Affjax/index.js");
var Affjax_RequestBody = require("../Affjax.RequestBody/index.js");
var Affjax_RequestHeader = require("../Affjax.RequestHeader/index.js");
var Affjax_ResponseFormat = require("../Affjax.ResponseFormat/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Parser = require("../Data.Argonaut.Parser/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HTTP_Method = require("../Data.HTTP.Method/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Payload_Client_Response = require("../Payload.Client.Response/index.js");
var Payload_Headers = require("../Payload.Headers/index.js");
var Payload_Server = require("../Payload.Server/index.js");
var Payload_Spec = require("../Payload.Spec/index.js");
var Test_Unit = require("../Test.Unit/index.js");
var Test_Unit_Assert = require("../Test.Unit.Assert/index.js");
var whileServerRuns = function (runServer) {
    return function (doWhileRunning) {
        var runAff = function (v) {
            if (v instanceof Data_Either.Left) {
                return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(v.value0));
            };
            if (v instanceof Data_Either.Right) {
                return doWhileRunning;
            };
            throw new Error("Failed pattern match at Test.Server.Shell.Util.Payload (line 50, column 3 - line 50, column 49): " + [ v.constructor.name ]);
        };
        var completed = function (v) {
            if (v instanceof Data_Either.Left) {
                return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
            };
            if (v instanceof Data_Either.Right) {
                return Payload_Server.close(v.value0);
            };
            throw new Error("Failed pattern match at Test.Server.Shell.Util.Payload (line 54, column 3 - line 54, column 33): " + [ v.constructor.name ]);
        };
        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff.bracket(runServer)(completed)(runAff))(function () {
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
        });
    };
};
var withServer = function (dictRoutable) {
    return function (apiSpec) {
        return function (api_) {
            return function (aff) {
                var opts = {
                    logLevel: Payload_Server.LogError.value,
                    port: 3000,
                    backlog: Payload_Server.defaultOpts.backlog,
                    hostname: Payload_Server.defaultOpts.hostname
                };
                return whileServerRuns(Payload_Server.startGuarded(dictRoutable)(opts)(apiSpec)(api_))(aff);
            };
        };
    };
};
var withRoutes = function (dictRoutable) {
    return function (v) {
        return function (handlers) {
            return withServer(dictRoutable)(Payload_Spec.Spec.value)({
                guards: {},
                handlers: handlers
            });
        };
    };
};
var unwrapStatusCode = function (v) {
    return v;
};
var respMatchesStatus = function (expected) {
    return function (received) {
        return Test_Unit_Assert.equal(Data_Eq.eqInt)(Data_Show.showInt)(expected)(received.status);
    };
};
var respMatches = function (expected) {
    return function (received) {
        return Test_Unit_Assert.equal(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
            return "status";
        }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
            return "body";
        }))(Data_Eq.eqString)))(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "body";
        }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
            return "status";
        }))(Data_Show.showRecordFieldsNil)(Data_Show.showInt))(Data_Show.showString)))(expected)({
            status: received.status,
            body: received.body
        });
    };
};
var decodeBody = function (res) {
    var unwrapHeader = function (v) {
        return new Data_Tuple.Tuple(v.value0, v.value1);
    };
    return {
        status: unwrapStatusCode(res.status),
        body: res.body,
        headers: Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(unwrapHeader)(res.headers))
    };
};
var decodeResponse = function (v) {
    if (v instanceof Data_Either.Right) {
        return Control_Applicative.pure(Effect_Aff.applicativeAff)(decodeBody(v.value0));
    };
    if (v instanceof Data_Either.Left) {
        return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(Affjax.printError(v.value0)));
    };
    throw new Error("Failed pattern match at Test.Server.Shell.Util.Payload (line 200, column 1 - line 200, column 74): " + [ v.constructor.name ]);
};
var $$delete = function (host) {
    return function (path) {
        return function (reqBody) {
            var content = Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestBody["String"].create)(reqBody);
            var url = host + ("/" + path);
            var req = {
                method: new Data_Either.Left(Data_HTTP_Method.DELETE.value),
                url: url,
                content: content,
                responseFormat: Affjax_ResponseFormat.string,
                headers: Affjax.defaultRequest.headers,
                password: Affjax.defaultRequest.password,
                timeout: Affjax.defaultRequest.timeout,
                username: Affjax.defaultRequest.username,
                withCredentials: Affjax.defaultRequest.withCredentials
            };
            return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request(req))(function (result) {
                return decodeResponse(result);
            });
        };
    };
};
var delete_ = function (host) {
    return function (path) {
        return function (headers) {
            return function (reqBody) {
                var req = {
                    content: Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestBody["String"].create)(reqBody),
                    method: new Data_Either.Left(Data_HTTP_Method.DELETE.value),
                    url: host + ("/" + path),
                    responseFormat: Affjax_ResponseFormat.string,
                    headers: Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                        return new Affjax_RequestHeader.RequestHeader(v1.value0, v1.value1);
                    })(Payload_Headers.toUnfoldable(Data_Unfoldable.unfoldableArray)(headers)),
                    password: Affjax.defaultRequest.password,
                    timeout: Affjax.defaultRequest.timeout,
                    username: Affjax.defaultRequest.username,
                    withCredentials: Affjax.defaultRequest.withCredentials
                };
                return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request(req))(decodeResponse);
            };
        };
    };
};
var get = function (host) {
    return function (path) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.get(Affjax_ResponseFormat.string)(host + ("/" + path)))(decodeResponse);
    };
};
var get_ = function (host) {
    return function (path) {
        return function (headers) {
            var req = {
                method: new Data_Either.Left(Data_HTTP_Method.GET.value),
                url: host + ("/" + path),
                responseFormat: Affjax_ResponseFormat.string,
                headers: Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                    return new Affjax_RequestHeader.RequestHeader(v1.value0, v1.value1);
                })(Payload_Headers.toUnfoldable(Data_Unfoldable.unfoldableArray)(headers)),
                content: Affjax.defaultRequest.content,
                password: Affjax.defaultRequest.password,
                timeout: Affjax.defaultRequest.timeout,
                username: Affjax.defaultRequest.username,
                withCredentials: Affjax.defaultRequest.withCredentials
            };
            return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request(req))(decodeResponse);
        };
    };
};
var head = function (host) {
    return function (path) {
        var req = {
            method: new Data_Either.Left(Data_HTTP_Method.HEAD.value),
            responseFormat: Affjax_ResponseFormat.string,
            url: host + ("/" + path),
            content: Affjax.defaultRequest.content,
            headers: Affjax.defaultRequest.headers,
            password: Affjax.defaultRequest.password,
            timeout: Affjax.defaultRequest.timeout,
            username: Affjax.defaultRequest.username,
            withCredentials: Affjax.defaultRequest.withCredentials
        };
        return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request(req))(decodeResponse);
    };
};
var options = function (host) {
    return function (path) {
        var url = host + ("/" + path);
        var req = {
            method: new Data_Either.Left(Data_HTTP_Method.OPTIONS.value),
            url: url,
            responseFormat: Affjax_ResponseFormat.string,
            content: Affjax.defaultRequest.content,
            headers: Affjax.defaultRequest.headers,
            password: Affjax.defaultRequest.password,
            timeout: Affjax.defaultRequest.timeout,
            username: Affjax.defaultRequest.username,
            withCredentials: Affjax.defaultRequest.withCredentials
        };
        return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request(req))(function (result) {
            return decodeResponse(result);
        });
    };
};
var post = function (host) {
    return function (path) {
        return function (reqBody) {
            var body = new Affjax_RequestBody["String"](reqBody);
            return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.post(Affjax_ResponseFormat.string)(host + path)(new Data_Maybe.Just(body)))(decodeResponse);
        };
    };
};
var post_ = function (host) {
    return function (path) {
        return function (headers) {
            return function (reqBody) {
                var req = {
                    content: Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestBody["String"].create)(reqBody),
                    method: new Data_Either.Left(Data_HTTP_Method.POST.value),
                    url: host + ("/" + path),
                    responseFormat: Affjax_ResponseFormat.string,
                    headers: Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                        return new Affjax_RequestHeader.RequestHeader(v1.value0, v1.value1);
                    })(Payload_Headers.toUnfoldable(Data_Unfoldable.unfoldableArray)(headers)),
                    password: Affjax.defaultRequest.password,
                    timeout: Affjax.defaultRequest.timeout,
                    username: Affjax.defaultRequest.username,
                    withCredentials: Affjax.defaultRequest.withCredentials
                };
                return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request(req))(decodeResponse);
            };
        };
    };
};
var put = function (host) {
    return function (path) {
        return function (reqBody) {
            var body = Data_Maybe.Just.create(new Affjax_RequestBody["String"](reqBody));
            return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.put(Affjax_ResponseFormat.string)(host + ("/" + path))(body))(function (result) {
                return decodeResponse(result);
            });
        };
    };
};
var request = function (host) {
    return {
        get: get(host),
        options: options(host),
        post: post(host),
        put: put(host),
        "delete": $$delete(host),
        head: head(host)
    };
};
var put_ = function (host) {
    return function (path) {
        return function (headers) {
            return function (reqBody) {
                var req = {
                    content: Data_Functor.map(Data_Maybe.functorMaybe)(Affjax_RequestBody["String"].create)(reqBody),
                    method: new Data_Either.Left(Data_HTTP_Method.PUT.value),
                    url: host + ("/" + path),
                    responseFormat: Affjax_ResponseFormat.string,
                    headers: Data_Functor.map(Data_Functor.functorArray)(function (v1) {
                        return new Affjax_RequestHeader.RequestHeader(v1.value0, v1.value1);
                    })(Payload_Headers.toUnfoldable(Data_Unfoldable.unfoldableArray)(headers)),
                    password: Affjax.defaultRequest.password,
                    timeout: Affjax.defaultRequest.timeout,
                    username: Affjax.defaultRequest.username,
                    withCredentials: Affjax.defaultRequest.withCredentials
                };
                return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request(req))(decodeResponse);
            };
        };
    };
};
var bodyEquals = function (dictEq) {
    return function (dictShow) {
        return function (v) {
            return function (v1) {
                if (v1 instanceof Data_Either.Right) {
                    return Test_Unit_Assert.equal(dictEq)(dictShow)(v)(v1.value0.body);
                };
                if (v1 instanceof Data_Either.Left) {
                    return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Expected body, received: " + Data_Show.show(Payload_Client_Response.showClientError)(v1.value0)));
                };
                throw new Error("Failed pattern match at Test.Server.Shell.Util.Payload (line 241, column 1 - line 241, column 91): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    };
};
var assertRes = function (dictShow) {
    return function (dictEq) {
        return function (dictShow1) {
            return function (req) {
                return function (expected) {
                    return Control_Bind.bind(Effect_Aff.bindAff)(req)(function (res) {
                        if (res instanceof Data_Either.Right) {
                            return Test_Unit_Assert.equal(dictEq)(dictShow1)(expected)(res.value0);
                        };
                        if (res instanceof Data_Either.Left) {
                            return Test_Unit.failure("Request failed: " + Data_Show.show(dictShow)(res.value0));
                        };
                        throw new Error("Failed pattern match at Test.Server.Shell.Util.Payload (line 249, column 3 - line 251, column 63): " + [ res.constructor.name ]);
                    });
                };
            };
        };
    };
};
var assertOk = function (dictShow) {
    return function (req) {
        return Control_Bind.bind(Effect_Aff.bindAff)(req)(function (res) {
            if (res instanceof Data_Either.Right) {
                return Test_Unit.success;
            };
            if (res instanceof Data_Either.Left) {
                return Test_Unit.failure("Request failed: " + Data_Show.show(dictShow)(res.value0));
            };
            throw new Error("Failed pattern match at Test.Server.Shell.Util.Payload (line 256, column 3 - line 258, column 63): " + [ res.constructor.name ]);
        });
    };
};
var assertFail = function (req) {
    return Control_Bind.bind(Effect_Aff.bindAff)(req)(function (res) {
        if (res instanceof Data_Either.Right) {
            return Test_Unit.failure("Expected failure but request succeeded");
        };
        if (res instanceof Data_Either.Left) {
            return Test_Unit.success;
        };
        throw new Error("Failed pattern match at Test.Server.Shell.Util.Payload (line 263, column 3 - line 265, column 27): " + [ res.constructor.name ]);
    });
};
var assertBodyEquals = function (s1) {
    return function (s2) {
        return Control_Bind.bind(Effect_Aff.bindAff)(Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Monad_Except_Trans.except(Effect_Aff.applicativeAff)(Data_Argonaut_Parser.jsonParser(s1)))(function (j1) {
            return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(Control_Monad_Except_Trans.except(Effect_Aff.applicativeAff)(Data_Argonaut_Parser.jsonParser(s2)))(function (j2) {
                return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(Data_Eq.eq(Data_Argonaut_Core.eqJson)(j1)(j2));
            });
        })))(function (result) {
            if (result instanceof Data_Either.Left) {
                return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Could not parse body: " + Data_Show.show(Data_Show.showString)(result.value0)));
            };
            if (result instanceof Data_Either.Right) {
                return Test_Unit_Assert.assert("Expected " + (s1 + (", got " + s2)))(result.value0);
            };
            throw new Error("Failed pattern match at Test.Server.Shell.Util.Payload (line 237, column 3 - line 239, column 77): " + [ result.constructor.name ]);
        });
    };
};
var respMatchesJson = function (expected) {
    return function (received) {
        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Test_Unit_Assert.equal(Data_Eq.eqInt)(Data_Show.showInt)(expected.status)(received.status))(function () {
            return assertBodyEquals(expected.body)(received.body);
        });
    };
};
module.exports = {
    withServer: withServer,
    whileServerRuns: whileServerRuns,
    withRoutes: withRoutes,
    request: request,
    get: get,
    get_: get_,
    options: options,
    post: post,
    post_: post_,
    put: put,
    put_: put_,
    "delete": $$delete,
    delete_: delete_,
    head: head,
    decodeResponse: decodeResponse,
    decodeBody: decodeBody,
    unwrapStatusCode: unwrapStatusCode,
    respMatches: respMatches,
    respMatchesStatus: respMatchesStatus,
    respMatchesJson: respMatchesJson,
    assertBodyEquals: assertBodyEquals,
    bodyEquals: bodyEquals,
    assertRes: assertRes,
    assertOk: assertOk,
    assertFail: assertFail
};
