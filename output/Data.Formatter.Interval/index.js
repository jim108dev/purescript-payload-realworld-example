// Generated by purs version 0.13.8
"use strict";
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Formatter_DateTime = require("../Data.Formatter.DateTime/index.js");
var Data_Formatter_Parser_Interval = require("../Data.Formatter.Parser.Interval/index.js");
var Data_Formatter_Parser_Utils = require("../Data.Formatter.Parser.Utils/index.js");
var Data_Identity = require("../Data.Identity/index.js");
var Data_Int = require("../Data.Int/index.js");
var Data_Interval = require("../Data.Interval/index.js");
var Data_Interval_Duration = require("../Data.Interval.Duration/index.js");
var Data_Interval_Duration_Iso = require("../Data.Interval.Duration.Iso/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Text_Parsing_Parser_String = require("../Text.Parsing.Parser.String/index.js");
var unformatRecurringInterval = Data_Formatter_Parser_Utils.runP(Text_Parsing_Parser_String.stringLikeString)(Data_Formatter_Parser_Interval.parseRecurringInterval(Data_Formatter_Parser_Interval.parseIsoDuration)(Data_Formatter_Parser_Interval.parseDateTime(Data_Identity.monadIdentity)));
var unformatInterval = Data_Formatter_Parser_Utils.runP(Text_Parsing_Parser_String.stringLikeString)(Data_Formatter_Parser_Interval.parseInterval(Data_Formatter_Parser_Interval.parseIsoDuration)(Data_Formatter_Parser_Interval.parseDateTime(Data_Identity.monadIdentity)));
var formatNumber = function (n) {
    var $6 = Data_Int.toNumber(Data_Int.floor(n)) === n;
    if ($6) {
        return Data_Show.show(Data_Show.showInt)(Data_Int.floor(n));
    };
    return Data_Show.show(Data_Show.showNumber)(n);
};
var formatInteger = Data_Show.show(Data_Show.showInt);
var formatDuration = function (v) {
    var timeComponentsToStr = [ new Data_Tuple.Tuple(Data_Interval_Duration.Hour.value, "H"), new Data_Tuple.Tuple(Data_Interval_Duration.Minute.value, "M"), new Data_Tuple.Tuple(Data_Interval_Duration.Second.value, "S") ];
    var ifmempty = function (v1) {
        return function (a) {
            if (a === Data_Monoid.mempty(Data_Monoid.monoidString)) {
                return Data_Monoid.mempty(Data_Monoid.monoidString);
            };
            return v1(a);
        };
    };
    var formatComponent = function (designator) {
        return function (num) {
            return formatNumber(num) + designator;
        };
    };
    var dateComponentsToStr = [ new Data_Tuple.Tuple(Data_Interval_Duration.Year.value, "Y"), new Data_Tuple.Tuple(Data_Interval_Duration.Month.value, "M"), new Data_Tuple.Tuple(Data_Interval_Duration.Week.value, "W"), new Data_Tuple.Tuple(Data_Interval_Duration.Day.value, "D") ];
    var componentToString = function (v1) {
        return Data_Maybe.maybe("")(formatComponent(v1.value1))(Data_Map_Internal.lookup(Data_Interval_Duration.ordDurationComponent)(v1.value0)(v));
    };
    var datePart = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(componentToString)(dateComponentsToStr);
    var timePart = ifmempty(function (v1) {
        return "T" + v1;
    })(Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(componentToString)(timeComponentsToStr));
    return "P" + (datePart + timePart);
};
var formatIsoDuration = function ($24) {
    return formatDuration(Data_Interval_Duration_Iso.unIsoDuration($24));
};
var formatDateTime = Data_Formatter_DateTime.format(Data_Formatter_Parser_Interval.extendedDateTimeFormatInUTC);
var formatInterval = function (v) {
    if (v instanceof Data_Interval.StartEnd) {
        return formatDateTime(v.value0) + ("/" + formatDateTime(v.value1));
    };
    if (v instanceof Data_Interval.DurationEnd) {
        return formatIsoDuration(v.value0) + ("/" + formatDateTime(v.value1));
    };
    if (v instanceof Data_Interval.StartDuration) {
        return formatDateTime(v.value0) + ("/" + formatIsoDuration(v.value1));
    };
    if (v instanceof Data_Interval.DurationOnly) {
        return formatIsoDuration(v.value0);
    };
    throw new Error("Failed pattern match at Data.Formatter.Interval (line 26, column 1 - line 26, column 58): " + [ v.constructor.name ]);
};
var formatRecurringInterval = function (v) {
    return "R" + (Data_Maybe.maybe("")(formatInteger)(v.value0) + ("/" + formatInterval(v.value1)));
};
module.exports = {
    unformatRecurringInterval: unformatRecurringInterval,
    unformatInterval: unformatInterval,
    formatRecurringInterval: formatRecurringInterval,
    formatInterval: formatInterval
};
