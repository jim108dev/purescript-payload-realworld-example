// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Monad_Error_Class = require("../Control.Monad.Error.Class/index.js");
var Control_Monad_Except_Trans = require("../Control.Monad.Except.Trans/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Payload_ContentType = require("../Payload.ContentType/index.js");
var Payload_Headers = require("../Payload.Headers/index.js");
var Payload_ResponseTypes = require("../Payload.ResponseTypes/index.js");
var Payload_Server_Status = require("../Payload.Server.Status/index.js");
var Simple_JSON = require("../Simple.JSON/index.js");
var ToSpecResponse = function (toSpecResponse) {
    this.toSpecResponse = toSpecResponse;
};
var EncodeResponse = function (encodeResponse) {
    this.encodeResponse = encodeResponse;
};
var updateStatus = function (f) {
    return function (v) {
        return {
            status: f(v.status),
            headers: v.headers,
            body: v.body
        };
    };
};
var updateHeaders = function (f) {
    return function (v) {
        return {
            status: v.status,
            headers: f(v.headers),
            body: v.body
        };
    };
};
var updateBody = function (f) {
    return function (v) {
        return {
            status: v.status,
            headers: v.headers,
            body: f(v.body)
        };
    };
};
var toSpecResponseResponse = function (dictEncodeResponse) {
    return new ToSpecResponse(function (v) {
        return function (res) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(res);
        };
    });
};
var toSpecResponseFail = function (dictFail) {
    return new ToSpecResponse(function (res) {
        return res;
    });
};
var toSpecResponseEitherFailureResponse = function (dictEncodeResponse) {
    return new ToSpecResponse(function (v) {
        return function (v1) {
            if (v1 instanceof Data_Either.Left) {
                return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(v1.value0);
            };
            if (v1 instanceof Data_Either.Right) {
                return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(v1.value0);
            };
            throw new Error("Failed pattern match at Payload.Server.Response (line 134, column 6 - line 138, column 42): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var toSpecResponse = function (dict) {
    return dict.toSpecResponse;
};
var status = function (s) {
    return function (body) {
        return {
            status: s,
            headers: Payload_Headers.empty,
            body: body
        };
    };
};
var switchingProtocols = status(Payload_Server_Status.switchingProtocols);
var temporaryRedirect = status(Payload_Server_Status.temporaryRedirect);
var tooManyRequests = status(Payload_Server_Status.tooManyRequests);
var unauthorized = status(Payload_Server_Status.unauthorized);
var unavailableForLegalReasons = status(Payload_Server_Status.unavailableForLegalReasons);
var unprocessableEntity = status(Payload_Server_Status.unprocessableEntity);
var unsupportedMediaType = status(Payload_Server_Status.unsupportedMediaType);
var upgradeRequired = status(Payload_Server_Status.upgradeRequired);
var uriTooLong = status(Payload_Server_Status.uriTooLong);
var useProxy = status(Payload_Server_Status.useProxy);
var variantAlsoNegotiates = status(Payload_Server_Status.variantAlsoNegotiates);
var setStatus = function (s) {
    return Data_Newtype.over(Payload_ResponseTypes.newtypeResponse)(Payload_ResponseTypes.newtypeResponse)(Payload_ResponseTypes.Response)(function (v) {
        return {
            status: s,
            body: v.body,
            headers: v.headers
        };
    });
};
var setHeaders = function (headers) {
    return Data_Newtype.over(Payload_ResponseTypes.newtypeResponse)(Payload_ResponseTypes.newtypeResponse)(Payload_ResponseTypes.Response)(function (v) {
        return {
            headers: headers,
            body: v.body,
            status: v.status
        };
    });
};
var setBody = function (body) {
    return Data_Newtype.over(Payload_ResponseTypes.newtypeResponse)(Payload_ResponseTypes.newtypeResponse)(Payload_ResponseTypes.Response)(function (v) {
        return {
            body: body,
            headers: v.headers,
            status: v.status
        };
    });
};
var serviceUnavailable = status(Payload_Server_Status.serviceUnavailable);
var seeOther = status(Payload_Server_Status.seeOther);
var resetContent = status(Payload_Server_Status.resetContent);
var requestTimeout = status(Payload_Server_Status.requestTimeout);
var requestHeaderFieldsTooLarge = status(Payload_Server_Status.requestHeaderFieldsTooLarge);
var rangeNotSatisfiable = status(Payload_Server_Status.rangeNotSatisfiable);
var proxyAuthenticationRequired = status(Payload_Server_Status.proxyAuthenticationRequired);
var processing = status(Payload_Server_Status.processing);
var preconditionRequired = status(Payload_Server_Status.preconditionRequired);
var preconditionFailed = status(Payload_Server_Status.preconditionFailed);
var permanentRedirect = status(Payload_Server_Status.permanentRedirect);
var paymentRequired = status(Payload_Server_Status.paymentRequired);
var payloadTooLarge = status(Payload_Server_Status.payloadTooLarge);
var partialContent = status(Payload_Server_Status.partialContent);
var ok = status(Payload_Server_Status.ok);
var toSpecResponseEitherFailureVal = function (dictEncodeResponse) {
    return new ToSpecResponse(function (v) {
        return function (v1) {
            if (v1 instanceof Data_Either.Left) {
                return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(v1.value0);
            };
            if (v1 instanceof Data_Either.Right) {
                return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(ok(v1.value0));
            };
            throw new Error("Failed pattern match at Payload.Server.Response (line 129, column 1 - line 133, column 47): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var toSpecResponseIdentity = function (dictEncodeResponse) {
    return new ToSpecResponse(function (v) {
        return function (res) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(ok(res));
        };
    });
};
var notModified = status(Payload_Server_Status.notModified);
var notImplemented = status(Payload_Server_Status.notImplemented);
var notFound = status(Payload_Server_Status.notFound);
var notExtended = status(Payload_Server_Status.notExtended);
var notAcceptable = status(Payload_Server_Status.notAcceptable);
var nonAuthoritativeInformation = status(Payload_Server_Status.nonAuthoritativeInformation);
var noContent = status(Payload_Server_Status.noContent);
var networkAuthenticationRequired = status(Payload_Server_Status.networkAuthenticationRequired);
var multipleChoices = status(Payload_Server_Status.multipleChoices);
var multiStatus = status(Payload_Server_Status.multiStatus);
var movedPermanently = status(Payload_Server_Status.movedPermanently);
var misdirectedRequest = status(Payload_Server_Status.misdirectedRequest);
var methodNotAllowed = status(Payload_Server_Status.methodNotAllowed);
var loopDetected = status(Payload_Server_Status.loopDetected);
var locked = status(Payload_Server_Status.locked);
var lengthRequired = status(Payload_Server_Status.lengthRequired);
var internalError = status(Payload_Server_Status.internalError);
var insufficientStorage = status(Payload_Server_Status.insufficientStorage);
var imUsed = status(Payload_Server_Status.imUsed);
var imATeapot = status(Payload_Server_Status.imATeapot);
var httpVersionNotSupported = status(Payload_Server_Status.httpVersionNotSupported);
var gone = status(Payload_Server_Status.gone);
var gatewayTimeout = status(Payload_Server_Status.gatewayTimeout);
var found = status(Payload_Server_Status.found);
var forbidden = status(Payload_Server_Status.forbidden);
var failedDependency = status(Payload_Server_Status.failedDependency);
var expectationFailed = status(Payload_Server_Status.expectationFailed);
var encodeResponseString = new EncodeResponse(function (v) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))({
        status: v.status,
        headers: Payload_Headers.setIfNotDefined("content-type")(Payload_ContentType.plain)(v.headers),
        body: new Payload_ResponseTypes.StringBody(v.body)
    });
});
var encodeResponseStream = function (dictTypeEquals) {
    return new EncodeResponse(function (v) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))({
            status: v.status,
            headers: Payload_Headers.setIfNotDefined("content-type")(Payload_ContentType.plain)(v.headers),
            body: new Payload_ResponseTypes.StreamBody(v.body)
        });
    });
};
var encodeResponseResponseBody = new EncodeResponse(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff)));
var encodeResponseJson = function (dictWriteForeign) {
    return new EncodeResponse(function (v) {
        return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(Payload_ResponseTypes.Response({
            status: v.status,
            headers: Payload_Headers.setIfNotDefined("content-type")(Payload_ContentType.json)(v.headers),
            body: new Payload_ResponseTypes.StringBody(Simple_JSON.writeJSON(dictWriteForeign)(v.body))
        }));
    });
};
var encodeResponseEmpty = new EncodeResponse(function (v) {
    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))({
        status: v.status,
        headers: v.headers,
        body: Payload_ResponseTypes.EmptyBody.value
    });
});
var encodeResponse = function (dict) {
    return dict.encodeResponse;
};
var encodeResponseArray = function (dictWriteForeign) {
    return new EncodeResponse(function (v) {
        return encodeResponse(encodeResponseJson(dictWriteForeign))(Payload_ResponseTypes.Response({
            status: v.status,
            headers: v.headers,
            body: v.body
        }));
    });
};
var encodeResponseMaybe = function (dictEncodeResponse) {
    return new EncodeResponse(function (v) {
        if (v.body instanceof Data_Maybe.Nothing) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))({
                status: Payload_Server_Status.notFound,
                headers: Payload_Headers.empty,
                body: Payload_ResponseTypes.EmptyBody.value
            });
        };
        if (v.body instanceof Data_Maybe.Just) {
            return encodeResponse(dictEncodeResponse)({
                status: v.status,
                headers: v.headers,
                body: v.body.value0
            });
        };
        throw new Error("Failed pattern match at Payload.Server.Response (line 228, column 6 - line 236, column 28): " + [ v.constructor.name ]);
    });
};
var encodeResponseRecord = function (dictWriteForeign) {
    return new EncodeResponse(function (v) {
        return encodeResponse(encodeResponseJson(dictWriteForeign))(Payload_ResponseTypes.Response({
            status: v.status,
            headers: v.headers,
            body: v.body
        }));
    });
};
var toSpecResponseEitherResponseResponse = function (dictEncodeResponse) {
    return new ToSpecResponse(function (v) {
        return function (v1) {
            if (v1 instanceof Data_Either.Left) {
                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(encodeResponse(dictEncodeResponse)(v1.value0))(function (raw) {
                    return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(new Payload_ResponseTypes["Error"](raw));
                });
            };
            if (v1 instanceof Data_Either.Right) {
                return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(v1.value0);
            };
            throw new Error("Failed pattern match at Payload.Server.Response (line 146, column 6 - line 152, column 42): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var toSpecResponseEitherResponseVal = function (dictEncodeResponse) {
    return new ToSpecResponse(function (v) {
        return function (v1) {
            if (v1 instanceof Data_Either.Left) {
                return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(encodeResponse(dictEncodeResponse)(v1.value0))(function (raw) {
                    return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(new Payload_ResponseTypes["Error"](raw));
                });
            };
            if (v1 instanceof Data_Either.Right) {
                return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(ok(v1.value0));
            };
            throw new Error("Failed pattern match at Payload.Server.Response (line 139, column 6 - line 145, column 47): " + [ v.constructor.name, v1.constructor.name ]);
        };
    });
};
var toSpecResponseEitherValResponse = function (dictEncodeResponse) {
    return function (dictEncodeResponse1) {
        return new ToSpecResponse(function (v) {
            return function (v1) {
                if (v1 instanceof Data_Either.Left) {
                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(encodeResponse(dictEncodeResponse1)(internalError(v1.value0)))(function (raw) {
                        return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(new Payload_ResponseTypes["Error"](raw));
                    });
                };
                if (v1 instanceof Data_Either.Right) {
                    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(v1.value0);
                };
                throw new Error("Failed pattern match at Payload.Server.Response (line 161, column 6 - line 168, column 42): " + [ v.constructor.name, v1.constructor.name ]);
            };
        });
    };
};
var toSpecResponseEitherValVal = function (dictEncodeResponse) {
    return function (dictEncodeResponse1) {
        return new ToSpecResponse(function (v) {
            return function (v1) {
                if (v1 instanceof Data_Either.Left) {
                    return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff))(encodeResponse(dictEncodeResponse1)(internalError(v1.value0)))(function (raw) {
                        return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff))(new Payload_ResponseTypes["Error"](raw));
                    });
                };
                if (v1 instanceof Data_Either.Right) {
                    return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff))(ok(v1.value0));
                };
                throw new Error("Failed pattern match at Payload.Server.Response (line 153, column 6 - line 160, column 47): " + [ v.constructor.name, v1.constructor.name ]);
            };
        });
    };
};
var created = status(Payload_Server_Status.created);
var $$continue = status(Payload_Server_Status["continue"]);
var conflict = status(Payload_Server_Status.conflict);
var badRequest = status(Payload_Server_Status.badRequest);
var badGateway = status(Payload_Server_Status.badGateway);
var alreadyReported = status(Payload_Server_Status.alreadyReported);
var accepted = status(Payload_Server_Status.accepted);
module.exports = {
    status: status,
    setStatus: setStatus,
    updateStatus: updateStatus,
    setBody: setBody,
    updateBody: updateBody,
    setHeaders: setHeaders,
    updateHeaders: updateHeaders,
    ToSpecResponse: ToSpecResponse,
    toSpecResponse: toSpecResponse,
    EncodeResponse: EncodeResponse,
    encodeResponse: encodeResponse,
    "continue": $$continue,
    switchingProtocols: switchingProtocols,
    processing: processing,
    ok: ok,
    created: created,
    accepted: accepted,
    nonAuthoritativeInformation: nonAuthoritativeInformation,
    noContent: noContent,
    resetContent: resetContent,
    partialContent: partialContent,
    multiStatus: multiStatus,
    alreadyReported: alreadyReported,
    imUsed: imUsed,
    multipleChoices: multipleChoices,
    movedPermanently: movedPermanently,
    found: found,
    seeOther: seeOther,
    notModified: notModified,
    useProxy: useProxy,
    temporaryRedirect: temporaryRedirect,
    permanentRedirect: permanentRedirect,
    badRequest: badRequest,
    unauthorized: unauthorized,
    paymentRequired: paymentRequired,
    forbidden: forbidden,
    notFound: notFound,
    methodNotAllowed: methodNotAllowed,
    notAcceptable: notAcceptable,
    proxyAuthenticationRequired: proxyAuthenticationRequired,
    requestTimeout: requestTimeout,
    conflict: conflict,
    gone: gone,
    lengthRequired: lengthRequired,
    preconditionFailed: preconditionFailed,
    payloadTooLarge: payloadTooLarge,
    uriTooLong: uriTooLong,
    unsupportedMediaType: unsupportedMediaType,
    rangeNotSatisfiable: rangeNotSatisfiable,
    expectationFailed: expectationFailed,
    imATeapot: imATeapot,
    misdirectedRequest: misdirectedRequest,
    unprocessableEntity: unprocessableEntity,
    locked: locked,
    failedDependency: failedDependency,
    upgradeRequired: upgradeRequired,
    preconditionRequired: preconditionRequired,
    tooManyRequests: tooManyRequests,
    requestHeaderFieldsTooLarge: requestHeaderFieldsTooLarge,
    unavailableForLegalReasons: unavailableForLegalReasons,
    internalError: internalError,
    notImplemented: notImplemented,
    badGateway: badGateway,
    serviceUnavailable: serviceUnavailable,
    gatewayTimeout: gatewayTimeout,
    httpVersionNotSupported: httpVersionNotSupported,
    variantAlsoNegotiates: variantAlsoNegotiates,
    insufficientStorage: insufficientStorage,
    loopDetected: loopDetected,
    notExtended: notExtended,
    networkAuthenticationRequired: networkAuthenticationRequired,
    toSpecResponseEitherFailureVal: toSpecResponseEitherFailureVal,
    toSpecResponseEitherFailureResponse: toSpecResponseEitherFailureResponse,
    toSpecResponseEitherResponseVal: toSpecResponseEitherResponseVal,
    toSpecResponseEitherResponseResponse: toSpecResponseEitherResponseResponse,
    toSpecResponseEitherValVal: toSpecResponseEitherValVal,
    toSpecResponseEitherValResponse: toSpecResponseEitherValResponse,
    toSpecResponseResponse: toSpecResponseResponse,
    toSpecResponseIdentity: toSpecResponseIdentity,
    toSpecResponseFail: toSpecResponseFail,
    encodeResponseResponseBody: encodeResponseResponseBody,
    encodeResponseRecord: encodeResponseRecord,
    encodeResponseArray: encodeResponseArray,
    encodeResponseJson: encodeResponseJson,
    encodeResponseString: encodeResponseString,
    encodeResponseStream: encodeResponseStream,
    encodeResponseMaybe: encodeResponseMaybe,
    encodeResponseEmpty: encodeResponseEmpty
};
