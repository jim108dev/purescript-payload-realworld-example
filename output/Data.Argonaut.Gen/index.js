// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Lazy = require("../Control.Lazy/index.js");
var Control_Monad_Gen = require("../Control.Monad.Gen/index.js");
var Control_Monad_Gen_Class = require("../Control.Monad.Gen.Class/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_NonEmpty = require("../Data.NonEmpty/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_String_Gen = require("../Data.String.Gen/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var genJson = function (dictMonadGen) {
    return function (dictMonadRec) {
        return function (dictLazy) {
            var genJString = Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_Core.fromString)(Data_String_Gen.genUnicodeString(dictMonadRec)(dictMonadGen));
            var genJNumber = Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_Core.fromNumber)(Control_Monad_Gen_Class.chooseFloat(dictMonadGen)(-1000000.0)(1000000.0));
            var genJBoolean = Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_Core.fromBoolean)(Control_Monad_Gen_Class.chooseBool(dictMonadGen));
            var genLeaf = Control_Monad_Gen.oneOf(dictMonadGen)(Data_NonEmpty.foldable1NonEmpty(Data_Foldable.foldableArray))(new Data_NonEmpty.NonEmpty(Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Argonaut_Core.jsonNull), [ genJBoolean, genJNumber, genJString ]));
            var genJArray = Data_Functor.map((((dictMonadGen.Monad0()).Bind1()).Apply0()).Functor0())(Data_Argonaut_Core.fromArray)(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_Unfoldable.unfoldableArray)(Control_Lazy.defer(dictLazy)(function (v) {
                return genJson(dictMonadGen)(dictMonadRec)(dictLazy);
            })));
            var extendJObj = function (obj) {
                return function (k) {
                    return Control_Bind.bind((dictMonadGen.Monad0()).Bind1())(genJson(dictMonadGen)(dictMonadRec)(dictLazy))(function (v) {
                        return Control_Applicative.pure((dictMonadGen.Monad0()).Applicative0())(Data_Argonaut_Core.caseJsonObject(Data_Argonaut_Core.jsonSingletonObject(k)(v))((function () {
                            var $6 = Foreign_Object.insert(k)(v);
                            return function ($7) {
                                return Data_Argonaut_Core.fromObject($6($7));
                            };
                        })())(obj));
                    });
                };
            };
            var genJObject = Control_Bind.bindFlipped((dictMonadGen.Monad0()).Bind1())(Data_Array.foldM(dictMonadGen.Monad0())(extendJObj)(Data_Argonaut_Core.jsonEmptyObject))(Control_Monad_Gen.unfoldable(dictMonadRec)(dictMonadGen)(Data_Unfoldable.unfoldableArray)(Data_String_Gen.genUnicodeString(dictMonadRec)(dictMonadGen)));
            var genJson$prime = function (size) {
                if (size > 1) {
                    return Control_Monad_Gen_Class.resize(dictMonadGen)(function (v) {
                        return v - 1 | 0;
                    })(Control_Monad_Gen.choose(dictMonadGen)(genJArray)(genJObject));
                };
                if (Data_Boolean.otherwise) {
                    return genLeaf;
                };
                throw new Error("Failed pattern match at Data.Argonaut.Gen (line 20, column 3 - line 20, column 30): " + [ size.constructor.name ]);
            };
            return Control_Monad_Gen_Class.resize(dictMonadGen)(Data_Ord.min(Data_Ord.ordInt)(5))(Control_Monad_Gen_Class.sized(dictMonadGen)(genJson$prime));
        };
    };
};
module.exports = {
    genJson: genJson
};
