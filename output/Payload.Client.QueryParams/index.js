// Generated by purs version 0.13.8
"use strict";
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Payload_Client_Internal_EncodeUri = require("../Payload.Client.Internal.EncodeUri/index.js");
var EncodeQueryParamMulti = function (encodeQueryParamMulti) {
    this.encodeQueryParamMulti = encodeQueryParamMulti;
};
var EncodeQueryParam = function (encodeQueryParam) {
    this.encodeQueryParam = encodeQueryParam;
};
var encodeQueryParamString = new EncodeQueryParam(function (s) {
    return new Data_Maybe.Just(Payload_Client_Internal_EncodeUri.encodeUri(s));
});
var encodeQueryParamMultiObjectArrayString = new EncodeQueryParamMulti(function (o) {
    var joinParams = Data_String_Common.joinWith("&");
    var encodeVal = function (key) {
        return function (val) {
            return Payload_Client_Internal_EncodeUri.encodeUri(key) + ("=" + Payload_Client_Internal_EncodeUri.encodeUri(val));
        };
    };
    var encodeArray = function (v) {
        return joinParams(Data_Functor.map(Data_Functor.functorArray)(encodeVal(v.value0))(v.value1));
    };
    return new Data_Maybe.Just(joinParams(Data_Functor.map(Data_Functor.functorArray)(encodeArray)(Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(o))));
});
var encodeQueryParamMulti = function (dict) {
    return dict.encodeQueryParamMulti;
};
var encodeQueryParamInt = new EncodeQueryParam(function (val) {
    return new Data_Maybe.Just(Data_Show.show(Data_Show.showInt)(val));
});
var encodeQueryParamBoolean = new EncodeQueryParam(function (v) {
    if (v) {
        return new Data_Maybe.Just("true");
    };
    if (!v) {
        return new Data_Maybe.Just("false");
    };
    throw new Error("Failed pattern match at Payload.Client.QueryParams (line 26, column 1 - line 28, column 40): " + [ v.constructor.name ]);
});
var encodeQueryParam = function (dict) {
    return dict.encodeQueryParam;
};
var encodeQueryParamMaybe = function (dictEncodeQueryParam) {
    return new EncodeQueryParam(function (v) {
        if (v instanceof Data_Maybe.Just) {
            return encodeQueryParam(dictEncodeQueryParam)(v.value0);
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Payload.Client.QueryParams (line 30, column 1 - line 32, column 37): " + [ v.constructor.name ]);
    });
};
module.exports = {
    EncodeQueryParam: EncodeQueryParam,
    encodeQueryParam: encodeQueryParam,
    EncodeQueryParamMulti: EncodeQueryParamMulti,
    encodeQueryParamMulti: encodeQueryParamMulti,
    encodeQueryParamInt: encodeQueryParamInt,
    encodeQueryParamString: encodeQueryParamString,
    encodeQueryParamBoolean: encodeQueryParamBoolean,
    encodeQueryParamMaybe: encodeQueryParamMaybe,
    encodeQueryParamMultiObjectArrayString: encodeQueryParamMultiObjectArrayString
};
