// Generated by purs version 0.13.8
"use strict";
var Affjax = require("../Affjax/index.js");
var Affjax_RequestBody = require("../Affjax.RequestBody/index.js");
var Affjax_RequestHeader = require("../Affjax.RequestHeader/index.js");
var Affjax_ResponseFormat = require("../Affjax.ResponseFormat/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HTTP_Method = require("../Data.HTTP.Method/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_MediaType = require("../Data.MediaType/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Utils = require("../Data.String.Utils/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect_Aff = require("../Effect.Aff/index.js");
var Effect_Class = require("../Effect.Class/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Payload_Client_DecodeResponse = require("../Payload.Client.DecodeResponse/index.js");
var Payload_Client_EncodeBody = require("../Payload.Client.EncodeBody/index.js");
var Payload_Client_Internal_Query = require("../Payload.Client.Internal.Query/index.js");
var Payload_Client_Internal_Url = require("../Payload.Client.Internal.Url/index.js");
var Payload_Client_Options = require("../Payload.Client.Options/index.js");
var Payload_Client_Response = require("../Payload.Client.Response/index.js");
var Payload_ContentType = require("../Payload.ContentType/index.js");
var Payload_Debug = require("../Payload.Debug/index.js");
var Payload_Headers = require("../Payload.Headers/index.js");
var Payload_ResponseTypes = require("../Payload.ResponseTypes/index.js");
var Record = require("../Record/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var Type_Proxy = require("../Type.Proxy/index.js");
var Queryable = function (request) {
    this.request = request;
};
var EncodeUrlWithParams = function (encodeUrlWithParams) {
    this.encodeUrlWithParams = encodeUrlWithParams;
};
var EncodeOptionalQuery = function (encodeOptionalQuery) {
    this.encodeOptionalQuery = encodeOptionalQuery;
};
var EncodeOptionalBody = function (encodeOptionalBody) {
    this.encodeOptionalBody = encodeOptionalBody;
};
var stripTrailingSlash = function (s) {
    var v = Data_String_CodeUnits.stripSuffix("/")(s);
    if (v instanceof Data_Maybe.Just) {
        return v.value0;
    };
    if (v instanceof Data_Maybe.Nothing) {
        return s;
    };
    throw new Error("Failed pattern match at Payload.Client.Queryable (line 447, column 24 - line 449, column 15): " + [ v.constructor.name ]);
};
var request = function (dict) {
    return dict.request;
};
var printRequest = function (v) {
    var printMethod = function (v1) {
        if (v1 instanceof Data_Either.Left) {
            return Data_Show.show(Data_HTTP_Method.showMethod)(v1.value0);
        };
        if (v1 instanceof Data_Either.Right) {
            return Data_HTTP_Method.unCustomMethod(v1.value0);
        };
        throw new Error("Failed pattern match at Payload.Client.Queryable (line 284, column 5 - line 284, column 56): " + [ v1.constructor.name ]);
    };
    var printHeader = function (v1) {
        if (v1 instanceof Affjax_RequestHeader.Accept) {
            return "accept " + Data_Show.show(Data_MediaType.showMediaType)(v1.value0);
        };
        if (v1 instanceof Affjax_RequestHeader.ContentType) {
            return "content-type " + Data_Show.show(Data_MediaType.showMediaType)(v1.value0);
        };
        if (v1 instanceof Affjax_RequestHeader.RequestHeader) {
            return v1.value0 + (" " + v1.value1);
        };
        throw new Error("Failed pattern match at Payload.Client.Queryable (line 294, column 5 - line 294, column 43): " + [ v1.constructor.name ]);
    };
    var printHeaders = function (v1) {
        if (v1.length === 0) {
            return "";
        };
        var headersStr = Data_String_Common.joinWith("  \x0a")(Data_Functor.map(Data_Functor.functorArray)(printHeader)(v1));
        return headersStr + "\x0a";
    };
    var printContent = function (v1) {
        if (v1 instanceof Data_Maybe.Just && v1.value0 instanceof Affjax_RequestBody["String"]) {
            return v1.value0.value0 + "\x0a";
        };
        if (v1 instanceof Data_Maybe.Just) {
            return "(non-String body)\x0a";
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            return "";
        };
        throw new Error("Failed pattern match at Payload.Client.Queryable (line 299, column 5 - line 299, column 60): " + [ v1.constructor.name ]);
    };
    return "DEBUG Request:\x0a" + ("--------------------------------\x0a" + (printMethod(v.method) + (" " + (v.url + ("\x0a" + (printHeaders(v.headers) + (printContent(v.content) + "--------------------------------\x0a")))))));
};
var lookupHeader = function (key) {
    return function (headers) {
        var matchingHeaderVal = function (v) {
            if (v.value0 === "content-type") {
                return new Data_Maybe.Just(v.value1);
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match at Payload.Client.Queryable (line 337, column 5 - line 337, column 56): " + [ v.constructor.name ]);
        };
        return Data_Foldable.findMap(Data_Foldable.foldableArray)(matchingHeaderVal)(headers);
    };
};
var printResponse = function (v) {
    if (v instanceof Data_Either.Left) {
        return "DEBUG Response:\x0a" + ("--------------------------------\x0a" + (Affjax.printError(v.value0) + "--------------------------------\x0a"));
    };
    if (v instanceof Data_Either.Right) {
        var printStatus = function (v1) {
            return Data_Show.show(Data_Show.showInt)(v1);
        };
        var printHeader = function (v1) {
            return v1.value0 + (" " + v1.value1);
        };
        var printHeaders = function (v1) {
            if (v1.length === 0) {
                return "";
            };
            return Data_String_Common.joinWith("  \x0a")(Data_Functor.map(Data_Functor.functorArray)(printHeader)(v1)) + "\x0a";
        };
        var contentIsJson = Data_Maybe.maybe(false)(Data_String_Utils.startsWith("application/json"))(lookupHeader("content-type")(v.value0.headers));
        var printBody = function (b) {
            if (contentIsJson) {
                return Payload_Debug.formatJsonString(b);
            };
            if (Data_Boolean.otherwise) {
                return b;
            };
            throw new Error("Failed pattern match at Payload.Client.Queryable (line 330, column 5 - line 330, column 34): " + [ b.constructor.name ]);
        };
        return "DEBUG Response:\x0a" + ("--------------------------------\x0a" + ("Status: " + (printStatus(v.value0.status) + (" " + (v.value0.statusText + ("\x0a" + ("Headers:\x0a" + (printHeaders(v.value0.headers) + ("\x0a" + ("Body:\x0a" + (printBody(v.value0.body) + ("\x0a" + "--------------------------------\x0a"))))))))))));
    };
    throw new Error("Failed pattern match at Payload.Client.Queryable (line 304, column 1 - line 304, column 64): " + [ v.constructor.name ]);
};
var encodeUrlWithParams = function (dict) {
    return dict.encodeUrlWithParams;
};
var encodeUrl = function (dictEncodeUrl) {
    return function (opts) {
        return function (url) {
            return function (params) {
                var path = Payload_Client_Internal_Url.encodeUrl(dictEncodeUrl)(url)(params);
                var baseUrl = stripTrailingSlash(opts.baseUrl);
                return baseUrl + path;
            };
        };
    };
};
var encodeUrlWithParamsDefined = function (dictTypeEquals) {
    return function (dictListToRow) {
        return function (dictEncodeUrl) {
            return new EncodeUrlWithParams(function (options) {
                return function (url) {
                    return function (params) {
                        return function (payload) {
                            return encodeUrl(dictEncodeUrl)(options)(url)((Type_Equality.to(dictTypeEquals)(payload)).params);
                        };
                    };
                };
            });
        };
    };
};
var encodeUrlWithParamsUndefined = function (dictEncodeUrl) {
    return new EncodeUrlWithParams(function (options) {
        return function (url) {
            return function (v) {
                return function (payload) {
                    return encodeUrl(dictEncodeUrl)(options)(url)({});
                };
            };
        };
    });
};
var encodeOptionalQueryUndefined = function (dictEncodeQuery) {
    return new EncodeOptionalQuery(function (url) {
        return function (v) {
            return function (payload) {
                return Payload_Client_Internal_Query.encodeQuery(dictEncodeQuery)(url)({});
            };
        };
    });
};
var encodeOptionalQueryDefined = function (dictTypeEquals) {
    return function (dictEncodeQuery) {
        return new EncodeOptionalQuery(function (url) {
            return function (v) {
                return function (payload) {
                    return Payload_Client_Internal_Query.encodeQuery(dictEncodeQuery)(url)((Type_Equality.to(dictTypeEquals)(payload)).query);
                };
            };
        });
    };
};
var encodeOptionalQuery = function (dict) {
    return dict.encodeOptionalQuery;
};
var encodeOptionalBodyUndefined = new EncodeOptionalBody(function (v) {
    return function (payload) {
        return Data_Maybe.Nothing.value;
    };
});
var encodeOptionalBodyDefined = function (dictTypeEquals) {
    return function (dictEncodeBody) {
        return new EncodeOptionalBody(function (v) {
            return function (payload) {
                return Data_Maybe.Just.create(Affjax_RequestBody["String"].create(Payload_Client_EncodeBody.encodeBody(dictEncodeBody)((Type_Equality.to(dictTypeEquals)(payload)).body)));
            };
        });
    };
};
var encodeOptionalBody = function (dict) {
    return dict.encodeOptionalBody;
};
var asHeaderTuple = function (v) {
    return new Data_Tuple.Tuple(v.value0, v.value1);
};
var statusAndHeaders = function (res) {
    var unwrapStatus = function (v) {
        return v;
    };
    var status = {
        code: unwrapStatus(res.status),
        reason: res.statusText
    };
    var headers = Payload_Headers.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(asHeaderTuple)(res.headers));
    return {
        status: status,
        headers: headers
    };
};
var asPayloadResponse = function (res) {
    var rest = statusAndHeaders(res);
    return Record.insert(new Data_Symbol.IsSymbol(function () {
        return "body";
    }))()()(Data_Symbol.SProxy.value)(res.body)(rest);
};
var decodeError = function (res) {
    return function (error) {
        return new Payload_Client_Response.DecodeError({
            error: error,
            response: asPayloadResponse(res)
        });
    };
};
var bodyResponse = function (res) {
    return function (body) {
        var rest = statusAndHeaders(res);
        return Record.insert(new Data_Symbol.IsSymbol(function () {
            return "body";
        }))()()(Data_Symbol.SProxy.value)(body)(rest);
    };
};
var decodeAffjaxResponse = function (dictDecodeResponse) {
    return function (v) {
        if (v instanceof Data_Either.Left) {
            return new Data_Either.Left(new Payload_Client_Response.RequestError({
                message: Affjax.printError(v.value0)
            }));
        };
        if (v instanceof Data_Either.Right && (v.value0.status >= 200 && v.value0.status < 300)) {
            var v1 = Payload_Client_DecodeResponse.decodeResponse(dictDecodeResponse)(new Payload_ResponseTypes.StringBody(v.value0.body));
            if (v1 instanceof Data_Either.Right) {
                return new Data_Either.Right(bodyResponse(v.value0)(v1.value0));
            };
            if (v1 instanceof Data_Either.Left) {
                return new Data_Either.Left(decodeError(v.value0)(v1.value0));
            };
            throw new Error("Failed pattern match at Payload.Client.Queryable (line 347, column 3 - line 349, column 43): " + [ v1.constructor.name ]);
        };
        if (v instanceof Data_Either.Right) {
            return new Data_Either.Left(new Payload_Client_Response.StatusError({
                response: asPayloadResponse(v.value0)
            }));
        };
        throw new Error("Failed pattern match at Payload.Client.Queryable (line 341, column 1 - line 344, column 25): " + [ v.constructor.name ]);
    };
};
var appendHeaders = function (headers) {
    return function (req) {
        var asAxHeader = function (v) {
            return new Affjax_RequestHeader.RequestHeader(v.value0, v.value1);
        };
        var newHeaders = Data_Semigroup.append(Data_Semigroup.semigroupArray)(req.headers)(Data_Functor.map(Data_Functor.functorArray)(asAxHeader)(Payload_Headers.toUnfoldable(Data_Unfoldable.unfoldableArray)(headers)));
        return {
            method: req.method,
            url: req.url,
            headers: newHeaders,
            content: req.content,
            username: req.username,
            password: req.password,
            withCredentials: req.withCredentials,
            responseFormat: req.responseFormat,
            timeout: req.timeout
        };
    };
};
var makeRequest = function (dictDecodeResponse) {
    return function (v) {
        var defaultReq = {
            method: new Data_Either.Left(v.method),
            url: v.url,
            content: v.body,
            responseFormat: Affjax_ResponseFormat.string,
            headers: Data_Semigroup.append(Data_Semigroup.semigroupArray)(Affjax.defaultRequest.headers)(v.headers),
            password: Affjax.defaultRequest.password,
            timeout: Affjax.defaultRequest.timeout,
            username: Affjax.defaultRequest.username,
            withCredentials: Affjax.defaultRequest.withCredentials
        };
        var req = appendHeaders(Data_Semigroup.append(Payload_Headers.semigroupHeaders)(v.opts.extraHeaders)(v.reqOpts.extraHeaders))(defaultReq);
        return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
            if (v.opts.logLevel instanceof Payload_Client_Options.LogDebug) {
                return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log(printRequest(req)));
            };
            return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
        })())(function () {
            return Control_Bind.bind(Effect_Aff.bindAff)(Affjax.request(req))(function (res) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                    if (v.opts.logLevel instanceof Payload_Client_Options.LogDebug) {
                        return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log(printResponse(res)));
                    };
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                })())(function () {
                    return Control_Applicative.pure(Effect_Aff.applicativeAff)(decodeAffjaxResponse(dictDecodeResponse)(res));
                });
            });
        });
    };
};
var queryableDeleteRoute = function (dictUnion) {
    return function (dictNub) {
        return function (dictTypeEquals) {
            return function (dictUnion1) {
                return function (dictAppend) {
                    return function (dictDecodeResponse) {
                        return function (dictRowToList) {
                            return function (dictEncodeUrlWithParams) {
                                return function (dictEncodeOptionalQuery) {
                                    return function (dictEncodeOptionalBody) {
                                        return function (dictHasContentType) {
                                            return new Queryable(function (v) {
                                                return function (v1) {
                                                    return function (v2) {
                                                        return function (opts) {
                                                            return function (reqOpts) {
                                                                return function (payload) {
                                                                    var body = encodeOptionalBody(dictEncodeOptionalBody)(Type_Proxy["Proxy"].value)(payload);
                                                                    var urlPath = encodeUrlWithParams(dictEncodeUrlWithParams)(opts)(Data_Symbol.SProxy.value)(Type_Data_RowList.RLProxy.value)(payload);
                                                                    var urlQuery = encodeOptionalQuery(dictEncodeOptionalQuery)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(payload);
                                                                    var url = urlPath + urlQuery;
                                                                    var headers = Data_Maybe.maybe([  ])(function (v3) {
                                                                        return [ new Affjax_RequestHeader.ContentType(Payload_ContentType.getContentType(dictHasContentType)(Type_Proxy["Proxy"].value)) ];
                                                                    })(body);
                                                                    return makeRequest(dictDecodeResponse)({
                                                                        method: Data_HTTP_Method.DELETE.value,
                                                                        url: url,
                                                                        body: body,
                                                                        headers: headers,
                                                                        opts: opts,
                                                                        reqOpts: reqOpts
                                                                    });
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            });
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var queryableGetRoute = function (dictLacks) {
    return function (dictUnion) {
        return function (dictNub) {
            return function (dictTypeEquals) {
                return function (dictUnion1) {
                    return function (dictAppend) {
                        return function (dictRowToList) {
                            return function (dictEncodeUrlWithParams) {
                                return function (dictEncodeOptionalQuery) {
                                    return function (dictDecodeResponse) {
                                        return new Queryable(function (v) {
                                            return function (v1) {
                                                return function (v2) {
                                                    return function (opts) {
                                                        return function (reqOpts) {
                                                            return function (payload) {
                                                                var urlPath = encodeUrlWithParams(dictEncodeUrlWithParams)(opts)(Data_Symbol.SProxy.value)(Type_Data_RowList.RLProxy.value)(payload);
                                                                var urlQuery = encodeOptionalQuery(dictEncodeOptionalQuery)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(payload);
                                                                var url = urlPath + urlQuery;
                                                                return makeRequest(dictDecodeResponse)({
                                                                    method: Data_HTTP_Method.GET.value,
                                                                    url: url,
                                                                    body: Data_Maybe.Nothing.value,
                                                                    headers: [  ],
                                                                    opts: opts,
                                                                    reqOpts: reqOpts
                                                                });
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        });
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var queryableHeadRoute = function (dictLacks) {
    return function (dictLacks1) {
        return function (dictUnion) {
            return function (dictNub) {
                return function (dictTypeEquals) {
                    return function (dictAppend) {
                        return function (dictUnion1) {
                            return function (dictRowToList) {
                                return function (dictEncodeUrlWithParams) {
                                    return function (dictEncodeOptionalQuery) {
                                        return new Queryable(function (v) {
                                            return function (v1) {
                                                return function (v2) {
                                                    return function (opts) {
                                                        return function (reqOpts) {
                                                            return function (payload) {
                                                                var urlPath = encodeUrlWithParams(dictEncodeUrlWithParams)(opts)(Data_Symbol.SProxy.value)(Type_Data_RowList.RLProxy.value)(payload);
                                                                var urlQuery = encodeOptionalQuery(dictEncodeOptionalQuery)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(payload);
                                                                var url = urlPath + urlQuery;
                                                                return makeRequest(Payload_Client_DecodeResponse.decodeResponseString)({
                                                                    method: Data_HTTP_Method.HEAD.value,
                                                                    url: url,
                                                                    body: Data_Maybe.Nothing.value,
                                                                    headers: [  ],
                                                                    opts: opts,
                                                                    reqOpts: reqOpts
                                                                });
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        });
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var queryableOptionsRoute = function (dictLacks) {
    return function (dictUnion) {
        return function (dictNub) {
            return function (dictTypeEquals) {
                return function (dictUnion1) {
                    return function (dictAppend) {
                        return function (dictRowToList) {
                            return function (dictEncodeUrlWithParams) {
                                return function (dictEncodeOptionalQuery) {
                                    return function (dictDecodeResponse) {
                                        return new Queryable(function (v) {
                                            return function (v1) {
                                                return function (v2) {
                                                    return function (opts) {
                                                        return function (reqOpts) {
                                                            return function (payload) {
                                                                var urlPath = encodeUrlWithParams(dictEncodeUrlWithParams)(opts)(Data_Symbol.SProxy.value)(Type_Data_RowList.RLProxy.value)(payload);
                                                                var urlQuery = encodeOptionalQuery(dictEncodeOptionalQuery)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(payload);
                                                                var url = urlPath + urlQuery;
                                                                return makeRequest(dictDecodeResponse)({
                                                                    method: Data_HTTP_Method.OPTIONS.value,
                                                                    url: url,
                                                                    body: Data_Maybe.Nothing.value,
                                                                    headers: [  ],
                                                                    opts: opts,
                                                                    reqOpts: reqOpts
                                                                });
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        });
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var queryablePostRoute = function (dictUnion) {
    return function (dictNub) {
        return function (dictTypeEquals) {
            return function (dictUnion1) {
                return function (dictAppend) {
                    return function (dictTypeEquals1) {
                        return function (dictRowToList) {
                            return function (dictEncodeUrlWithParams) {
                                return function (dictEncodeOptionalQuery) {
                                    return function (dictDecodeResponse) {
                                        return function (dictHasContentType) {
                                            return function (dictEncodeBody) {
                                                return new Queryable(function (v) {
                                                    return function (v1) {
                                                        return function (v2) {
                                                            return function (opts) {
                                                                return function (reqOpts) {
                                                                    return function (payload) {
                                                                        var urlPath = encodeUrlWithParams(dictEncodeUrlWithParams)(opts)(Data_Symbol.SProxy.value)(Type_Data_RowList.RLProxy.value)(payload);
                                                                        var urlQuery = encodeOptionalQuery(dictEncodeOptionalQuery)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(payload);
                                                                        var url = urlPath + urlQuery;
                                                                        var v3 = Record.get(new Data_Symbol.IsSymbol(function () {
                                                                            return "body";
                                                                        }))()(Data_Symbol.SProxy.value)(Type_Equality.to(dictTypeEquals1)(payload));
                                                                        var encodedBody = new Affjax_RequestBody["String"](Payload_Client_EncodeBody.encodeBody(dictEncodeBody)(v3));
                                                                        var headers = [ new Affjax_RequestHeader.ContentType(Payload_ContentType.getContentType(dictEncodeBody.HasContentType0())(Type_Proxy["Proxy"].value)) ];
                                                                        return makeRequest(dictDecodeResponse)({
                                                                            method: Data_HTTP_Method.POST.value,
                                                                            url: url,
                                                                            body: new Data_Maybe.Just(encodedBody),
                                                                            headers: headers,
                                                                            opts: opts,
                                                                            reqOpts: reqOpts
                                                                        });
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                });
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var queryablePutRoute = function (dictUnion) {
    return function (dictNub) {
        return function (dictTypeEquals) {
            return function (dictUnion1) {
                return function (dictAppend) {
                    return function (dictRowToList) {
                        return function (dictEncodeUrlWithParams) {
                            return function (dictEncodeOptionalQuery) {
                                return function (dictEncodeOptionalBody) {
                                    return function (dictHasContentType) {
                                        return function (dictDecodeResponse) {
                                            return new Queryable(function (v) {
                                                return function (v1) {
                                                    return function (v2) {
                                                        return function (opts) {
                                                            return function (reqOpts) {
                                                                return function (payload) {
                                                                    var body = encodeOptionalBody(dictEncodeOptionalBody)(Type_Proxy["Proxy"].value)(payload);
                                                                    var urlPath = encodeUrlWithParams(dictEncodeUrlWithParams)(opts)(Data_Symbol.SProxy.value)(Type_Data_RowList.RLProxy.value)(payload);
                                                                    var urlQuery = encodeOptionalQuery(dictEncodeOptionalQuery)(Data_Symbol.SProxy.value)(Type_Proxy["Proxy"].value)(payload);
                                                                    var url = urlPath + urlQuery;
                                                                    var headers = Data_Maybe.maybe([  ])(function (v3) {
                                                                        return [ new Affjax_RequestHeader.ContentType(Payload_ContentType.getContentType(dictHasContentType)(Type_Proxy["Proxy"].value)) ];
                                                                    })(body);
                                                                    return makeRequest(dictDecodeResponse)({
                                                                        method: Data_HTTP_Method.PUT.value,
                                                                        url: url,
                                                                        body: body,
                                                                        headers: headers,
                                                                        opts: opts,
                                                                        reqOpts: reqOpts
                                                                    });
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            });
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
module.exports = {
    encodeOptionalBody: encodeOptionalBody,
    encodeOptionalQuery: encodeOptionalQuery,
    encodeUrlWithParams: encodeUrlWithParams,
    request: request,
    Queryable: Queryable,
    makeRequest: makeRequest,
    printRequest: printRequest,
    printResponse: printResponse,
    lookupHeader: lookupHeader,
    decodeAffjaxResponse: decodeAffjaxResponse,
    decodeError: decodeError,
    bodyResponse: bodyResponse,
    asPayloadResponse: asPayloadResponse,
    statusAndHeaders: statusAndHeaders,
    asHeaderTuple: asHeaderTuple,
    EncodeOptionalBody: EncodeOptionalBody,
    EncodeOptionalQuery: EncodeOptionalQuery,
    EncodeUrlWithParams: EncodeUrlWithParams,
    encodeUrl: encodeUrl,
    stripTrailingSlash: stripTrailingSlash,
    appendHeaders: appendHeaders,
    queryableGetRoute: queryableGetRoute,
    queryablePostRoute: queryablePostRoute,
    queryableHeadRoute: queryableHeadRoute,
    queryablePutRoute: queryablePutRoute,
    queryableDeleteRoute: queryableDeleteRoute,
    queryableOptionsRoute: queryableOptionsRoute,
    encodeOptionalBodyUndefined: encodeOptionalBodyUndefined,
    encodeOptionalBodyDefined: encodeOptionalBodyDefined,
    encodeOptionalQueryUndefined: encodeOptionalQueryUndefined,
    encodeOptionalQueryDefined: encodeOptionalQueryDefined,
    encodeUrlWithParamsUndefined: encodeUrlWithParamsUndefined,
    encodeUrlWithParamsDefined: encodeUrlWithParamsDefined
};
