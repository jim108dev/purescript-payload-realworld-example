// Generated by purs version 0.13.8
"use strict";
var Control_Comonad = require("../Control.Comonad/index.js");
var Control_Comonad_Env_Trans = require("../Control.Comonad.Env.Trans/index.js");
var Control_Comonad_Store_Trans = require("../Control.Comonad.Store.Trans/index.js");
var Control_Comonad_Traced_Trans = require("../Control.Comonad.Traced.Trans/index.js");
var Control_Comonad_Trans_Class = require("../Control.Comonad.Trans.Class/index.js");
var Control_Extend = require("../Control.Extend/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var ComonadStore = function (Comonad0, peek, pos) {
    this.Comonad0 = Comonad0;
    this.peek = peek;
    this.pos = pos;
};
var pos = function (dict) {
    return dict.pos;
};
var peek = function (dict) {
    return dict.peek;
};
var peeks = function (dictComonadStore) {
    return function (f) {
        return function (x) {
            return peek(dictComonadStore)(f(pos(dictComonadStore)(x)))(x);
        };
    };
};
var seeks = function (dictComonadStore) {
    return function (f) {
        var $18 = peeks(dictComonadStore)(f);
        var $19 = Control_Extend.duplicate((dictComonadStore.Comonad0()).Extend0());
        return function ($20) {
            return $18($19($20));
        };
    };
};
var seek = function (dictComonadStore) {
    return function (s) {
        var $21 = peek(dictComonadStore)(s);
        var $22 = Control_Extend.duplicate((dictComonadStore.Comonad0()).Extend0());
        return function ($23) {
            return $21($22($23));
        };
    };
};
var experiment = function (dictComonadStore) {
    return function (dictFunctor) {
        return function (f) {
            return function (x) {
                return Data_Functor.map(dictFunctor)(Data_Function.flip(peek(dictComonadStore))(x))(f(pos(dictComonadStore)(x)));
            };
        };
    };
};
var comonadStoreTracedT = function (dictComonadStore) {
    return function (dictMonoid) {
        return new ComonadStore(function () {
            return Control_Comonad_Traced_Trans.comonadTracedT(dictComonadStore.Comonad0())(dictMonoid);
        }, function (s) {
            var $24 = peek(dictComonadStore)(s);
            var $25 = Control_Comonad_Trans_Class.lower(Control_Comonad_Traced_Trans.comonadTransTracedT(dictMonoid))(dictComonadStore.Comonad0());
            return function ($26) {
                return $24($25($26));
            };
        }, (function () {
            var $27 = pos(dictComonadStore);
            var $28 = Control_Comonad_Trans_Class.lower(Control_Comonad_Traced_Trans.comonadTransTracedT(dictMonoid))(dictComonadStore.Comonad0());
            return function ($29) {
                return $27($28($29));
            };
        })());
    };
};
var comonadStoreStoreT = function (dictComonad) {
    return new ComonadStore(function () {
        return Control_Comonad_Store_Trans.comonadStoreT(dictComonad);
    }, function (s) {
        return function (v) {
            return Control_Comonad.extract(dictComonad)(v.value0)(s);
        };
    }, function (v) {
        return v.value1;
    });
};
var comonadStoreEnvT = function (dictComonadStore) {
    return new ComonadStore(function () {
        return Control_Comonad_Env_Trans.comonadEnvT(dictComonadStore.Comonad0());
    }, function (s) {
        var $30 = peek(dictComonadStore)(s);
        var $31 = Control_Comonad_Trans_Class.lower(Control_Comonad_Env_Trans.comonadTransEnvT)(dictComonadStore.Comonad0());
        return function ($32) {
            return $30($31($32));
        };
    }, (function () {
        var $33 = pos(dictComonadStore);
        var $34 = Control_Comonad_Trans_Class.lower(Control_Comonad_Env_Trans.comonadTransEnvT)(dictComonadStore.Comonad0());
        return function ($35) {
            return $33($34($35));
        };
    })());
};
module.exports = {
    peek: peek,
    pos: pos,
    ComonadStore: ComonadStore,
    experiment: experiment,
    peeks: peeks,
    seek: seek,
    seeks: seeks,
    comonadStoreStoreT: comonadStoreStoreT,
    comonadStoreEnvT: comonadStoreEnvT,
    comonadStoreTracedT: comonadStoreTracedT
};
