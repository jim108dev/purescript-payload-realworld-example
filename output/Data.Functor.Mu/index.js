// Generated by purs version 0.13.8
"use strict";
var Control_Alt = require("../Control.Alt/index.js");
var Control_Plus = require("../Control.Plus/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_TacitString = require("../Data.TacitString/index.js");
var In = function (x) {
    return x;
};
var unroll = function (v) {
    return v;
};
var showMu = function (dictShow) {
    return function (dictFunctor) {
        return new Data_Show.Show(function (v) {
            return Data_Show.show(dictShow)(Data_Functor.mapFlipped(dictFunctor)(v)((function () {
                var $27 = Data_Show.show(showMu(dictShow)(dictFunctor));
                return function ($28) {
                    return Data_TacitString.hush($27($28));
                };
            })()));
        });
    };
};
var semigroupMu = function (dictAlt) {
    return new Data_Semigroup.Semigroup(function (v) {
        return function (v1) {
            return Control_Alt.alt(dictAlt)(v)(v1);
        };
    });
};
var roll = In;
var transMu = function (dictFunctor) {
    return function (η) {
        var $29 = Data_Functor.map(dictFunctor)(transMu(dictFunctor)(η));
        return function ($30) {
            return roll($29(η(unroll($30))));
        };
    };
};
var newtypeMu = new Data_Newtype.Newtype(function (n) {
    return n;
}, In);
var monoidMu = function (dictPlus) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMu(dictPlus.Alt0());
    }, Control_Plus.empty(dictPlus));
};
var eqMu = function (dictEq1) {
    return new Data_Eq.Eq(function (v) {
        return function (v1) {
            return Data_Eq.eq1(dictEq1)(eqMu(dictEq1))(v)(v1);
        };
    });
};
var ordMu = function (dictEq1) {
    return function (dictOrd1) {
        return new Data_Ord.Ord(function () {
            return eqMu(dictEq1);
        }, function (v) {
            return function (v1) {
                return Data_Ord.compare1(dictOrd1)(ordMu(dictEq1)(dictOrd1))(v)(v1);
            };
        });
    };
};
module.exports = {
    In: In,
    roll: roll,
    unroll: unroll,
    transMu: transMu,
    newtypeMu: newtypeMu,
    eqMu: eqMu,
    ordMu: ordMu,
    showMu: showMu,
    semigroupMu: semigroupMu,
    monoidMu: monoidMu
};
