// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Data_Enum = require("../Data.Enum/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HTTP_Method = require("../Data.HTTP.Method/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_MediaType = require("../Data.MediaType/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Effect = require("../Effect/index.js");
var Effect_Uncurried = require("../Effect.Uncurried/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");
var Web_XHR_ReadyState = require("../Web.XHR.ReadyState/index.js");
var xmlHttpRequest = Effect_Uncurried.runEffectFn1($foreign["_xmlHttpRequest"]);
var withCredentials = function (xhr) {
    return function () {
        return $foreign["_getProperty"]("withCredentials", xhr);
    };
};
var upload = function (xhr) {
    return function () {
        return $foreign["_getProperty"]("upload", xhr);
    };
};
var toEventTarget = Unsafe_Coerce.unsafeCoerce;
var timeout = function (xhr) {
    return function () {
        return $foreign["_getProperty"]("statusText", xhr);
    };
};
var statusText = function (xhr) {
    return function () {
        return $foreign["_getProperty"]("statusText", xhr);
    };
};
var status = function (xhr) {
    return function () {
        return $foreign["_getProperty"]("status", xhr);
    };
};
var setWithCredentials = function (wc) {
    return function (xhr) {
        return function () {
            return $foreign["_setProperty"]("withCredentials", wc, xhr);
        };
    };
};
var setTimeout = function (ms) {
    return function (xhr) {
        return function () {
            return $foreign["_setProperty"]("timeout", ms, xhr);
        };
    };
};
var setRequestHeader = function (header) {
    return function (value) {
        return function (xhr) {
            return function () {
                return $foreign["_setRequestHeader"](header, value, xhr);
            };
        };
    };
};
var sendString = function (payload) {
    return function (xhr) {
        return function () {
            return $foreign["_send"](payload, xhr);
        };
    };
};
var sendFormData = function (payload) {
    return function (xhr) {
        return function () {
            return $foreign["_send"](payload, xhr);
        };
    };
};
var sendDocument = function (payload) {
    return function (xhr) {
        return function () {
            return $foreign["_send"](payload, xhr);
        };
    };
};
var sendBlob = function (payload) {
    return function (xhr) {
        return function () {
            return $foreign["_send"](payload, xhr);
        };
    };
};
var sendArrayView = function (payload) {
    return function (xhr) {
        return function () {
            return $foreign["_send"](payload, xhr);
        };
    };
};
var send = function (xhr) {
    return function () {
        return $foreign["_send"](Data_Nullable.toNullable(Data_Maybe.Nothing.value), xhr);
    };
};
var responseURL = function (xhr) {
    return function () {
        return $foreign["_getProperty"]("responseURL", xhr);
    };
};
var response = function (xhr) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(function () {
        return $foreign["_getProperty"]("response", xhr);
    });
};
var readyState = function (xhr) {
    var toReadyState = function (rs) {
        return Data_Maybe.fromMaybe(Web_XHR_ReadyState.Unsent.value)(Data_Enum.toEnum(Web_XHR_ReadyState.boundedEnumReadyState)(rs));
    };
    return Data_Functor.map(Effect.functorEffect)(toReadyState)(function () {
        return $foreign["_getProperty"]("readyState", xhr);
    });
};
var overrideMimeType = function (ty) {
    return function (req) {
        return function () {
            return $foreign["_overrideMimeType"](Data_Newtype.un(Data_MediaType.newtypeMediaType)(Data_MediaType.MediaType)(ty), req);
        };
    };
};
var open$prime = function (options) {
    return function (xhr) {
        return function () {
            return $foreign["_open"](Data_HTTP_Method.print(options.method), options.url, Data_Nullable.toNullable(options.username), Data_Nullable.toNullable(options.password), xhr);
        };
    };
};
var open = function (method) {
    return function (url) {
        return function (xhr) {
            return function () {
                return $foreign["_open"](Data_HTTP_Method.print(method), url, Data_Nullable.toNullable(Data_Maybe.Nothing.value), Data_Nullable.toNullable(Data_Maybe.Nothing.value), xhr);
            };
        };
    };
};
var getResponseHeader = function (header) {
    return function (xhr) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(function () {
            return $foreign["_getResponseHeader"](header, xhr);
        });
    };
};
var getAllResponseHeaders = function (xhr) {
    return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(function () {
        return $foreign["_getAllResponseHeaders"](xhr);
    });
};
var abort = Effect_Uncurried.runEffectFn1($foreign["_abort"]);
module.exports = {
    toEventTarget: toEventTarget,
    xmlHttpRequest: xmlHttpRequest,
    abort: abort,
    getAllResponseHeaders: getAllResponseHeaders,
    getResponseHeader: getResponseHeader,
    open: open,
    "open'": open$prime,
    overrideMimeType: overrideMimeType,
    send: send,
    sendString: sendString,
    sendDocument: sendDocument,
    sendBlob: sendBlob,
    sendArrayView: sendArrayView,
    sendFormData: sendFormData,
    setRequestHeader: setRequestHeader,
    readyState: readyState,
    response: response,
    responseURL: responseURL,
    status: status,
    statusText: statusText,
    timeout: timeout,
    setTimeout: setTimeout,
    upload: upload,
    withCredentials: withCredentials,
    setWithCredentials: setWithCredentials
};
