// Generated by purs version 0.13.8
"use strict";
var Data_Either = require("../Data.Either/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Payload_Internal_UrlParsing = require("../Payload.Internal.UrlParsing/index.js");
var Payload_Server_Params = require("../Payload.Server.Params/index.js");
var Record = require("../Record/index.js");
var Type_Equality = require("../Type.Equality/index.js");
var MatchUrl = function (match) {
    this.match = match;
};
var DecodeUrl = function (decodeUrl) {
    this.decodeUrl = decodeUrl;
};
var matchUrlUrlNil = function (dictTypeEquals) {
    return new MatchUrl(function (v) {
        return function (v1) {
            return function (v2) {
                return function (v3) {
                    if (v3 instanceof Data_List_Types.Nil) {
                        return new Data_Either.Right(Type_Equality.to(dictTypeEquals)(v2));
                    };
                    return Data_Either.Left.create("Path mismatch: Ran out of params when path still had '" + (Data_Show.show(Data_List_Types.showList(Data_Show.showString))(v3) + "'"));
                };
            };
        };
    });
};
var matchUrlMulti = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictLacks) {
            return function (dictDecodeSegments) {
                return new MatchUrl(function (v) {
                    return function (paramsType) {
                        return function (params) {
                            return function (segments) {
                                var v1 = Payload_Server_Params.decodeSegments(dictDecodeSegments)(segments);
                                if (v1 instanceof Data_Either.Left) {
                                    return Data_Either.Left.create(Data_Show.show(Data_Show.showString)(v1.value0));
                                };
                                if (v1 instanceof Data_Either.Right) {
                                    return Data_Either.Right.create(Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(v1.value0)(params));
                                };
                                throw new Error("Failed pattern match at Payload.Server.Internal.Url (line 39, column 40 - line 41, column 81): " + [ v1.constructor.name ]);
                            };
                        };
                    };
                });
            };
        };
    };
};
var match = function (dict) {
    return dict.match;
};
var matchUrlConsKey = function (dictIsSymbol) {
    return function (dictMatchUrl) {
        return function (dictCons) {
            return function (dictCons1) {
                return function (dictLacks) {
                    return function (dictDecodeParam) {
                        return new MatchUrl(function (v) {
                            return function (paramsType) {
                                return function (params) {
                                    return function (v1) {
                                        if (v1 instanceof Data_List_Types.Nil) {
                                            return new Data_Either.Left("Decoding error at key");
                                        };
                                        if (v1 instanceof Data_List_Types.Cons) {
                                            var v2 = Payload_Server_Params.decodeParam(dictDecodeParam)(v1.value0);
                                            if (v2 instanceof Data_Either.Left) {
                                                return Data_Either.Left.create(Data_Show.show(Data_Show.showString)(v2.value0));
                                            };
                                            if (v2 instanceof Data_Either.Right) {
                                                var newParams = Record.insert(dictIsSymbol)()()(Data_Symbol.SProxy.value)(v2.value0)(params);
                                                return match(dictMatchUrl)(Payload_Internal_UrlParsing.UrlListProxy.value)(paramsType)(newParams)(v1.value1);
                                            };
                                            throw new Error("Failed pattern match at Payload.Server.Internal.Url (line 52, column 48 - line 55, column 63): " + [ v2.constructor.name ]);
                                        };
                                        throw new Error("Failed pattern match at Payload.Server.Internal.Url (line 43, column 1 - line 55, column 63): " + [ v.constructor.name, paramsType.constructor.name, params.constructor.name, v1.constructor.name ]);
                                    };
                                };
                            };
                        });
                    };
                };
            };
        };
    };
};
var matchUrlConsLit = function (dictIsSymbol) {
    return function (dictMatchUrl) {
        return new MatchUrl(function (v) {
            return function (paramsType) {
                return function (params) {
                    return function (v1) {
                        if (v1 instanceof Data_List_Types.Nil) {
                            return new Data_Either.Left("Decoding error at literal");
                        };
                        if (v1 instanceof Data_List_Types.Cons) {
                            return match(dictMatchUrl)(Payload_Internal_UrlParsing.UrlListProxy.value)(paramsType)(params)(v1.value1);
                        };
                        throw new Error("Failed pattern match at Payload.Server.Internal.Url (line 57, column 1 - line 63, column 58): " + [ v.constructor.name, paramsType.constructor.name, params.constructor.name, v1.constructor.name ]);
                    };
                };
            };
        });
    };
};
var decodeUrlSymbol = function (dictParseUrl) {
    return function (dictMatchUrl) {
        return new DecodeUrl(function (v) {
            return function (paramsType) {
                return function (path) {
                    return match(dictMatchUrl)(Payload_Internal_UrlParsing.UrlListProxy.value)(paramsType)({})(path);
                };
            };
        });
    };
};
var decodeUrl = function (dict) {
    return dict.decodeUrl;
};
module.exports = {
    decodeUrl: decodeUrl,
    match: match,
    DecodeUrl: DecodeUrl,
    MatchUrl: MatchUrl,
    decodeUrlSymbol: decodeUrlSymbol,
    matchUrlUrlNil: matchUrlUrlNil,
    matchUrlMulti: matchUrlMulti,
    matchUrlConsKey: matchUrlConsKey,
    matchUrlConsLit: matchUrlConsLit
};
