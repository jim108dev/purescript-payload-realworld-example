// Generated by purs version 0.13.8
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Data_Symbol = require("../Data.Symbol/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Record = require("../Record/index.js");
var Record_Builder = require("../Record.Builder/index.js");
var Type_Data_Row = require("../Type.Data.Row/index.js");
var Type_Data_RowList = require("../Type.Data.RowList/index.js");
var SLProxy = (function () {
    function SLProxy() {

    };
    SLProxy.value = new SLProxy();
    return SLProxy;
})();
var ZipRecord = function (zipRecordImpl) {
    this.zipRecordImpl = zipRecordImpl;
};
var SequenceRecord = function (Functor0, sequenceRecordImpl) {
    this.Functor0 = Functor0;
    this.sequenceRecordImpl = sequenceRecordImpl;
};
var SListToRowList = {};
var OrdRecord = function (compareRecordImpl) {
    this.compareRecordImpl = compareRecordImpl;
};
var MapRecord = function (mapRecordBuilder) {
    this.mapRecordBuilder = mapRecordBuilder;
};
var Keys = function (keysImpl) {
    this.keysImpl = keysImpl;
};
var zipRecordNil = new ZipRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                return Control_Category.identity(Record_Builder.categoryBuilder);
            };
        };
    };
});
var zipRecordImpl = function (dict) {
    return dict.zipRecordImpl;
};
var zipRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictCons1) {
            return function (dictCons2) {
                return function (dictLacks) {
                    return function (dictZipRecord) {
                        return new ZipRecord(function (v) {
                            return function (ra) {
                                return function (v1) {
                                    return function (rb) {
                                        var tail = zipRecordImpl(dictZipRecord)(Type_Data_RowList.RLProxy.value)(ra)(Type_Data_RowList.RLProxy.value)(rb);
                                        var head = new Data_Tuple.Tuple(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(ra), Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(rb));
                                        var first = Record_Builder.insert()()(dictIsSymbol)(Data_Symbol.SProxy.value)(head);
                                        return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(first)(tail);
                                    };
                                };
                            };
                        });
                    };
                };
            };
        };
    };
};
var zipRecord = function (dictRowToList) {
    return function (dictRowToList1) {
        return function (dictZipRecord) {
            return function (ra) {
                return function (rb) {
                    var builder = zipRecordImpl(dictZipRecord)(Type_Data_RowList.RLProxy.value)(ra)(Type_Data_RowList.RLProxy.value)(rb);
                    return Record_Builder.build(builder)({});
                };
            };
        };
    };
};
var slToRlSNil = SListToRowList;
var slToRlSCons = function (dictSListToRowList) {
    return SListToRowList;
};
var sequenceRecordSingle = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictFunctor) {
            return function (dictLacks) {
                return function (dictCons1) {
                    return new SequenceRecord(function () {
                        return dictFunctor;
                    }, function (v) {
                        return function (a) {
                            var valA = Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(a);
                            return Data_Functor.map(dictFunctor)(Record_Builder.insert()()(dictIsSymbol)(Data_Symbol.SProxy.value))(valA);
                        };
                    });
                };
            };
        };
    };
};
var sequenceRecordNil = function (dictApplicative) {
    return new SequenceRecord((dictApplicative.Apply0()).Functor0, function (v) {
        return function (v1) {
            return Control_Applicative.pure(dictApplicative)(Control_Category.identity(Record_Builder.categoryBuilder));
        };
    });
};
var sequenceRecordImpl = function (dict) {
    return dict.sequenceRecordImpl;
};
var sequenceRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictApply) {
            return function (dictSequenceRecord) {
                return function (dictLacks) {
                    return function (dictCons1) {
                        return new SequenceRecord(dictApply.Functor0, function (v) {
                            return function (a) {
                                var rest = sequenceRecordImpl(dictSequenceRecord)(Type_Data_RowList.RLProxy.value)(a);
                                var valA = Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(a);
                                var fn = function (valA$prime) {
                                    return function (rest$prime) {
                                        return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert()()(dictIsSymbol)(Data_Symbol.SProxy.value)(valA$prime))(rest$prime);
                                    };
                                };
                                return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(fn)(valA))(rest);
                            };
                        });
                    };
                };
            };
        };
    };
};
var sequenceRecord = function (dictRowToList) {
    return function (dictSequenceRecord) {
        return function (a) {
            var builder = sequenceRecordImpl(dictSequenceRecord)(Type_Data_RowList.RLProxy.value)(a);
            return Data_Functor.map(dictSequenceRecord.Functor0())(Data_Functor.flap(Data_Functor.functorFn)(Record_Builder.build)({}))(builder);
        };
    };
};
var ordRecordNil = new OrdRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return Data_Ordering.EQ.value;
        };
    };
});
var nilKeys = new Keys(function (v) {
    return Data_Monoid.mempty(Data_List_Types.monoidList);
});
var mapRecordNil = new MapRecord(function (v) {
    return function (v1) {
        return function (v2) {
            return Control_Category.identity(Record_Builder.categoryBuilder);
        };
    };
});
var mapRecordBuilder = function (dict) {
    return dict.mapRecordBuilder;
};
var mapRecordCons = function (dictIsSymbol) {
    return function (dictCons) {
        return function (dictMapRecord) {
            return function (dictLacks) {
                return function (dictCons1) {
                    return new MapRecord(function (v) {
                        return function (f) {
                            return function (r) {
                                var rest = mapRecordBuilder(dictMapRecord)(Type_Data_RowList.RLProxy.value)(f)(r);
                                var val = f(Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(r));
                                var first = Record_Builder.insert()()(dictIsSymbol)(Data_Symbol.SProxy.value)(val);
                                return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(first)(rest);
                            };
                        };
                    });
                };
            };
        };
    };
};
var mapRecord = function (dictRowToList) {
    return function (dictMapRecord) {
        return function (f) {
            return function (r) {
                var builder = mapRecordBuilder(dictMapRecord)(Type_Data_RowList.RLProxy.value)(f)(r);
                return Record_Builder.build(builder)({});
            };
        };
    };
};
var keysImpl = function (dict) {
    return dict.keysImpl;
};
var slistKeys = function (dictSListToRowList) {
    return function (dictKeys) {
        return function (v) {
            return keysImpl(dictKeys)(Type_Data_RowList.RLProxy.value);
        };
    };
};
var keys = function (dictRowToList) {
    return function (dictKeys) {
        return function (v) {
            return keysImpl(dictKeys)(Type_Data_RowList.RLProxy.value);
        };
    };
};
var pick = function (dictUnion) {
    return function (dictRowToList) {
        return function (dictKeys) {
            var ks = Data_Array.fromFoldable(Data_List_Types.foldableList)(keys()(dictKeys)(Type_Data_Row.RProxy.value));
            return Data_Function_Uncurried.runFn2($foreign.pickFn)(ks);
        };
    };
};
var consKeys = function (dictIsSymbol) {
    return function (dictKeys) {
        return new Keys(function (v) {
            var rest = keysImpl(dictKeys)(Type_Data_RowList.RLProxy.value);
            var first = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
            return new Data_List_Types.Cons(first, rest);
        });
    };
};
var compareRecordImpl = function (dict) {
    return dict.compareRecordImpl;
};
var ordRecordCons = function (dictIsSymbol) {
    return function (dictOrd) {
        return function (dictCons) {
            return function (dictOrdRecord) {
                return new OrdRecord(function (v) {
                    return function (a) {
                        return function (b) {
                            var valA = Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(a);
                            var valB = Record.get(dictIsSymbol)()(Data_Symbol.SProxy.value)(b);
                            var v1 = Data_Ord.compare(dictOrd)(valA)(valB);
                            if (v1 instanceof Data_Ordering.EQ) {
                                return compareRecordImpl(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(a)(b);
                            };
                            return v1;
                        };
                    };
                });
            };
        };
    };
};
var compareRecord = function (dictRowToList) {
    return function (dictOrdRecord) {
        return function (a) {
            return function (b) {
                return compareRecordImpl(dictOrdRecord)(Type_Data_RowList.RLProxy.value)(a)(b);
            };
        };
    };
};
module.exports = {
    compareRecordImpl: compareRecordImpl,
    keysImpl: keysImpl,
    mapRecordBuilder: mapRecordBuilder,
    sequenceRecordImpl: sequenceRecordImpl,
    zipRecordImpl: zipRecordImpl,
    mapRecord: mapRecord,
    MapRecord: MapRecord,
    ZipRecord: ZipRecord,
    zipRecord: zipRecord,
    Keys: Keys,
    keys: keys,
    pick: pick,
    slistKeys: slistKeys,
    SLProxy: SLProxy,
    SListToRowList: SListToRowList,
    OrdRecord: OrdRecord,
    compareRecord: compareRecord,
    SequenceRecord: SequenceRecord,
    sequenceRecord: sequenceRecord,
    mapRecordCons: mapRecordCons,
    mapRecordNil: mapRecordNil,
    zipRecordNil: zipRecordNil,
    zipRecordCons: zipRecordCons,
    nilKeys: nilKeys,
    consKeys: consKeys,
    slToRlSNil: slToRlSNil,
    slToRlSCons: slToRlSCons,
    ordRecordCons: ordRecordCons,
    ordRecordNil: ordRecordNil,
    sequenceRecordSingle: sequenceRecordSingle,
    sequenceRecordCons: sequenceRecordCons,
    sequenceRecordNil: sequenceRecordNil,
    pickFn: $foreign.pickFn
};
