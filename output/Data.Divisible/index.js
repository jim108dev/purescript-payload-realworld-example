// Generated by purs version 0.13.8
"use strict";
var Data_Comparison = require("../Data.Comparison/index.js");
var Data_Divide = require("../Data.Divide/index.js");
var Data_Equivalence = require("../Data.Equivalence/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Op = require("../Data.Op/index.js");
var Data_Ordering = require("../Data.Ordering/index.js");
var Divisible = function (Divide0, conquer) {
    this.Divide0 = Divide0;
    this.conquer = conquer;
};
var divisiblePredicate = new Divisible(function () {
    return Data_Divide.dividePredicate;
}, Data_Function["const"](true));
var divisibleOp = function (dictMonoid) {
    return new Divisible(function () {
        return Data_Divide.divideOp(dictMonoid.Semigroup0());
    }, Data_Op.Op(Data_Function["const"](Data_Monoid.mempty(dictMonoid))));
};
var divisibleEquivalence = new Divisible(function () {
    return Data_Divide.divideEquivalence;
}, Data_Equivalence.Equivalence(function (v) {
    return function (v1) {
        return true;
    };
}));
var divisibleComparison = new Divisible(function () {
    return Data_Divide.divideComparison;
}, Data_Comparison.Comparison(function (v) {
    return function (v1) {
        return Data_Ordering.EQ.value;
    };
}));
var conquer = function (dict) {
    return dict.conquer;
};
module.exports = {
    conquer: conquer,
    Divisible: Divisible,
    divisibleComparison: divisibleComparison,
    divisibleEquivalence: divisibleEquivalence,
    divisiblePredicate: divisiblePredicate,
    divisibleOp: divisibleOp
};
