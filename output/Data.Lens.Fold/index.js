// Generated by purs version 0.13.8
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Category = require("../Control.Category/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Lens_Internal_Forget = require("../Data.Lens.Internal.Forget/index.js");
var Data_Lens_Internal_Indexed = require("../Data.Lens.Internal.Indexed/index.js");
var Data_List_Types = require("../Data.List.Types/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Maybe_First = require("../Data.Maybe.First/index.js");
var Data_Maybe_Last = require("../Data.Maybe.Last/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Monoid_Additive = require("../Data.Monoid.Additive/index.js");
var Data_Monoid_Conj = require("../Data.Monoid.Conj/index.js");
var Data_Monoid_Disj = require("../Data.Monoid.Disj/index.js");
var Data_Monoid_Dual = require("../Data.Monoid.Dual/index.js");
var Data_Monoid_Endo = require("../Data.Monoid.Endo/index.js");
var Data_Monoid_Multiplicative = require("../Data.Monoid.Multiplicative/index.js");
var Data_Newtype = require("../Data.Newtype/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Profunctor = require("../Data.Profunctor/index.js");
var Data_Profunctor_Choice = require("../Data.Profunctor.Choice/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var unfolded = function (dictMonoid) {
    return function (f) {
        return function (p) {
            var go = (function () {
                var $43 = Data_Maybe.maybe(Data_Monoid.mempty(dictMonoid))(function (v) {
                    return Data_Semigroup.append(dictMonoid.Semigroup0())(Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(p)(v.value0))(go(v.value1));
                });
                return function ($44) {
                    return $43(f($44));
                };
            })();
            return go;
        };
    };
};
var replicated = function (dictMonoid) {
    return function (i) {
        return function (v) {
            var go = function (v1) {
                return function (x) {
                    if (v1 === 0) {
                        return Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid));
                    };
                    return Data_Semigroup.append(Data_Semigroup.semigroupFn(dictMonoid.Semigroup0()))(x)(go(v1 - 1 | 0)(x));
                };
            };
            return go(i)(v);
        };
    };
};
var ifoldMapOf = function (p) {
    return function (f) {
        return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(p(Data_Lens_Internal_Indexed.Indexed(Data_Tuple.uncurry(f))));
    };
};
var ifoldlOf = function (p) {
    return function (f) {
        return function (r) {
            var $45 = Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r);
            var $46 = Data_Newtype.unwrap(Data_Newtype.newtypeDual);
            var $47 = ifoldMapOf(p)(function (i) {
                var $49 = Data_Function.flip(f(i));
                return function ($50) {
                    return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($49($50)));
                };
            });
            return function ($48) {
                return $45($46($47($48)));
            };
        };
    };
};
var ifoldrOf = function (p) {
    return function (f) {
        return function (r) {
            var $51 = Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r);
            var $52 = ifoldMapOf(p)(function (i) {
                var $54 = f(i);
                return function ($55) {
                    return Data_Monoid_Endo.Endo($54($55));
                };
            });
            return function ($53) {
                return $51($52($53));
            };
        };
    };
};
var itoListOf = function (p) {
    return ifoldrOf(p)(function (i) {
        return function (x) {
            return function (xs) {
                return new Data_List_Types.Cons(new Data_Tuple.Tuple(i, x), xs);
            };
        };
    })(Data_List_Types.Nil.value);
};
var itraverseOf_ = function (dictApplicative) {
    return function (p) {
        return function (f) {
            return ifoldrOf(p)(function (i) {
                return function (a) {
                    return function (fu) {
                        return Control_Apply.applySecond(dictApplicative.Apply0())(Data_Functor["void"]((dictApplicative.Apply0()).Functor0())(f(i)(a)))(fu);
                    };
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var iforOf_ = function (dictApplicative) {
    var $56 = itraverseOf_(dictApplicative);
    return function ($57) {
        return Data_Function.flip($56($57));
    };
};
var ifindOf = function (p) {
    return function (f) {
        return ifoldrOf(p)(function (i) {
            return function (a) {
                return Data_Maybe.maybe((function () {
                    var $37 = f(i)(a);
                    if ($37) {
                        return new Data_Maybe.Just(a);
                    };
                    return Data_Maybe.Nothing.value;
                })())(Data_Maybe.Just.create);
            };
        })(Data_Maybe.Nothing.value);
    };
};
var ianyOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            var $58 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
            var $59 = ifoldMapOf(p)(function (i) {
                var $61 = f(i);
                return function ($62) {
                    return Data_Monoid_Disj.Disj($61($62));
                };
            });
            return function ($60) {
                return $58($59($60));
            };
        };
    };
};
var iallOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            var $63 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
            var $64 = ifoldMapOf(p)(function (i) {
                var $66 = f(i);
                return function ($67) {
                    return Data_Monoid_Conj.Conj($66($67));
                };
            });
            return function ($65) {
                return $63($64($65));
            };
        };
    };
};
var folded = function (dictMonoid) {
    return function (dictFoldable) {
        return function (v) {
            return Data_Foldable.foldMap(dictFoldable)(dictMonoid)(v);
        };
    };
};
var foldMapOf = Data_Newtype.under(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.Forget);
var foldOf = function (p) {
    return foldMapOf(p)(Control_Category.identity(Control_Category.categoryFn));
};
var foldlOf = function (p) {
    return function (f) {
        return function (r) {
            var $68 = Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r);
            var $69 = Data_Newtype.unwrap(Data_Newtype.newtypeDual);
            var $70 = foldMapOf(p)((function () {
                var $72 = Data_Function.flip(f);
                return function ($73) {
                    return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($72($73)));
                };
            })());
            return function ($71) {
                return $68($69($70($71)));
            };
        };
    };
};
var foldrOf = function (p) {
    return function (f) {
        return function (r) {
            var $74 = Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(r);
            var $75 = foldMapOf(p)(function ($77) {
                return Data_Monoid_Endo.Endo(f($77));
            });
            return function ($76) {
                return $74($75($76));
            };
        };
    };
};
var maximumOf = function (dictOrd) {
    return function (p) {
        var max = function (a) {
            return function (b) {
                var $39 = Data_Ord.greaterThan(dictOrd)(a)(b);
                if ($39) {
                    return a;
                };
                return b;
            };
        };
        return foldrOf(p)(function (a) {
            var $78 = Data_Maybe.maybe(a)(max(a));
            return function ($79) {
                return Data_Maybe.Just.create($78($79));
            };
        })(Data_Maybe.Nothing.value);
    };
};
var minimumOf = function (dictOrd) {
    return function (p) {
        var min = function (a) {
            return function (b) {
                var $40 = Data_Ord.lessThan(dictOrd)(a)(b);
                if ($40) {
                    return a;
                };
                return b;
            };
        };
        return foldrOf(p)(function (a) {
            var $80 = Data_Maybe.maybe(a)(min(a));
            return function ($81) {
                return Data_Maybe.Just.create($80($81));
            };
        })(Data_Maybe.Nothing.value);
    };
};
var toListOf = function (p) {
    return foldrOf(p)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
};
var toArrayOf = function (p) {
    var $82 = Data_Array.fromFoldable(Data_List_Types.foldableList);
    var $83 = toListOf(p);
    return function ($84) {
        return $82($83($84));
    };
};
var toArrayOfOn = function (s) {
    return function (p) {
        return toArrayOf(p)(s);
    };
};
var toListOfOn = function (s) {
    return function (p) {
        return toListOf(p)(s);
    };
};
var traverseOf_ = function (dictApplicative) {
    return function (p) {
        return function (f) {
            return foldrOf(p)(function (a) {
                return function (fu) {
                    return Control_Apply.applySecond(dictApplicative.Apply0())(Data_Functor["void"]((dictApplicative.Apply0()).Functor0())(f(a)))(fu);
                };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        };
    };
};
var has = function (dictHeytingAlgebra) {
    return function (p) {
        var $85 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
        var $86 = foldMapOf(p)(Data_Function["const"](Data_HeytingAlgebra.tt(dictHeytingAlgebra)));
        return function ($87) {
            return $85($86($87));
        };
    };
};
var hasn$primet = function (dictHeytingAlgebra) {
    return function (p) {
        var $88 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
        var $89 = foldMapOf(p)(Data_Function["const"](Data_HeytingAlgebra.ff(dictHeytingAlgebra)));
        return function ($90) {
            return $88($89($90));
        };
    };
};
var lastOf = function (p) {
    var $91 = Data_Newtype.unwrap(Data_Maybe_Last.newtypeLast);
    var $92 = foldMapOf(p)(function ($94) {
        return Data_Maybe_Last.Last(Data_Maybe.Just.create($94));
    });
    return function ($93) {
        return $91($92($93));
    };
};
var lengthOf = function (p) {
    var $95 = Data_Newtype.unwrap(Data_Newtype.newtypeAdditive);
    var $96 = foldMapOf(p)(Data_Function["const"](1));
    return function ($97) {
        return $95($96($97));
    };
};
var preview = function (p) {
    var $98 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
    var $99 = foldMapOf(p)(function ($101) {
        return Data_Maybe_First.First(Data_Maybe.Just.create($101));
    });
    return function ($100) {
        return $98($99($100));
    };
};
var previewOn = function (s) {
    return function (p) {
        return preview(p)(s);
    };
};
var productOf = function (dictSemiring) {
    return function (p) {
        var $102 = Data_Newtype.unwrap(Data_Newtype.newtypeMultiplicative);
        var $103 = foldMapOf(p)(Data_Monoid_Multiplicative.Multiplicative);
        return function ($104) {
            return $102($103($104));
        };
    };
};
var sequenceOf_ = function (dictApplicative) {
    return function (p) {
        var $105 = Data_Function.flip(Data_Newtype.unwrap(Data_Newtype.newtypeEndo))(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
        var $106 = foldMapOf(p)(function (f) {
            return function (v) {
                return Control_Apply.applySecond(dictApplicative.Apply0())(f)(v);
            };
        });
        return function ($107) {
            return $105($106($107));
        };
    };
};
var sumOf = function (dictSemiring) {
    return function (p) {
        var $108 = Data_Newtype.unwrap(Data_Newtype.newtypeAdditive);
        var $109 = foldMapOf(p)(Data_Monoid_Additive.Additive);
        return function ($110) {
            return $108($109($110));
        };
    };
};
var firstOf = function (p) {
    var $111 = Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst);
    var $112 = foldMapOf(p)(function ($114) {
        return Data_Maybe_First.First(Data_Maybe.Just.create($114));
    });
    return function ($113) {
        return $111($112($113));
    };
};
var findOf = function (p) {
    return function (f) {
        return foldrOf(p)(function (a) {
            return Data_Maybe.maybe((function () {
                var $41 = f(a);
                if ($41) {
                    return new Data_Maybe.Just(a);
                };
                return Data_Maybe.Nothing.value;
            })())(Data_Maybe.Just.create);
        })(Data_Maybe.Nothing.value);
    };
};
var filtered = function (dictChoice) {
    return function (f) {
        var $115 = Data_Profunctor.dimap(dictChoice.Profunctor0())(function (x) {
            var $42 = f(x);
            if ($42) {
                return new Data_Either.Right(x);
            };
            return new Data_Either.Left(x);
        })(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)));
        var $116 = Data_Profunctor_Choice.right(dictChoice);
        return function ($117) {
            return $115($116($117));
        };
    };
};
var anyOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            var $118 = Data_Newtype.unwrap(Data_Newtype.newtypeDisj);
            var $119 = foldMapOf(p)(function ($121) {
                return Data_Monoid_Disj.Disj(f($121));
            });
            return function ($120) {
                return $118($119($120));
            };
        };
    };
};
var elemOf = function (dictEq) {
    return function (p) {
        return function (a) {
            return anyOf(Data_HeytingAlgebra.heytingAlgebraBoolean)(p)(function (v) {
                return Data_Eq.eq(dictEq)(v)(a);
            });
        };
    };
};
var orOf = function (dictHeytingAlgebra) {
    return function (p) {
        return anyOf(dictHeytingAlgebra)(p)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var allOf = function (dictHeytingAlgebra) {
    return function (p) {
        return function (f) {
            var $122 = Data_Newtype.unwrap(Data_Newtype.newtypeConj);
            var $123 = foldMapOf(p)(function ($125) {
                return Data_Monoid_Conj.Conj(f($125));
            });
            return function ($124) {
                return $122($123($124));
            };
        };
    };
};
var andOf = function (dictHeytingAlgebra) {
    return function (p) {
        return allOf(dictHeytingAlgebra)(p)(Control_Category.identity(Control_Category.categoryFn));
    };
};
var notElemOf = function (dictEq) {
    return function (p) {
        return function (a) {
            return allOf(Data_HeytingAlgebra.heytingAlgebraBoolean)(p)(function (v) {
                return Data_Eq.notEq(dictEq)(v)(a);
            });
        };
    };
};
module.exports = {
    previewOn: previewOn,
    toListOfOn: toListOfOn,
    preview: preview,
    foldOf: foldOf,
    foldMapOf: foldMapOf,
    foldrOf: foldrOf,
    foldlOf: foldlOf,
    toListOf: toListOf,
    firstOf: firstOf,
    lastOf: lastOf,
    maximumOf: maximumOf,
    minimumOf: minimumOf,
    allOf: allOf,
    anyOf: anyOf,
    andOf: andOf,
    orOf: orOf,
    elemOf: elemOf,
    notElemOf: notElemOf,
    sumOf: sumOf,
    productOf: productOf,
    lengthOf: lengthOf,
    findOf: findOf,
    sequenceOf_: sequenceOf_,
    traverseOf_: traverseOf_,
    has: has,
    "hasn't": hasn$primet,
    replicated: replicated,
    filtered: filtered,
    folded: folded,
    unfolded: unfolded,
    toArrayOf: toArrayOf,
    toArrayOfOn: toArrayOfOn,
    ifoldMapOf: ifoldMapOf,
    ifoldrOf: ifoldrOf,
    ifoldlOf: ifoldlOf,
    iallOf: iallOf,
    ianyOf: ianyOf,
    itoListOf: itoListOf,
    itraverseOf_: itraverseOf_
};
