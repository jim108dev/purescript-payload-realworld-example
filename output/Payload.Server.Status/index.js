// Generated by purs version 0.13.8
"use strict";
var variantAlsoNegotiates = {
    code: 506,
    reason: "Variant Also Negotiates"
};
var useProxy = {
    code: 305,
    reason: "Use Proxy"
};
var uriTooLong = {
    code: 414,
    reason: "URI Too Long"
};
var upgradeRequired = {
    code: 426,
    reason: "Upgrade Required"
};
var unsupportedMediaType = {
    code: 415,
    reason: "Unsupported Media Type"
};
var unprocessableEntity = {
    code: 422,
    reason: "Unprocessable Entity"
};
var unavailableForLegalReasons = {
    code: 451,
    reason: "Unavailable For Legal Reasons"
};
var unauthorized = {
    code: 401,
    reason: "Unauthorized"
};
var tooManyRequests = {
    code: 429,
    reason: "Too Many Requests"
};
var temporaryRedirect = {
    code: 307,
    reason: "Temporary Redirect"
};
var switchingProtocols = {
    code: 101,
    reason: "Switching Protocols"
};
var serviceUnavailable = {
    code: 503,
    reason: "Service Unavailable"
};
var seeOther = {
    code: 303,
    reason: "See Other"
};
var resetContent = {
    code: 205,
    reason: "Reset Content"
};
var requestTimeout = {
    code: 408,
    reason: "Request Timeout"
};
var requestHeaderFieldsTooLarge = {
    code: 431,
    reason: "Request Header Fields Too Large"
};
var rangeNotSatisfiable = {
    code: 416,
    reason: "Range Not Satisfiable"
};
var proxyAuthenticationRequired = {
    code: 407,
    reason: "Proxy Authentication Required"
};
var processing = {
    code: 102,
    reason: "Processing"
};
var preconditionRequired = {
    code: 428,
    reason: "Precondition Required"
};
var preconditionFailed = {
    code: 412,
    reason: "Precondition Failed"
};
var permanentRedirect = {
    code: 308,
    reason: "Permanent Redirect"
};
var paymentRequired = {
    code: 402,
    reason: "Payment Required"
};
var payloadTooLarge = {
    code: 413,
    reason: "Payload Too Large"
};
var partialContent = {
    code: 206,
    reason: "Partial Content"
};
var ok = {
    code: 200,
    reason: "OK"
};
var notModified = {
    code: 304,
    reason: "Not Modified"
};
var notImplemented = {
    code: 501,
    reason: "Not Implemented"
};
var notFound = {
    code: 404,
    reason: "Not Found"
};
var notExtended = {
    code: 510,
    reason: "Not Extended"
};
var notAcceptable = {
    code: 406,
    reason: "Not Acceptable"
};
var nonAuthoritativeInformation = {
    code: 203,
    reason: "Non-Authoritative Information"
};
var noContent = {
    code: 204,
    reason: "No Content"
};
var networkAuthenticationRequired = {
    code: 511,
    reason: "Network Authentication Required"
};
var multipleChoices = {
    code: 300,
    reason: "Multiple Choices"
};
var multiStatus = {
    code: 207,
    reason: "Multi-Status"
};
var movedPermanently = {
    code: 301,
    reason: "Moved Permanently"
};
var misdirectedRequest = {
    code: 421,
    reason: "Misdirected Request"
};
var methodNotAllowed = {
    code: 405,
    reason: "Method Not Allowed"
};
var loopDetected = {
    code: 508,
    reason: "Loop Detected"
};
var locked = {
    code: 423,
    reason: "Locked"
};
var lengthRequired = {
    code: 411,
    reason: "Length Required"
};
var internalError = {
    code: 500,
    reason: "Internal Server Error"
};
var insufficientStorage = {
    code: 507,
    reason: "Insufficient Storage"
};
var imUsed = {
    code: 226,
    reason: "IM Used"
};
var imATeapot = {
    code: 418,
    reason: "I'm a teapot"
};
var httpVersionNotSupported = {
    code: 505,
    reason: "HTTP Version Not Supported"
};
var gone = {
    code: 410,
    reason: "Gone"
};
var gatewayTimeout = {
    code: 504,
    reason: "Gateway Timeout"
};
var found = {
    code: 302,
    reason: "Found"
};
var forbidden = {
    code: 403,
    reason: "Forbidden"
};
var failedDependency = {
    code: 424,
    reason: "Failed Dependency"
};
var expectationFailed = {
    code: 417,
    reason: "Expectation Failed"
};
var custom = function (code) {
    return function (reason) {
        return {
            code: code,
            reason: reason
        };
    };
};
var created = {
    code: 201,
    reason: "Created"
};
var $$continue = {
    code: 100,
    reason: "Continue"
};
var conflict = {
    code: 409,
    reason: "Conflict"
};
var badRequest = {
    code: 400,
    reason: "Bad Request"
};
var badGateway = {
    code: 502,
    reason: "Bad Gateway"
};
var alreadyReported = {
    code: 208,
    reason: "Already Reported"
};
var accepted = {
    code: 202,
    reason: "Accepted"
};
module.exports = {
    custom: custom,
    "continue": $$continue,
    switchingProtocols: switchingProtocols,
    processing: processing,
    ok: ok,
    created: created,
    accepted: accepted,
    nonAuthoritativeInformation: nonAuthoritativeInformation,
    noContent: noContent,
    resetContent: resetContent,
    partialContent: partialContent,
    multiStatus: multiStatus,
    alreadyReported: alreadyReported,
    imUsed: imUsed,
    multipleChoices: multipleChoices,
    movedPermanently: movedPermanently,
    found: found,
    seeOther: seeOther,
    notModified: notModified,
    useProxy: useProxy,
    temporaryRedirect: temporaryRedirect,
    permanentRedirect: permanentRedirect,
    badRequest: badRequest,
    unauthorized: unauthorized,
    paymentRequired: paymentRequired,
    forbidden: forbidden,
    notFound: notFound,
    methodNotAllowed: methodNotAllowed,
    notAcceptable: notAcceptable,
    proxyAuthenticationRequired: proxyAuthenticationRequired,
    requestTimeout: requestTimeout,
    conflict: conflict,
    gone: gone,
    lengthRequired: lengthRequired,
    preconditionFailed: preconditionFailed,
    payloadTooLarge: payloadTooLarge,
    uriTooLong: uriTooLong,
    unsupportedMediaType: unsupportedMediaType,
    rangeNotSatisfiable: rangeNotSatisfiable,
    expectationFailed: expectationFailed,
    imATeapot: imATeapot,
    misdirectedRequest: misdirectedRequest,
    unprocessableEntity: unprocessableEntity,
    locked: locked,
    failedDependency: failedDependency,
    upgradeRequired: upgradeRequired,
    preconditionRequired: preconditionRequired,
    tooManyRequests: tooManyRequests,
    requestHeaderFieldsTooLarge: requestHeaderFieldsTooLarge,
    unavailableForLegalReasons: unavailableForLegalReasons,
    internalError: internalError,
    notImplemented: notImplemented,
    badGateway: badGateway,
    serviceUnavailable: serviceUnavailable,
    gatewayTimeout: gatewayTimeout,
    httpVersionNotSupported: httpVersionNotSupported,
    variantAlsoNegotiates: variantAlsoNegotiates,
    insufficientStorage: insufficientStorage,
    loopDetected: loopDetected,
    notExtended: notExtended,
    networkAuthenticationRequired: networkAuthenticationRequired
};
